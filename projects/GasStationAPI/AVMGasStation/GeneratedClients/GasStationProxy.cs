using System;
using Algorand;
using Algorand.Algod;
using Algorand.Algod.Model;
using Algorand.Algod.Model.Transactions;
using AVM.ClientGenerator;
using AVM.ClientGenerator.Core;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AVM.ClientGenerator.ABI.ARC56;
using Algorand.AVM.ClientGenerator.ABI.ARC56;

namespace AVMGasStation.GeneratedClients
{


    public class GasStationProxy : ProxyBase
    {
        public override AppDescriptionArc56 App { get; set; } = null;

        public GasStationProxy(DefaultApi defaultApi, ulong appId) : base(defaultApi, appId)
        {
            App = Newtonsoft.Json.JsonConvert.DeserializeObject<AVM.ClientGenerator.ABI.ARC56.AppDescriptionArc56>(Encoding.UTF8.GetString(Convert.FromBase64String(_ARC56DATA)));

        }

        public class UserStruct : AVMObjectType
        {
            public ulong Balance { get; set; }

            public string Configuration { get; set; }

            public byte[] ToByteArray()
            {
                var ret = new List<byte>();
                var stringRef = new Dictionary<int, byte[]>();
                AVM.ClientGenerator.ABI.ARC4.Types.WireType vBalance = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                vBalance.From(Balance);
                ret.AddRange(vBalance.Encode());
                AVM.ClientGenerator.ABI.ARC4.Types.WireType vConfiguration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                vConfiguration.From(Configuration);
                stringRef[ret.Count] = vConfiguration.Encode();
                ret.AddRange(new byte[2]);
                foreach (var item in stringRef)
                {
                    var b1 = ret.Count;
                    ret[item.Key] = Convert.ToByte(b1 / 256);
                    ret[item.Key + 1] = Convert.ToByte(b1 % 256);
                    ret.AddRange(item.Value);
                }
                return ret.ToArray();

            }

            public static UserStruct Parse(byte[] bytes)
            {
                var queue = new Queue<byte>(bytes);
                var prefixOffset = 0;
                var retPrefix = new byte[4] { bytes[0], bytes[1], bytes[2], bytes[3] };
                if (retPrefix.SequenceEqual(Constants.RetPrefix))
                {
                    prefixOffset = 4;
                    for (int i = 0; i < 4 && queue.Count > 0; i++) { queue.Dequeue(); }
                }
                var ret = new UserStruct();
                uint count = 0;
                AVM.ClientGenerator.ABI.ARC4.Types.WireType vBalance = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("uint64");
                count = vBalance.Decode(queue.ToArray());
                for (int i = 0; i < Convert.ToInt32(count); i++) { queue.Dequeue(); }
                var valueBalance = vBalance.ToValue();
                if (valueBalance is ulong vBalanceValue) { ret.Balance = vBalanceValue; }
                var indexConfiguration = queue.Dequeue() * 256 + queue.Dequeue();
                AVM.ClientGenerator.ABI.ARC4.Types.WireType vConfiguration = AVM.ClientGenerator.ABI.ARC4.Types.WireType.FromABIDescription("string");
                vConfiguration.Decode(bytes.Skip(indexConfiguration + prefixOffset).ToArray());
                var valueConfiguration = vConfiguration.ToValue();
                if (valueConfiguration is string vConfigurationValue) { ret.Configuration = vConfigurationValue; }
                return ret;

            }

        }

        ///<summary>
        ///addressUdpater from global biatec configuration is allowed to update application
        ///</summary>
        /// <param name="newVersion"> </param>
        public async Task<bool> UpdateApplication(string newVersion, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 112, 166, 94, 137 };
            var result = await base.CallApp(new List<object> { abiHandle, newVersion }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return BitConverter.ToBoolean(ReverseIfLittleEndian(result.First().ToArray()), 0);

        }

        public async Task<List<Transaction>> UpdateApplication_Transactions(string newVersion, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 112, 166, 94, 137 };
            return await base.MakeTransactionList(new List<object> { abiHandle, newVersion }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Execution address with which it is possible to fund other addresses
        ///</summary>
        /// <param name="a">Address </param>
        public async Task SetAddressExecutive(Address a, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { a });
            byte[] abiHandle = { 139, 24, 123, 61 };
            var result = await base.CallApp(new List<object> { abiHandle, a }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> SetAddressExecutive_Transactions(Address a, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 139, 24, 123, 61 };
            return await base.MakeTransactionList(new List<object> { abiHandle, a }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Execution address with which it is possible to fund other addresses
        ///</summary>
        /// <param name="isSuspended"> </param>
        public async Task SetSuspended(bool isSuspended, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 233, 163, 214, 168 };
            var result = await base.CallApp(new List<object> { abiHandle, isSuspended }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> SetSuspended_Transactions(bool isSuspended, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 233, 163, 214, 168 };
            return await base.MakeTransactionList(new List<object> { abiHandle, isSuspended }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Readonly method to fetch easily funder's balance
        ///</summary>
        /// <param name="funder">Funder's address </param>
        public async Task<ulong> GetFunderBalance(Address funder, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { funder });
            byte[] abiHandle = { 0, 150, 245, 59 };
            var result = await base.SimApp(new List<object> { abiHandle, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return BitConverter.ToUInt64(ReverseIfLittleEndian(result.First().ToArray()), 0);

        }

        public async Task<List<Transaction>> GetFunderBalance_Transactions(Address funder, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 0, 150, 245, 59 };
            return await base.MakeTransactionList(new List<object> { abiHandle, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Readonly method to fetch easily funder's configuration
        ///</summary>
        /// <param name="funder">Funder's address </param>
        public async Task<string> GetFunderConfiguration(Address funder, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { funder });
            byte[] abiHandle = { 214, 2, 38, 15 };
            var result = await base.SimApp(new List<object> { abiHandle, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return Encoding.UTF8.GetString(result.First());

        }

        public async Task<List<Transaction>> GetFunderConfiguration_Transactions(Address funder, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 214, 2, 38, 15 };
            return await base.MakeTransactionList(new List<object> { abiHandle, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Readonly method to fetch easily funder's box
        ///</summary>
        /// <param name="funder">Funder's address </param>
        public async Task<UserStruct> GetFunderBox(Address funder, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { funder });
            byte[] abiHandle = { 74, 29, 197, 232 };
            var result = await base.SimApp(new List<object> { abiHandle, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return UserStruct.Parse(result.Last());

        }

        public async Task<List<Transaction>> GetFunderBox_Transactions(Address funder, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 74, 29, 197, 232 };
            return await base.MakeTransactionList(new List<object> { abiHandle, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Gas Funder can set configuration with the deposit tx
        ///
        ///Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas
        ///</summary>
        /// <param name="txnDeposit">Deposit transaction </param>
        /// <param name="configuration">Configration to be stored into the box </param>
        public async Task DepositWithConfiguration(PaymentTransaction txnDeposit, string configuration, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_transactions.AddRange(new List<Transaction> { txnDeposit });
            byte[] abiHandle = { 103, 146, 221, 37 };
            var result = await base.CallApp(new List<object> { abiHandle, txnDeposit, configuration }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> DepositWithConfiguration_Transactions(PaymentTransaction txnDeposit, string configuration, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 103, 146, 221, 37 };
            return await base.MakeTransactionList(new List<object> { abiHandle, txnDeposit, configuration }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Gas Funder can deposit more algos to his funder account deposit
        ///
        ///Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas
        ///</summary>
        /// <param name="txnDeposit">Deposit transaction </param>
        public async Task Deposit(PaymentTransaction txnDeposit, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_transactions.AddRange(new List<Transaction> { txnDeposit });
            byte[] abiHandle = { 54, 37, 228, 235 };
            var result = await base.CallApp(new List<object> { abiHandle, txnDeposit }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> Deposit_Transactions(PaymentTransaction txnDeposit, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 54, 37, 228, 235 };
            return await base.MakeTransactionList(new List<object> { abiHandle, txnDeposit }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Executor can fund the account which needs gas to execute the transaction
        ///</summary>
        /// <param name="amount">Amout to send </param>
        /// <param name="receiver">Receiver </param>
        /// <param name="note">Note </param>
        /// <param name="funder"> </param>
        public async Task<byte[]> FundAccount(Address receiver, Address funder, ulong amount, string note, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { receiver, funder });
            byte[] abiHandle = { 23, 179, 173, 122 };
            var result = await base.CallApp(new List<object> { abiHandle, amount, receiver, note, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return result.First();

        }

        public async Task<List<Transaction>> FundAccount_Transactions(Address receiver, Address funder, ulong amount, string note, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 23, 179, 173, 122 };
            return await base.MakeTransactionList(new List<object> { abiHandle, amount, receiver, note, funder }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Biatec can withdraw service fees. The current balance
        ///</summary>
        /// <param name="receiver">Receiver </param>
        /// <param name="amount">Amout to send </param>
        public async Task<byte[]> Withdraw(Address receiver, ulong amount, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            _tx_accounts.AddRange(new List<Address> { receiver });
            byte[] abiHandle = { 141, 57, 172, 177 };
            var result = await base.CallApp(new List<object> { abiHandle, receiver, amount }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return result.First();

        }

        public async Task<List<Transaction>> Withdraw_Transactions(Address receiver, ulong amount, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 141, 57, 172, 177 };
            return await base.MakeTransactionList(new List<object> { abiHandle, receiver, amount }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Updater can perfom key registration for this LP pool
        ///</summary>
        /// <param name="voteKey"> </param>
        /// <param name="selectionKey"> </param>
        /// <param name="stateProofKey"> </param>
        /// <param name="voteFirst"> </param>
        /// <param name="voteLast"> </param>
        /// <param name="voteKeyDilution"> </param>
        /// <param name="fee"> </param>
        public async Task<byte[]> SendOnlineKeyRegistration(byte[] voteKey, byte[] selectionKey, byte[] stateProofKey, ulong voteFirst, ulong voteLast, ulong voteKeyDilution, ulong fee, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 198, 29, 86, 245 };
            var result = await base.CallApp(new List<object> { abiHandle, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution, fee }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);
            return result.First();

        }

        public async Task<List<Transaction>> SendOnlineKeyRegistration_Transactions(byte[] voteKey, byte[] selectionKey, byte[] stateProofKey, ulong voteFirst, ulong voteLast, ulong voteKeyDilution, ulong fee, Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.NoOp)
        {
            byte[] abiHandle = { 198, 29, 86, 245 };
            return await base.MakeTransactionList(new List<object> { abiHandle, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution, fee }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        ///<summary>
        ///Constructor Bare Action
        ///</summary>
        public async Task CreateApplication(Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.CreateApplication)
        {
            _tx_boxes ??= new List<BoxRef>();
            _tx_transactions ??= new List<Transaction>();
            _tx_assets ??= new List<ulong>();
            _tx_apps ??= new List<ulong>();
            _tx_accounts ??= new List<Address>();
            byte[] abiHandle = { 0, 193, 250, 21 };
            var result = await base.CallApp(new List<object> { }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        public async Task<List<Transaction>> CreateApplication_Transactions(Account _tx_sender, ulong? _tx_fee, string _tx_note = "", ulong _tx_roundValidity = 1000, List<BoxRef> _tx_boxes = null, List<Transaction> _tx_transactions = null, List<ulong> _tx_assets = null, List<ulong> _tx_apps = null, List<Address> _tx_accounts = null, AVM.ClientGenerator.Core.OnCompleteType _tx_callType = AVM.ClientGenerator.Core.OnCompleteType.CreateApplication)
        {
            byte[] abiHandle = { 0, 193, 250, 21 };
            return await base.MakeTransactionList(new List<object> { }, _tx_fee: _tx_fee, _tx_callType: _tx_callType, _tx_roundValidity: _tx_roundValidity, _tx_note: _tx_note, _tx_sender: _tx_sender, _tx_transactions: _tx_transactions, _tx_apps: _tx_apps, _tx_assets: _tx_assets, _tx_accounts: _tx_accounts, _tx_boxes: _tx_boxes);

        }

        protected override ulong? ExtraProgramPages { get; set; } = 0;
        protected string _ARC56DATA = "eyJhcmNzIjpbMjIsMjhdLCJuYW1lIjoiR2FzU3RhdGlvbiIsImRlc2MiOm51bGwsIm5ldHdvcmtzIjp7fSwic3RydWN0cyI6eyJVc2VyU3RydWN0IjpbeyJuYW1lIjoiYmFsYW5jZSIsInR5cGUiOiJ1aW50NjQifSx7Im5hbWUiOiJjb25maWd1cmF0aW9uIiwidHlwZSI6InN0cmluZyJ9XX0sIk1ldGhvZHMiOlt7Im5hbWUiOiJ1cGRhdGVBcHBsaWNhdGlvbiIsImRlc2MiOiJhZGRyZXNzVWRwYXRlciBmcm9tIGdsb2JhbCBiaWF0ZWMgY29uZmlndXJhdGlvbiBpcyBhbGxvd2VkIHRvIHVwZGF0ZSBhcHBsaWNhdGlvbiIsImFyZ3MiOlt7InR5cGUiOiJzdHJpbmciLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJuZXdWZXJzaW9uIiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfV0sInJldHVybnMiOnsidHlwZSI6ImJvb2wiLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiVXBkYXRlQXBwbGljYXRpb24iXX0sInJlYWRvbmx5IjpmYWxzZSwiZXZlbnRzIjpbXSwicmVjb21tZW5kYXRpb25zIjp7ImlubmVyVHJhbnNhY3Rpb25Db3VudCI6bnVsbCwiYm94ZXMiOm51bGwsImFjY291bnRzIjpudWxsLCJhcHBzIjpudWxsLCJhc3NldHMiOm51bGx9fSx7Im5hbWUiOiJzZXRBZGRyZXNzRXhlY3V0aXZlIiwiZGVzYyI6IkV4ZWN1dGlvbiBhZGRyZXNzIHdpdGggd2hpY2ggaXQgaXMgcG9zc2libGUgdG8gZnVuZCBvdGhlciBhZGRyZXNzZXMiLCJhcmdzIjpbeyJ0eXBlIjoiYWRkcmVzcyIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImEiLCJkZXNjIjoiQWRkcmVzcyIsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiJ2b2lkIiwic3RydWN0IjpudWxsLCJkZXNjIjpudWxsfSwiYWN0aW9ucyI6eyJjcmVhdGUiOltdLCJjYWxsIjpbIk5vT3AiXX0sInJlYWRvbmx5IjpmYWxzZSwiZXZlbnRzIjpbXSwicmVjb21tZW5kYXRpb25zIjp7ImlubmVyVHJhbnNhY3Rpb25Db3VudCI6bnVsbCwiYm94ZXMiOm51bGwsImFjY291bnRzIjpudWxsLCJhcHBzIjpudWxsLCJhc3NldHMiOm51bGx9fSx7Im5hbWUiOiJzZXRTdXNwZW5kZWQiLCJkZXNjIjoiRXhlY3V0aW9uIGFkZHJlc3Mgd2l0aCB3aGljaCBpdCBpcyBwb3NzaWJsZSB0byBmdW5kIG90aGVyIGFkZHJlc3NlcyIsImFyZ3MiOlt7InR5cGUiOiJib29sIiwic3RydWN0IjpudWxsLCJuYW1lIjoiaXNTdXNwZW5kZWQiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoidm9pZCIsInN0cnVjdCI6bnVsbCwiZGVzYyI6bnVsbH0sImFjdGlvbnMiOnsiY3JlYXRlIjpbXSwiY2FsbCI6WyJOb09wIl19LCJyZWFkb25seSI6ZmFsc2UsImV2ZW50cyI6W10sInJlY29tbWVuZGF0aW9ucyI6eyJpbm5lclRyYW5zYWN0aW9uQ291bnQiOm51bGwsImJveGVzIjpudWxsLCJhY2NvdW50cyI6bnVsbCwiYXBwcyI6bnVsbCwiYXNzZXRzIjpudWxsfX0seyJuYW1lIjoiZ2V0RnVuZGVyQmFsYW5jZSIsImRlc2MiOiJSZWFkb25seSBtZXRob2QgdG8gZmV0Y2ggZWFzaWx5IGZ1bmRlcidzIGJhbGFuY2UiLCJhcmdzIjpbeyJ0eXBlIjoiYWRkcmVzcyIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImZ1bmRlciIsImRlc2MiOiJGdW5kZXIncyBhZGRyZXNzIiwiZGVmYXVsdFZhbHVlIjpudWxsfV0sInJldHVybnMiOnsidHlwZSI6InVpbnQ2NCIsInN0cnVjdCI6bnVsbCwiZGVzYyI6bnVsbH0sImFjdGlvbnMiOnsiY3JlYXRlIjpbXSwiY2FsbCI6WyJOb09wIl19LCJyZWFkb25seSI6dHJ1ZSwiZXZlbnRzIjpbXSwicmVjb21tZW5kYXRpb25zIjp7ImlubmVyVHJhbnNhY3Rpb25Db3VudCI6bnVsbCwiYm94ZXMiOm51bGwsImFjY291bnRzIjpudWxsLCJhcHBzIjpudWxsLCJhc3NldHMiOm51bGx9fSx7Im5hbWUiOiJnZXRGdW5kZXJDb25maWd1cmF0aW9uIiwiZGVzYyI6IlJlYWRvbmx5IG1ldGhvZCB0byBmZXRjaCBlYXNpbHkgZnVuZGVyJ3MgY29uZmlndXJhdGlvbiIsImFyZ3MiOlt7InR5cGUiOiJhZGRyZXNzIiwic3RydWN0IjpudWxsLCJuYW1lIjoiZnVuZGVyIiwiZGVzYyI6IkZ1bmRlcidzIGFkZHJlc3MiLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoic3RyaW5nIiwic3RydWN0IjpudWxsLCJkZXNjIjpudWxsfSwiYWN0aW9ucyI6eyJjcmVhdGUiOltdLCJjYWxsIjpbIk5vT3AiXX0sInJlYWRvbmx5Ijp0cnVlLCJldmVudHMiOltdLCJyZWNvbW1lbmRhdGlvbnMiOnsiaW5uZXJUcmFuc2FjdGlvbkNvdW50IjpudWxsLCJib3hlcyI6bnVsbCwiYWNjb3VudHMiOm51bGwsImFwcHMiOm51bGwsImFzc2V0cyI6bnVsbH19LHsibmFtZSI6ImdldEZ1bmRlckJveCIsImRlc2MiOiJSZWFkb25seSBtZXRob2QgdG8gZmV0Y2ggZWFzaWx5IGZ1bmRlcidzIGJveCIsImFyZ3MiOlt7InR5cGUiOiJhZGRyZXNzIiwic3RydWN0IjpudWxsLCJuYW1lIjoiZnVuZGVyIiwiZGVzYyI6IkZ1bmRlcidzIGFkZHJlc3MiLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoiKHVpbnQ2NCxzdHJpbmcpIiwic3RydWN0IjoiVXNlclN0cnVjdCIsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOnRydWUsImV2ZW50cyI6W10sInJlY29tbWVuZGF0aW9ucyI6eyJpbm5lclRyYW5zYWN0aW9uQ291bnQiOm51bGwsImJveGVzIjpudWxsLCJhY2NvdW50cyI6bnVsbCwiYXBwcyI6bnVsbCwiYXNzZXRzIjpudWxsfX0seyJuYW1lIjoiZGVwb3NpdFdpdGhDb25maWd1cmF0aW9uIiwiZGVzYyI6IkdhcyBGdW5kZXIgY2FuIHNldCBjb25maWd1cmF0aW9uIHdpdGggdGhlIGRlcG9zaXQgdHhcblxuU2VydmljZSBmZWUgaXMgNSUgYW5kIGlzIGRlZHVjdGVkIG9uIGRlcG9zaXQsIG9uIGRlcG9zaXQgb2YgMTAwIEFsZ28sIHVzZXIgcmVjZWl2ZXMgOTUgQWxnbyBjcmVkaXQgZm9yIGhpcyB1c2VycyB0byB1c2UgZm9yIGdhcyIsImFyZ3MiOlt7InR5cGUiOiJwYXkiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ0eG5EZXBvc2l0IiwiZGVzYyI6IkRlcG9zaXQgdHJhbnNhY3Rpb24iLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6InN0cmluZyIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImNvbmZpZ3VyYXRpb24iLCJkZXNjIjoiQ29uZmlncmF0aW9uIHRvIGJlIHN0b3JlZCBpbnRvIHRoZSBib3giLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoidm9pZCIsInN0cnVjdCI6bnVsbCwiZGVzYyI6bnVsbH0sImFjdGlvbnMiOnsiY3JlYXRlIjpbXSwiY2FsbCI6WyJOb09wIl19LCJyZWFkb25seSI6ZmFsc2UsImV2ZW50cyI6W10sInJlY29tbWVuZGF0aW9ucyI6eyJpbm5lclRyYW5zYWN0aW9uQ291bnQiOm51bGwsImJveGVzIjpudWxsLCJhY2NvdW50cyI6bnVsbCwiYXBwcyI6bnVsbCwiYXNzZXRzIjpudWxsfX0seyJuYW1lIjoiZGVwb3NpdCIsImRlc2MiOiJHYXMgRnVuZGVyIGNhbiBkZXBvc2l0IG1vcmUgYWxnb3MgdG8gaGlzIGZ1bmRlciBhY2NvdW50IGRlcG9zaXRcblxuU2VydmljZSBmZWUgaXMgNSUgYW5kIGlzIGRlZHVjdGVkIG9uIGRlcG9zaXQsIG9uIGRlcG9zaXQgb2YgMTAwIEFsZ28sIHVzZXIgcmVjZWl2ZXMgOTUgQWxnbyBjcmVkaXQgZm9yIGhpcyB1c2VycyB0byB1c2UgZm9yIGdhcyIsImFyZ3MiOlt7InR5cGUiOiJwYXkiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ0eG5EZXBvc2l0IiwiZGVzYyI6IkRlcG9zaXQgdHJhbnNhY3Rpb24iLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoidm9pZCIsInN0cnVjdCI6bnVsbCwiZGVzYyI6bnVsbH0sImFjdGlvbnMiOnsiY3JlYXRlIjpbXSwiY2FsbCI6WyJOb09wIl19LCJyZWFkb25seSI6ZmFsc2UsImV2ZW50cyI6W10sInJlY29tbWVuZGF0aW9ucyI6eyJpbm5lclRyYW5zYWN0aW9uQ291bnQiOm51bGwsImJveGVzIjpudWxsLCJhY2NvdW50cyI6bnVsbCwiYXBwcyI6bnVsbCwiYXNzZXRzIjpudWxsfX0seyJuYW1lIjoiZnVuZEFjY291bnQiLCJkZXNjIjoiRXhlY3V0b3IgY2FuIGZ1bmQgdGhlIGFjY291bnQgd2hpY2ggbmVlZHMgZ2FzIHRvIGV4ZWN1dGUgdGhlIHRyYW5zYWN0aW9uIiwiYXJncyI6W3sidHlwZSI6InVpbnQ2NCIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImFtb3VudCIsImRlc2MiOiJBbW91dCB0byBzZW5kIiwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJhZGRyZXNzIiwic3RydWN0IjpudWxsLCJuYW1lIjoicmVjZWl2ZXIiLCJkZXNjIjoiUmVjZWl2ZXIiLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6InN0cmluZyIsInN0cnVjdCI6bnVsbCwibmFtZSI6Im5vdGUiLCJkZXNjIjoiTm90ZSIsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoiYWRkcmVzcyIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImZ1bmRlciIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiJieXRlW10iLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOmZhbHNlLCJldmVudHMiOltdLCJyZWNvbW1lbmRhdGlvbnMiOnsiaW5uZXJUcmFuc2FjdGlvbkNvdW50IjpudWxsLCJib3hlcyI6bnVsbCwiYWNjb3VudHMiOm51bGwsImFwcHMiOm51bGwsImFzc2V0cyI6bnVsbH19LHsibmFtZSI6IndpdGhkcmF3IiwiZGVzYyI6IkJpYXRlYyBjYW4gd2l0aGRyYXcgc2VydmljZSBmZWVzLiBUaGUgY3VycmVudCBiYWxhbmNlIiwiYXJncyI6W3sidHlwZSI6ImFkZHJlc3MiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJyZWNlaXZlciIsImRlc2MiOiJSZWNlaXZlciIsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoidWludDY0Iiwic3RydWN0IjpudWxsLCJuYW1lIjoiYW1vdW50IiwiZGVzYyI6IkFtb3V0IHRvIHNlbmQiLCJkZWZhdWx0VmFsdWUiOm51bGx9XSwicmV0dXJucyI6eyJ0eXBlIjoiYnl0ZVtdIiwic3RydWN0IjpudWxsLCJkZXNjIjpudWxsfSwiYWN0aW9ucyI6eyJjcmVhdGUiOltdLCJjYWxsIjpbIk5vT3AiXX0sInJlYWRvbmx5IjpmYWxzZSwiZXZlbnRzIjpbXSwicmVjb21tZW5kYXRpb25zIjp7ImlubmVyVHJhbnNhY3Rpb25Db3VudCI6bnVsbCwiYm94ZXMiOm51bGwsImFjY291bnRzIjpudWxsLCJhcHBzIjpudWxsLCJhc3NldHMiOm51bGx9fSx7Im5hbWUiOiJzZW5kT25saW5lS2V5UmVnaXN0cmF0aW9uIiwiZGVzYyI6IlVwZGF0ZXIgY2FuIHBlcmZvbSBrZXkgcmVnaXN0cmF0aW9uIGZvciB0aGlzIExQIHBvb2wiLCJhcmdzIjpbeyJ0eXBlIjoiYnl0ZVtdIiwic3RydWN0IjpudWxsLCJuYW1lIjoidm90ZUtleSIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH0seyJ0eXBlIjoiYnl0ZVtdIiwic3RydWN0IjpudWxsLCJuYW1lIjoic2VsZWN0aW9uS2V5IiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJieXRlW10iLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJzdGF0ZVByb29mS2V5IiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ2b3RlRmlyc3QiLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6InVpbnQ2NCIsInN0cnVjdCI6bnVsbCwibmFtZSI6InZvdGVMYXN0IiwiZGVzYyI6bnVsbCwiZGVmYXVsdFZhbHVlIjpudWxsfSx7InR5cGUiOiJ1aW50NjQiLCJzdHJ1Y3QiOm51bGwsIm5hbWUiOiJ2b3RlS2V5RGlsdXRpb24iLCJkZXNjIjpudWxsLCJkZWZhdWx0VmFsdWUiOm51bGx9LHsidHlwZSI6InVpbnQ2NCIsInN0cnVjdCI6bnVsbCwibmFtZSI6ImZlZSIsImRlc2MiOm51bGwsImRlZmF1bHRWYWx1ZSI6bnVsbH1dLCJyZXR1cm5zIjp7InR5cGUiOiJieXRlW10iLCJzdHJ1Y3QiOm51bGwsImRlc2MiOm51bGx9LCJhY3Rpb25zIjp7ImNyZWF0ZSI6W10sImNhbGwiOlsiTm9PcCJdfSwicmVhZG9ubHkiOmZhbHNlLCJldmVudHMiOltdLCJyZWNvbW1lbmRhdGlvbnMiOnsiaW5uZXJUcmFuc2FjdGlvbkNvdW50IjpudWxsLCJib3hlcyI6bnVsbCwiYWNjb3VudHMiOm51bGwsImFwcHMiOm51bGwsImFzc2V0cyI6bnVsbH19XSwic3RhdGUiOnsic2NoZW1hIjp7Imdsb2JhbCI6eyJpbnRzIjoyLCJieXRlcyI6M30sImxvY2FsIjp7ImludHMiOjAsImJ5dGVzIjowfX0sImtleXMiOnsiZ2xvYmFsIjp7ImRlc2MiOm51bGwsImtleVR5cGUiOiIiLCJ2YWx1ZVR5cGUiOiIiLCJrZXkiOiIifSwibG9jYWwiOnsiZGVzYyI6bnVsbCwia2V5VHlwZSI6IiIsInZhbHVlVHlwZSI6IiIsImtleSI6IiJ9LCJib3giOnsiZGVzYyI6bnVsbCwia2V5VHlwZSI6IiIsInZhbHVlVHlwZSI6IiIsImtleSI6IiJ9fSwibWFwcyI6eyJnbG9iYWwiOnsiZGVzYyI6bnVsbCwia2V5VHlwZSI6IiIsInZhbHVlVHlwZSI6IiIsInByZWZpeCI6bnVsbH0sImxvY2FsIjp7ImRlc2MiOm51bGwsImtleVR5cGUiOiIiLCJ2YWx1ZVR5cGUiOiIiLCJwcmVmaXgiOm51bGx9LCJib3giOnsiZGVzYyI6bnVsbCwia2V5VHlwZSI6IiIsInZhbHVlVHlwZSI6IiIsInByZWZpeCI6bnVsbH19fSwiYmFyZUFjdGlvbnMiOnsiY3JlYXRlIjpbIk5vT3AiXSwiY2FsbCI6W119LCJzb3VyY2VJbmZvIjp7ImFwcHJvdmFsIjp7InNvdXJjZUluZm8iOlt7InBjIjpbNTQ5LDU2Miw1ODIsNjU0LDY2NCw2NzgsNzY0LDc3NCw4MTMsODUxLDg2Nyw5MDQsOTIzXSwiZXJyb3JNZXNzYWdlIjoiQm94IG11c3QgaGF2ZSB2YWx1ZSIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzYwMF0sImVycm9yTWVzc2FnZSI6IkNvbmZpZ3VyYXRpb24gbXVzdCBiZSBkZWZpbmVkIiwidGVhbCI6bnVsbCwic291cmNlIjpudWxsfSx7InBjIjpbODEwXSwiZXJyb3JNZXNzYWdlIjoiRnVuZGVyIGJveCBkb2VzIG5vdCBleGlzdHMiLCJ0ZWFsIjpudWxsLCJzb3VyY2UiOm51bGx9LHsicGMiOls4MjNdLCJlcnJvck1lc3NhZ2UiOiJGdW5kZXIgaXMgb3V0IG9mIHRoZSBkZXBvc2l0IiwidGVhbCI6bnVsbCwic291cmNlIjpudWxsfSx7InBjIjpbNzYxXSwiZXJyb3JNZXNzYWdlIjoiRnVuZGVyIG11c3Qgc2V0IGNvbmZpZ3VyYXRpb24gZmlyc3QiLCJ0ZWFsIjpudWxsLCJzb3VyY2UiOm51bGx9LHsicGMiOls1NTBdLCJlcnJvck1lc3NhZ2UiOiJJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcyIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzYwOF0sImVycm9yTWVzc2FnZSI6IkludmFsaWQgY29uZmlndXJhdGlvbiBwcm92aWRlZCIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzE3OSwyMzcsMjY3LDMwNywzMjksMzU0LDM3Myw0MDAsNDE5LDQzNl0sImVycm9yTWVzc2FnZSI6Ik9uQ29tcGxldGlvbiBpcyBub3QgTm9PcCIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzQ1M10sImVycm9yTWVzc2FnZSI6Ik9uQ29tcGxldGlvbiBpcyBub3QgVXBkYXRlQXBwbGljYXRpb24iLCJ0ZWFsIjpudWxsLCJzb3VyY2UiOm51bGx9LHsicGMiOls1MDBdLCJlcnJvck1lc3NhZ2UiOiJPbmx5IGFkZHJlc3NVZHBhdGVyIHNldHVwIGluIHRoZSBjb25maWcgY2FuIHVwZGF0ZSBhcHBsaWNhdGlvbiIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzgwMV0sImVycm9yTWVzc2FnZSI6Ik9ubHkgZXhlY3V0b3IgY2FuIHVzZSB0aGlzIG1ldGhvZCIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzUxOCw1MzVdLCJlcnJvck1lc3NhZ2UiOiJPbmx5IHVwZGF0ZXIgY2FuIGNoYW5nZSBhZGRyZXNzRXhlY3V0aXZlIiwidGVhbCI6bnVsbCwic291cmNlIjpudWxsfSx7InBjIjpbOTc5LDEwNTldLCJlcnJvck1lc3NhZ2UiOiJPbmx5IHVwZGF0ZXIgY2FuIHVzZSB0aGlzIG1ldGhvZCIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzY0MSw3NTJdLCJlcnJvck1lc3NhZ2UiOiJSZWNlaXZlciBtdXN0IGJlIHRoZSBnYXMgc3RhdGlvbiBhcHAiLCJ0ZWFsIjpudWxsLCJzb3VyY2UiOm51bGx9LHsicGMiOls1OTIsNzIwLDc5Miw4ODgsMTA1MV0sImVycm9yTWVzc2FnZSI6IlRoZSBzbWFydCBjb250cmFjdCBpcyBzdXNwZW5kZWQgYXQgdGhlIG1vbWVudCIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzkxNF0sImVycm9yTWVzc2FnZSI6IlRoZSB3aXRoZHJhd2FsIGFtb3VudCBjYW5ub3QgYmUgbWF4aW11bSB5b3VyIGRlcG9zaXQiLCJ0ZWFsIjpudWxsLCJzb3VyY2UiOm51bGx9LHsicGMiOls5OThdLCJlcnJvck1lc3NhZ2UiOiJXaXRoZHJhd2FsIGFtb3VudCBjYW5ub3QgYmUgaGlnaGVyIHRoZW4gY29sbGVjdGVkIGZlZXMiLCJ0ZWFsIjpudWxsLCJzb3VyY2UiOm51bGx9LHsicGMiOls5ODRdLCJlcnJvck1lc3NhZ2UiOiJhY2NvdW50IGZ1bmRlZCIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzQ4N10sImVycm9yTWVzc2FnZSI6ImNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZyIsInRlYWwiOm51bGwsInNvdXJjZSI6bnVsbH0seyJwYyI6WzE4MiwyNDAsMjcwLDMxMCwzMzIsMzU3LDM3Niw0MDMsNDIyLDQzOSw0NTZdLCJlcnJvck1lc3NhZ2UiOiJjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nIiwidGVhbCI6bnVsbCwic291cmNlIjpudWxsfSx7InBjIjpbNDk2LDUxNCw1MzEsNTkwLDYyOCw3MTgsNzM3LDc5MCw3OTcsODg2LDk3NSw5ODksMTA0OSwxMDU1XSwiZXJyb3JNZXNzYWdlIjoiY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzIiwidGVhbCI6bnVsbCwic291cmNlIjpudWxsfSx7InBjIjpbMzIwLDM0Ml0sImVycm9yTWVzc2FnZSI6InRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5IiwidGVhbCI6bnVsbCwic291cmNlIjpudWxsfV0sInBjT2Zmc2V0TWV0aG9kIjoibm9uZSJ9LCJjbGVhciI6eyJzb3VyY2VJbmZvIjpbXSwicGNPZmZzZXRNZXRob2QiOiJub25lIn19LCJzb3VyY2UiOnsiYXBwcm92YWwiOiJJM0J5WVdkdFlTQjJaWEp6YVc5dUlERXdDaU53Y21GbmJXRWdkSGx3WlhSeVlXTnJJR1poYkhObENnb3ZMeUJBWVd4bmIzSmhibVJtYjNWdVpHRjBhVzl1TDJGc1oyOXlZVzVrTFhSNWNHVnpZM0pwY0hRdllYSmpOQzlwYm1SbGVDNWtMblJ6T2pwRGIyNTBjbUZqZEM1aGNIQnliM1poYkZCeWIyZHlZVzBvS1NBdFBpQjFhVzUwTmpRNkNtMWhhVzQ2Q2lBZ0lDQnBiblJqWW14dlkyc2dNQ0F4SURnZ01qQUtJQ0FnSUdKNWRHVmpZbXh2WTJzZ0luTWlJREI0TVRVeFpqZGpOelVnSW1NaUlDSjFJaUFpWVd4c1JHVndiM05wZEhNaUlDSmxJaUFpYzJOMlpYSWlDaUFnSUNCMGVHNGdRWEJ3YkdsallYUnBiMjVKUkFvZ0lDQWdZbTU2SUcxaGFXNWZZV1owWlhKZmFXWmZaV3h6WlVBeUNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pvek1Rb2dJQ0FnTHk4Z1lXUmtjbVZ6YzFWa2NHRjBaWElnUFNCSGJHOWlZV3hUZEdGMFpUeEJaR1J5WlhOelBpaDdJR3RsZVRvZ0ozVW5JSDBwQ2lBZ0lDQmllWFJsWTE4eklDOHZJQ0oxSWdvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TlRFS0lDQWdJQzh2SUhSb2FYTXVZV1JrY21WemMxVmtjR0YwWlhJdWRtRnNkV1VnUFNCdVpYY2dRV1JrY21WemN5aFVlRzR1YzJWdVpHVnlLUW9nSUNBZ2RIaHVJRk5sYm1SbGNnb2dJQ0FnWVhCd1gyZHNiMkpoYkY5d2RYUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qTTVDaUFnSUNBdkx5QjJaWEp6YVc5dUlEMGdSMnh2WW1Gc1UzUmhkR1U4YzNSeWFXNW5QaWg3SUd0bGVUb2dKM05qZG1WeUp5QjlLUW9nSUNBZ1lubDBaV01nTmlBdkx5QWljMk4yWlhJaUNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU1nb2dJQ0FnTHk4Z1kyOXVjM1FnZG1WeWMybHZiaUE5SUNkQ1NVRlVSVU10UjBGVExUQXhMVEF4TFRBeEp3b2dJQ0FnY0hWemFHSjVkR1Z6SUNKQ1NVRlVSVU10UjBGVExUQXhMVEF4TFRBeElnb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk5USUtJQ0FnSUM4dklIUm9hWE11ZG1WeWMybHZiaTUyWVd4MVpTQTlJSFpsY25OcGIyNEtJQ0FnSUdGd2NGOW5iRzlpWVd4ZmNIVjBDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3pOUW9nSUNBZ0x5OGdZV1JrY21WemMwVjRaV04xZEdsMlpTQTlJRWRzYjJKaGJGTjBZWFJsUEVGa1pISmxjM00rS0hzZ2EyVjVPaUFuWlNjZ2ZTa0tJQ0FnSUdKNWRHVmpJRFVnTHk4Z0ltVWlDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6bzFNd29nSUNBZ0x5OGdkR2hwY3k1aFpHUnlaWE56UlhobFkzVjBhWFpsTG5aaGJIVmxJRDBnYm1WM0lFRmtaSEpsYzNNb1ZIaHVMbk5sYm1SbGNpa0tJQ0FnSUhSNGJpQlRaVzVrWlhJS0lDQWdJR0Z3Y0Y5bmJHOWlZV3hmY0hWMENpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pvME5Rb2dJQ0FnTHk4Z2MzVnpjR1Z1WkdWa0lEMGdSMnh2WW1Gc1UzUmhkR1U4WW05dmJHVmhiajRvZXlCclpYazZJQ2R6SnlCOUtRb2dJQ0FnWW5sMFpXTmZNQ0F2THlBaWN5SUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qVTBDaUFnSUNBdkx5QjBhR2x6TG5OMWMzQmxibVJsWkM1MllXeDFaU0E5SUdaaGJITmxDaUFnSUNCcGJuUmpYekFnTHk4Z01Bb2dJQ0FnWVhCd1gyZHNiMkpoYkY5d2RYUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSTJDaUFnSUNBdkx5QndkV0pzYVdNZ1lXeHNSR1Z3YjNOcGRITWdQU0JIYkc5aVlXeFRkR0YwWlR4MWFXNTBOalErS0NrZ0x5OGdaR2xtWm1WeVpXNWpaU0JpWlhSM1pXVnVJSFJvYVhNZ2RtRnNkV1VnWVc1a0lISmxZV3dnZG1Gc2RXVWdhWE1nZEdobElIQnliM1J2WTI5c0lHWmxaU0JoWTJOMWJYVnNZWFJwYjI0S0lDQWdJR0o1ZEdWaklEUWdMeThnSW1Gc2JFUmxjRzl6YVhSeklnb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk5UVUtJQ0FnSUM4dklIUm9hWE11WVd4c1JHVndiM05wZEhNdWRtRnNkV1VnUFNBd0NpQWdJQ0JwYm5Salh6QWdMeThnTUFvZ0lDQWdZWEJ3WDJkc2IySmhiRjl3ZFhRS0NtMWhhVzVmWVdaMFpYSmZhV1pmWld4elpVQXlPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNalFLSUNBZ0lDOHZJR1Y0Y0c5eWRDQmpiR0Z6Y3lCSFlYTlRkR0YwYVc5dUlHVjRkR1Z1WkhNZ1EyOXVkSEpoWTNRZ2V3b2dJQ0FnZEhodUlFNTFiVUZ3Y0VGeVozTUtJQ0FnSUdKNklHMWhhVzVmWW1GeVpWOXliM1YwYVc1blFERTRDaUFnSUNCd2RYTm9ZbmwwWlhOeklEQjROekJoTmpWbE9Ea2dNSGc0WWpFNE4ySXpaQ0F3ZUdVNVlUTmtObUU0SURCNE1EQTVObVkxTTJJZ01IaGtOakF5TWpZd1ppQXdlRFJoTVdSak5XVTRJREI0TmpjNU1tUmtNalVnTUhnek5qSTFaVFJsWWlBd2VERTNZak5oWkRkaElEQjRPR1F6T1dGallqRWdNSGhqTmpGa05UWm1OU0F2THlCdFpYUm9iMlFnSW5Wd1pHRjBaVUZ3Y0d4cFkyRjBhVzl1S0hOMGNtbHVaeWxpYjI5c0lpd2diV1YwYUc5a0lDSnpaWFJCWkdSeVpYTnpSWGhsWTNWMGFYWmxLR0ZrWkhKbGMzTXBkbTlwWkNJc0lHMWxkR2h2WkNBaWMyVjBVM1Z6Y0dWdVpHVmtLR0p2YjJ3cGRtOXBaQ0lzSUcxbGRHaHZaQ0FpWjJWMFJuVnVaR1Z5UW1Gc1lXNWpaU2hoWkdSeVpYTnpLWFZwYm5RMk5DSXNJRzFsZEdodlpDQWlaMlYwUm5WdVpHVnlRMjl1Wm1sbmRYSmhkR2x2YmloaFpHUnlaWE56S1hOMGNtbHVaeUlzSUcxbGRHaHZaQ0FpWjJWMFJuVnVaR1Z5UW05NEtHRmtaSEpsYzNNcEtIVnBiblEyTkN4emRISnBibWNwSWl3Z2JXVjBhRzlrSUNKa1pYQnZjMmwwVjJsMGFFTnZibVpwWjNWeVlYUnBiMjRvY0dGNUxITjBjbWx1WnlsMmIybGtJaXdnYldWMGFHOWtJQ0prWlhCdmMybDBLSEJoZVNsMmIybGtJaXdnYldWMGFHOWtJQ0ptZFc1a1FXTmpiM1Z1ZENoMWFXNTBOalFzWVdSa2NtVnpjeXh6ZEhKcGJtY3NZV1JrY21WemN5bGllWFJsVzEwaUxDQnRaWFJvYjJRZ0luZHBkR2hrY21GM0tHRmtaSEpsYzNNc2RXbHVkRFkwS1dKNWRHVmJYU0lzSUcxbGRHaHZaQ0FpYzJWdVpFOXViR2x1WlV0bGVWSmxaMmx6ZEhKaGRHbHZiaWhpZVhSbFcxMHNZbmwwWlZ0ZExHSjVkR1ZiWFN4MWFXNTBOalFzZFdsdWREWTBMSFZwYm5RMk5DeDFhVzUwTmpRcFlubDBaVnRkSWdvZ0lDQWdkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTUFvZ0lDQWdiV0YwWTJnZ2JXRnBibDkxY0dSaGRHVkJjSEJzYVdOaGRHbHZibDl5YjNWMFpVQTFJRzFoYVc1ZmMyVjBRV1JrY21WemMwVjRaV04xZEdsMlpWOXliM1YwWlVBMklHMWhhVzVmYzJWMFUzVnpjR1Z1WkdWa1gzSnZkWFJsUURjZ2JXRnBibDluWlhSR2RXNWtaWEpDWVd4aGJtTmxYM0p2ZFhSbFFEZ2diV0ZwYmw5blpYUkdkVzVrWlhKRGIyNW1hV2QxY21GMGFXOXVYM0p2ZFhSbFFEa2diV0ZwYmw5blpYUkdkVzVrWlhKQ2IzaGZjbTkxZEdWQU1UQWdiV0ZwYmw5a1pYQnZjMmwwVjJsMGFFTnZibVpwWjNWeVlYUnBiMjVmY205MWRHVkFNVEVnYldGcGJsOWtaWEJ2YzJsMFgzSnZkWFJsUURFeUlHMWhhVzVmWm5WdVpFRmpZMjkxYm5SZmNtOTFkR1ZBTVRNZ2JXRnBibDkzYVhSb1pISmhkMTl5YjNWMFpVQXhOQ0J0WVdsdVgzTmxibVJQYm14cGJtVkxaWGxTWldkcGMzUnlZWFJwYjI1ZmNtOTFkR1ZBTVRVS0NtMWhhVzVmWVdaMFpYSmZhV1pmWld4elpVQXlNam9LSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakkwQ2lBZ0lDQXZMeUJsZUhCdmNuUWdZMnhoYzNNZ1IyRnpVM1JoZEdsdmJpQmxlSFJsYm1SeklFTnZiblJ5WVdOMElIc0tJQ0FnSUdsdWRHTmZNQ0F2THlBd0NpQWdJQ0J5WlhSMWNtNEtDbTFoYVc1ZmMyVnVaRTl1YkdsdVpVdGxlVkpsWjJsemRISmhkR2x2Ymw5eWIzVjBaVUF4TlRvS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJMU53b2dJQ0FnTHk4Z1FHRnlZelF1WVdKcGJXVjBhRzlrS0NrS0lDQWdJSFI0YmlCUGJrTnZiWEJzWlhScGIyNEtJQ0FnSUNFS0lDQWdJR0Z6YzJWeWRDQXZMeUJQYmtOdmJYQnNaWFJwYjI0Z2FYTWdibTkwSUU1dlQzQUtJQ0FnSUhSNGJpQkJjSEJzYVdOaGRHbHZia2xFQ2lBZ0lDQmhjM05sY25RZ0x5OGdZMkZ1SUc5dWJIa2dZMkZzYkNCM2FHVnVJRzV2ZENCamNtVmhkR2x1WndvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpRS0lDQWdJQzh2SUdWNGNHOXlkQ0JqYkdGemN5QkhZWE5UZEdGMGFXOXVJR1Y0ZEdWdVpITWdRMjl1ZEhKaFkzUWdld29nSUNBZ2RIaHVZU0JCY0hCc2FXTmhkR2x2YmtGeVozTWdNUW9nSUNBZ1pYaDBjbUZqZENBeUlEQUtJQ0FnSUhSNGJtRWdRWEJ3YkdsallYUnBiMjVCY21keklESUtJQ0FnSUdWNGRISmhZM1FnTWlBd0NpQWdJQ0IwZUc1aElFRndjR3hwWTJGMGFXOXVRWEpuY3lBekNpQWdJQ0JsZUhSeVlXTjBJRElnTUFvZ0lDQWdkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTkFvZ0lDQWdZblJ2YVFvZ0lDQWdkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTlFvZ0lDQWdZblJ2YVFvZ0lDQWdkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTmdvZ0lDQWdZblJ2YVFvZ0lDQWdkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTndvZ0lDQWdZblJ2YVFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpVM0NpQWdJQ0F2THlCQVlYSmpOQzVoWW1sdFpYUm9iMlFvS1FvZ0lDQWdZMkZzYkhOMVlpQnpaVzVrVDI1c2FXNWxTMlY1VW1WbmFYTjBjbUYwYVc5dUNpQWdJQ0JrZFhBS0lDQWdJR3hsYmdvZ0lDQWdhWFJ2WWdvZ0lDQWdaWGgwY21GamRDQTJJRElLSUNBZ0lITjNZWEFLSUNBZ0lHTnZibU5oZEFvZ0lDQWdZbmwwWldOZk1TQXZMeUF3ZURFMU1XWTNZemMxQ2lBZ0lDQnpkMkZ3Q2lBZ0lDQmpiMjVqWVhRS0lDQWdJR3h2WndvZ0lDQWdhVzUwWTE4eElDOHZJREVLSUNBZ0lISmxkSFZ5YmdvS2JXRnBibDkzYVhSb1pISmhkMTl5YjNWMFpVQXhORG9LSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakl4T0FvZ0lDQWdMeThnUUdGeVl6UXVZV0pwYldWMGFHOWtLQ2tLSUNBZ0lIUjRiaUJQYmtOdmJYQnNaWFJwYjI0S0lDQWdJQ0VLSUNBZ0lHRnpjMlZ5ZENBdkx5QlBia052YlhCc1pYUnBiMjRnYVhNZ2JtOTBJRTV2VDNBS0lDQWdJSFI0YmlCQmNIQnNhV05oZEdsdmJrbEVDaUFnSUNCaGMzTmxjblFnTHk4Z1kyRnVJRzl1YkhrZ1kyRnNiQ0IzYUdWdUlHNXZkQ0JqY21WaGRHbHVad29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNalFLSUNBZ0lDOHZJR1Y0Y0c5eWRDQmpiR0Z6Y3lCSFlYTlRkR0YwYVc5dUlHVjRkR1Z1WkhNZ1EyOXVkSEpoWTNRZ2V3b2dJQ0FnZEhodVlTQkJjSEJzYVdOaGRHbHZia0Z5WjNNZ01Rb2dJQ0FnZEhodVlTQkJjSEJzYVdOaGRHbHZia0Z5WjNNZ01nb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qRTRDaUFnSUNBdkx5QkFZWEpqTkM1aFltbHRaWFJvYjJRb0tRb2dJQ0FnWTJGc2JITjFZaUIzYVhSb1pISmhkd29nSUNBZ1pIVndDaUFnSUNCc1pXNEtJQ0FnSUdsMGIySUtJQ0FnSUdWNGRISmhZM1FnTmlBeUNpQWdJQ0J6ZDJGd0NpQWdJQ0JqYjI1allYUUtJQ0FnSUdKNWRHVmpYekVnTHk4Z01IZ3hOVEZtTjJNM05Rb2dJQ0FnYzNkaGNBb2dJQ0FnWTI5dVkyRjBDaUFnSUNCc2IyY0tJQ0FnSUdsdWRHTmZNU0F2THlBeENpQWdJQ0J5WlhSMWNtNEtDbTFoYVc1ZlpuVnVaRUZqWTI5MWJuUmZjbTkxZEdWQU1UTTZDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3hPRE1LSUNBZ0lDOHZJRUJoY21NMExtRmlhVzFsZEdodlpDZ3BDaUFnSUNCMGVHNGdUMjVEYjIxd2JHVjBhVzl1Q2lBZ0lDQWhDaUFnSUNCaGMzTmxjblFnTHk4Z1QyNURiMjF3YkdWMGFXOXVJR2x6SUc1dmRDQk9iMDl3Q2lBZ0lDQjBlRzRnUVhCd2JHbGpZWFJwYjI1SlJBb2dJQ0FnWVhOelpYSjBJQzh2SUdOaGJpQnZibXg1SUdOaGJHd2dkMmhsYmlCdWIzUWdZM0psWVhScGJtY0tJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSTBDaUFnSUNBdkx5QmxlSEJ2Y25RZ1kyeGhjM01nUjJGelUzUmhkR2x2YmlCbGVIUmxibVJ6SUVOdmJuUnlZV04wSUhzS0lDQWdJSFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURFS0lDQWdJR0owYjJrS0lDQWdJSFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURJS0lDQWdJSFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURNS0lDQWdJR1Y0ZEhKaFkzUWdNaUF3Q2lBZ0lDQjBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUEwQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem94T0RNS0lDQWdJQzh2SUVCaGNtTTBMbUZpYVcxbGRHaHZaQ2dwQ2lBZ0lDQmpZV3hzYzNWaUlHWjFibVJCWTJOdmRXNTBDaUFnSUNCa2RYQUtJQ0FnSUd4bGJnb2dJQ0FnYVhSdllnb2dJQ0FnWlhoMGNtRmpkQ0EySURJS0lDQWdJSE4zWVhBS0lDQWdJR052Ym1OaGRBb2dJQ0FnWW5sMFpXTmZNU0F2THlBd2VERTFNV1kzWXpjMUNpQWdJQ0J6ZDJGd0NpQWdJQ0JqYjI1allYUUtJQ0FnSUd4dlp3b2dJQ0FnYVc1MFkxOHhJQzh2SURFS0lDQWdJSEpsZEhWeWJnb0tiV0ZwYmw5a1pYQnZjMmwwWDNKdmRYUmxRREV5T2dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRVNUNpQWdJQ0F2THlCQVlYSmpOQzVoWW1sdFpYUm9iMlFvS1FvZ0lDQWdkSGh1SUU5dVEyOXRjR3hsZEdsdmJnb2dJQ0FnSVFvZ0lDQWdZWE56WlhKMElDOHZJRTl1UTI5dGNHeGxkR2x2YmlCcGN5QnViM1FnVG05UGNBb2dJQ0FnZEhodUlFRndjR3hwWTJGMGFXOXVTVVFLSUNBZ0lHRnpjMlZ5ZENBdkx5QmpZVzRnYjI1c2VTQmpZV3hzSUhkb1pXNGdibTkwSUdOeVpXRjBhVzVuQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem95TkFvZ0lDQWdMeThnWlhod2IzSjBJR05zWVhOeklFZGhjMU4wWVhScGIyNGdaWGgwWlc1a2N5QkRiMjUwY21GamRDQjdDaUFnSUNCMGVHNGdSM0p2ZFhCSmJtUmxlQW9nSUNBZ2FXNTBZMTh4SUM4dklERUtJQ0FnSUMwS0lDQWdJR1IxY0FvZ0lDQWdaM1I0Ym5NZ1ZIbHdaVVZ1ZFcwS0lDQWdJR2x1ZEdOZk1TQXZMeUJ3WVhrS0lDQWdJRDA5Q2lBZ0lDQmhjM05sY25RZ0x5OGdkSEpoYm5OaFkzUnBiMjRnZEhsd1pTQnBjeUJ3WVhrS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pFMU9Rb2dJQ0FnTHk4Z1FHRnlZelF1WVdKcGJXVjBhRzlrS0NrS0lDQWdJR05oYkd4emRXSWdaR1Z3YjNOcGRBb2dJQ0FnYVc1MFkxOHhJQzh2SURFS0lDQWdJSEpsZEhWeWJnb0tiV0ZwYmw5a1pYQnZjMmwwVjJsMGFFTnZibVpwWjNWeVlYUnBiMjVmY205MWRHVkFNVEU2Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem94TWpnS0lDQWdJQzh2SUVCaGNtTTBMbUZpYVcxbGRHaHZaQ2dwQ2lBZ0lDQjBlRzRnVDI1RGIyMXdiR1YwYVc5dUNpQWdJQ0FoQ2lBZ0lDQmhjM05sY25RZ0x5OGdUMjVEYjIxd2JHVjBhVzl1SUdseklHNXZkQ0JPYjA5d0NpQWdJQ0IwZUc0Z1FYQndiR2xqWVhScGIyNUpSQW9nSUNBZ1lYTnpaWEowSUM4dklHTmhiaUJ2Ym14NUlHTmhiR3dnZDJobGJpQnViM1FnWTNKbFlYUnBibWNLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakkwQ2lBZ0lDQXZMeUJsZUhCdmNuUWdZMnhoYzNNZ1IyRnpVM1JoZEdsdmJpQmxlSFJsYm1SeklFTnZiblJ5WVdOMElIc0tJQ0FnSUhSNGJpQkhjbTkxY0VsdVpHVjRDaUFnSUNCcGJuUmpYekVnTHk4Z01Rb2dJQ0FnTFFvZ0lDQWdaSFZ3Q2lBZ0lDQm5kSGh1Y3lCVWVYQmxSVzUxYlFvZ0lDQWdhVzUwWTE4eElDOHZJSEJoZVFvZ0lDQWdQVDBLSUNBZ0lHRnpjMlZ5ZENBdkx5QjBjbUZ1YzJGamRHbHZiaUIwZVhCbElHbHpJSEJoZVFvZ0lDQWdkSGh1WVNCQmNIQnNhV05oZEdsdmJrRnlaM01nTVFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRJNENpQWdJQ0F2THlCQVlYSmpOQzVoWW1sdFpYUm9iMlFvS1FvZ0lDQWdZMkZzYkhOMVlpQmtaWEJ2YzJsMFYybDBhRU52Ym1acFozVnlZWFJwYjI0S0lDQWdJR2x1ZEdOZk1TQXZMeUF4Q2lBZ0lDQnlaWFIxY200S0NtMWhhVzVmWjJWMFJuVnVaR1Z5UW05NFgzSnZkWFJsUURFd09nb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1URTJDaUFnSUNBdkx5QkFZWEpqTkM1aFltbHRaWFJvYjJRb2V5QnlaV0ZrYjI1c2VUb2dkSEoxWlNCOUtRb2dJQ0FnZEhodUlFOXVRMjl0Y0d4bGRHbHZiZ29nSUNBZ0lRb2dJQ0FnWVhOelpYSjBJQzh2SUU5dVEyOXRjR3hsZEdsdmJpQnBjeUJ1YjNRZ1RtOVBjQW9nSUNBZ2RIaHVJRUZ3Y0d4cFkyRjBhVzl1U1VRS0lDQWdJR0Z6YzJWeWRDQXZMeUJqWVc0Z2IyNXNlU0JqWVd4c0lIZG9aVzRnYm05MElHTnlaV0YwYVc1bkNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5Bb2dJQ0FnTHk4Z1pYaHdiM0owSUdOc1lYTnpJRWRoYzFOMFlYUnBiMjRnWlhoMFpXNWtjeUJEYjI1MGNtRmpkQ0I3Q2lBZ0lDQjBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUF4Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem94TVRZS0lDQWdJQzh2SUVCaGNtTTBMbUZpYVcxbGRHaHZaQ2g3SUhKbFlXUnZibXg1T2lCMGNuVmxJSDBwQ2lBZ0lDQmpZV3hzYzNWaUlHZGxkRVoxYm1SbGNrSnZlQW9nSUNBZ1lubDBaV05mTVNBdkx5QXdlREUxTVdZM1l6YzFDaUFnSUNCemQyRndDaUFnSUNCamIyNWpZWFFLSUNBZ0lHeHZad29nSUNBZ2FXNTBZMTh4SUM4dklERUtJQ0FnSUhKbGRIVnliZ29LYldGcGJsOW5aWFJHZFc1a1pYSkRiMjVtYVdkMWNtRjBhVzl1WDNKdmRYUmxRRGs2Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem94TURZS0lDQWdJQzh2SUVCaGNtTTBMbUZpYVcxbGRHaHZaQ2g3SUhKbFlXUnZibXg1T2lCMGNuVmxJSDBwQ2lBZ0lDQjBlRzRnVDI1RGIyMXdiR1YwYVc5dUNpQWdJQ0FoQ2lBZ0lDQmhjM05sY25RZ0x5OGdUMjVEYjIxd2JHVjBhVzl1SUdseklHNXZkQ0JPYjA5d0NpQWdJQ0IwZUc0Z1FYQndiR2xqWVhScGIyNUpSQW9nSUNBZ1lYTnpaWEowSUM4dklHTmhiaUJ2Ym14NUlHTmhiR3dnZDJobGJpQnViM1FnWTNKbFlYUnBibWNLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakkwQ2lBZ0lDQXZMeUJsZUhCdmNuUWdZMnhoYzNNZ1IyRnpVM1JoZEdsdmJpQmxlSFJsYm1SeklFTnZiblJ5WVdOMElIc0tJQ0FnSUhSNGJtRWdRWEJ3YkdsallYUnBiMjVCY21keklERUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qRXdOZ29nSUNBZ0x5OGdRR0Z5WXpRdVlXSnBiV1YwYUc5a0tIc2djbVZoWkc5dWJIazZJSFJ5ZFdVZ2ZTa0tJQ0FnSUdOaGJHeHpkV0lnWjJWMFJuVnVaR1Z5UTI5dVptbG5kWEpoZEdsdmJnb2dJQ0FnWkhWd0NpQWdJQ0JzWlc0S0lDQWdJR2wwYjJJS0lDQWdJR1Y0ZEhKaFkzUWdOaUF5Q2lBZ0lDQnpkMkZ3Q2lBZ0lDQmpiMjVqWVhRS0lDQWdJR0o1ZEdWalh6RWdMeThnTUhneE5URm1OMk0zTlFvZ0lDQWdjM2RoY0FvZ0lDQWdZMjl1WTJGMENpQWdJQ0JzYjJjS0lDQWdJR2x1ZEdOZk1TQXZMeUF4Q2lBZ0lDQnlaWFIxY200S0NtMWhhVzVmWjJWMFJuVnVaR1Z5UW1Gc1lXNWpaVjl5YjNWMFpVQTRPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZPVGNLSUNBZ0lDOHZJRUJoY21NMExtRmlhVzFsZEdodlpDaDdJSEpsWVdSdmJteDVPaUIwY25WbElIMHBDaUFnSUNCMGVHNGdUMjVEYjIxd2JHVjBhVzl1Q2lBZ0lDQWhDaUFnSUNCaGMzTmxjblFnTHk4Z1QyNURiMjF3YkdWMGFXOXVJR2x6SUc1dmRDQk9iMDl3Q2lBZ0lDQjBlRzRnUVhCd2JHbGpZWFJwYjI1SlJBb2dJQ0FnWVhOelpYSjBJQzh2SUdOaGJpQnZibXg1SUdOaGJHd2dkMmhsYmlCdWIzUWdZM0psWVhScGJtY0tJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSTBDaUFnSUNBdkx5QmxlSEJ2Y25RZ1kyeGhjM01nUjJGelUzUmhkR2x2YmlCbGVIUmxibVJ6SUVOdmJuUnlZV04wSUhzS0lDQWdJSFI0Ym1FZ1FYQndiR2xqWVhScGIyNUJjbWR6SURFS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2prM0NpQWdJQ0F2THlCQVlYSmpOQzVoWW1sdFpYUm9iMlFvZXlCeVpXRmtiMjVzZVRvZ2RISjFaU0I5S1FvZ0lDQWdZMkZzYkhOMVlpQm5aWFJHZFc1a1pYSkNZV3hoYm1ObENpQWdJQ0JpZVhSbFkxOHhJQzh2SURCNE1UVXhaamRqTnpVS0lDQWdJSE4zWVhBS0lDQWdJR052Ym1OaGRBb2dJQ0FnYkc5bkNpQWdJQ0JwYm5Salh6RWdMeThnTVFvZ0lDQWdjbVYwZFhKdUNncHRZV2x1WDNObGRGTjFjM0JsYm1SbFpGOXliM1YwWlVBM09nb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk9EY0tJQ0FnSUM4dklFQmhjbU0wTG1GaWFXMWxkR2h2WkNncENpQWdJQ0IwZUc0Z1QyNURiMjF3YkdWMGFXOXVDaUFnSUNBaENpQWdJQ0JoYzNObGNuUWdMeThnVDI1RGIyMXdiR1YwYVc5dUlHbHpJRzV2ZENCT2IwOXdDaUFnSUNCMGVHNGdRWEJ3YkdsallYUnBiMjVKUkFvZ0lDQWdZWE56WlhKMElDOHZJR05oYmlCdmJteDVJR05oYkd3Z2QyaGxiaUJ1YjNRZ1kzSmxZWFJwYm1jS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJMENpQWdJQ0F2THlCbGVIQnZjblFnWTJ4aGMzTWdSMkZ6VTNSaGRHbHZiaUJsZUhSbGJtUnpJRU52Ym5SeVlXTjBJSHNLSUNBZ0lIUjRibUVnUVhCd2JHbGpZWFJwYjI1QmNtZHpJREVLSUNBZ0lHbHVkR05mTUNBdkx5QXdDaUFnSUNCblpYUmlhWFFLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPamczQ2lBZ0lDQXZMeUJBWVhKak5DNWhZbWx0WlhSb2IyUW9LUW9nSUNBZ1kyRnNiSE4xWWlCelpYUlRkWE53Wlc1a1pXUUtJQ0FnSUdsdWRHTmZNU0F2THlBeENpQWdJQ0J5WlhSMWNtNEtDbTFoYVc1ZmMyVjBRV1JrY21WemMwVjRaV04xZEdsMlpWOXliM1YwWlVBMk9nb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk56WUtJQ0FnSUM4dklFQmhjbU0wTG1GaWFXMWxkR2h2WkNncENpQWdJQ0IwZUc0Z1QyNURiMjF3YkdWMGFXOXVDaUFnSUNBaENpQWdJQ0JoYzNObGNuUWdMeThnVDI1RGIyMXdiR1YwYVc5dUlHbHpJRzV2ZENCT2IwOXdDaUFnSUNCMGVHNGdRWEJ3YkdsallYUnBiMjVKUkFvZ0lDQWdZWE56WlhKMElDOHZJR05oYmlCdmJteDVJR05oYkd3Z2QyaGxiaUJ1YjNRZ1kzSmxZWFJwYm1jS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJMENpQWdJQ0F2THlCbGVIQnZjblFnWTJ4aGMzTWdSMkZ6VTNSaGRHbHZiaUJsZUhSbGJtUnpJRU52Ym5SeVlXTjBJSHNLSUNBZ0lIUjRibUVnUVhCd2JHbGpZWFJwYjI1QmNtZHpJREVLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPamMyQ2lBZ0lDQXZMeUJBWVhKak5DNWhZbWx0WlhSb2IyUW9LUW9nSUNBZ1kyRnNiSE4xWWlCelpYUkJaR1J5WlhOelJYaGxZM1YwYVhabENpQWdJQ0JwYm5Salh6RWdMeThnTVFvZ0lDQWdjbVYwZFhKdUNncHRZV2x1WDNWd1pHRjBaVUZ3Y0d4cFkyRjBhVzl1WDNKdmRYUmxRRFU2Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem8yTVFvZ0lDQWdMeThnUUdGeVl6UXVZV0pwYldWMGFHOWtLSHNnWVd4c2IzZEJZM1JwYjI1ek9pQW5WWEJrWVhSbFFYQndiR2xqWVhScGIyNG5JSDBwQ2lBZ0lDQjBlRzRnVDI1RGIyMXdiR1YwYVc5dUNpQWdJQ0J3ZFhOb2FXNTBJRFFnTHk4Z1ZYQmtZWFJsUVhCd2JHbGpZWFJwYjI0S0lDQWdJRDA5Q2lBZ0lDQmhjM05sY25RZ0x5OGdUMjVEYjIxd2JHVjBhVzl1SUdseklHNXZkQ0JWY0dSaGRHVkJjSEJzYVdOaGRHbHZiZ29nSUNBZ2RIaHVJRUZ3Y0d4cFkyRjBhVzl1U1VRS0lDQWdJR0Z6YzJWeWRDQXZMeUJqWVc0Z2IyNXNlU0JqWVd4c0lIZG9aVzRnYm05MElHTnlaV0YwYVc1bkNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5Bb2dJQ0FnTHk4Z1pYaHdiM0owSUdOc1lYTnpJRWRoYzFOMFlYUnBiMjRnWlhoMFpXNWtjeUJEYjI1MGNtRmpkQ0I3Q2lBZ0lDQjBlRzVoSUVGd2NHeHBZMkYwYVc5dVFYSm5jeUF4Q2lBZ0lDQmxlSFJ5WVdOMElESWdNQW9nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZOakVLSUNBZ0lDOHZJRUJoY21NMExtRmlhVzFsZEdodlpDaDdJR0ZzYkc5M1FXTjBhVzl1Y3pvZ0oxVndaR0YwWlVGd2NHeHBZMkYwYVc5dUp5QjlLUW9nSUNBZ1kyRnNiSE4xWWlCMWNHUmhkR1ZCY0hCc2FXTmhkR2x2YmdvZ0lDQWdjSFZ6YUdKNWRHVnpJREI0TURBS0lDQWdJR2x1ZEdOZk1DQXZMeUF3Q2lBZ0lDQjFibU52ZG1WeUlESUtJQ0FnSUhObGRHSnBkQW9nSUNBZ1lubDBaV05mTVNBdkx5QXdlREUxTVdZM1l6YzFDaUFnSUNCemQyRndDaUFnSUNCamIyNWpZWFFLSUNBZ0lHeHZad29nSUNBZ2FXNTBZMTh4SUM4dklERUtJQ0FnSUhKbGRIVnliZ29LYldGcGJsOWlZWEpsWDNKdmRYUnBibWRBTVRnNkNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5Bb2dJQ0FnTHk4Z1pYaHdiM0owSUdOc1lYTnpJRWRoYzFOMFlYUnBiMjRnWlhoMFpXNWtjeUJEYjI1MGNtRmpkQ0I3Q2lBZ0lDQjBlRzRnVDI1RGIyMXdiR1YwYVc5dUNpQWdJQ0JpYm5vZ2JXRnBibDloWm5SbGNsOXBabDlsYkhObFFESXlDaUFnSUNCMGVHNGdRWEJ3YkdsallYUnBiMjVKUkFvZ0lDQWdJUW9nSUNBZ1lYTnpaWEowSUM4dklHTmhiaUJ2Ym14NUlHTmhiR3dnZDJobGJpQmpjbVZoZEdsdVp3b2dJQ0FnYVc1MFkxOHhJQzh2SURFS0lDQWdJSEpsZEhWeWJnb0tDaTh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pwSFlYTlRkR0YwYVc5dUxuVndaR0YwWlVGd2NHeHBZMkYwYVc5dUtHNWxkMVpsY25OcGIyNDZJR0o1ZEdWektTQXRQaUIxYVc1ME5qUTZDblZ3WkdGMFpVRndjR3hwWTJGMGFXOXVPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZOakV0TmpJS0lDQWdJQzh2SUVCaGNtTTBMbUZpYVcxbGRHaHZaQ2g3SUdGc2JHOTNRV04wYVc5dWN6b2dKMVZ3WkdGMFpVRndjR3hwWTJGMGFXOXVKeUI5S1FvZ0lDQWdMeThnZFhCa1lYUmxRWEJ3YkdsallYUnBiMjRvYm1WM1ZtVnljMmx2YmpvZ2MzUnlhVzVuS1RvZ1ltOXZiR1ZoYmlCN0NpQWdJQ0J3Y205MGJ5QXhJREVLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPak14Q2lBZ0lDQXZMeUJoWkdSeVpYTnpWV1J3WVhSbGNpQTlJRWRzYjJKaGJGTjBZWFJsUEVGa1pISmxjM00rS0hzZ2EyVjVPaUFuZFNjZ2ZTa0tJQ0FnSUdsdWRHTmZNQ0F2THlBd0NpQWdJQ0JpZVhSbFkxOHpJQzh2SUNKMUlnb2dJQ0FnWVhCd1gyZHNiMkpoYkY5blpYUmZaWGdLSUNBZ0lHRnpjMlZ5ZENBdkx5QmphR1ZqYXlCSGJHOWlZV3hUZEdGMFpTQmxlR2x6ZEhNS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pZMENpQWdJQ0F2THlCMGFHbHpMbUZrWkhKbGMzTlZaSEJoZEdWeUxuWmhiSFZsSUQwOVBTQnVaWGNnUVdSa2NtVnpjeWhVZUc0dWMyVnVaR1Z5S1N3S0lDQWdJSFI0YmlCVFpXNWtaWElLSUNBZ0lEMDlDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6bzJNeTAyTmdvZ0lDQWdMeThnWVhOelpYSjBLQW9nSUNBZ0x5OGdJQ0IwYUdsekxtRmtaSEpsYzNOVlpIQmhkR1Z5TG5aaGJIVmxJRDA5UFNCdVpYY2dRV1JrY21WemN5aFVlRzR1YzJWdVpHVnlLU3dLSUNBZ0lDOHZJQ0FnSjA5dWJIa2dZV1JrY21WemMxVmtjR0YwWlhJZ2MyVjBkWEFnYVc0Z2RHaGxJR052Ym1acFp5QmpZVzRnZFhCa1lYUmxJR0Z3Y0d4cFkyRjBhVzl1Snl3S0lDQWdJQzh2SUNrS0lDQWdJR0Z6YzJWeWRDQXZMeUJQYm14NUlHRmtaSEpsYzNOVlpIQmhkR1Z5SUhObGRIVndJR2x1SUhSb1pTQmpiMjVtYVdjZ1kyRnVJSFZ3WkdGMFpTQmhjSEJzYVdOaGRHbHZiZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNemtLSUNBZ0lDOHZJSFpsY25OcGIyNGdQU0JIYkc5aVlXeFRkR0YwWlR4emRISnBibWMrS0hzZ2EyVjVPaUFuYzJOMlpYSW5JSDBwQ2lBZ0lDQmllWFJsWXlBMklDOHZJQ0p6WTNabGNpSUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qWTNDaUFnSUNBdkx5QjBhR2x6TG5abGNuTnBiMjR1ZG1Gc2RXVWdQU0J1WlhkV1pYSnphVzl1Q2lBZ0lDQm1jbUZ0WlY5a2FXY2dMVEVLSUNBZ0lHRndjRjluYkc5aVlXeGZjSFYwQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem8yT0FvZ0lDQWdMeThnY21WMGRYSnVJSFJ5ZFdVS0lDQWdJR2x1ZEdOZk1TQXZMeUF4Q2lBZ0lDQnlaWFJ6ZFdJS0Nnb3ZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem82UjJGelUzUmhkR2x2Ymk1elpYUkJaR1J5WlhOelJYaGxZM1YwYVhabEtHRTZJR0o1ZEdWektTQXRQaUIyYjJsa09ncHpaWFJCWkdSeVpYTnpSWGhsWTNWMGFYWmxPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZOell0TnpjS0lDQWdJQzh2SUVCaGNtTTBMbUZpYVcxbGRHaHZaQ2dwQ2lBZ0lDQXZMeUJ6WlhSQlpHUnlaWE56UlhobFkzVjBhWFpsS0dFNklFRmtaSEpsYzNNcElIc0tJQ0FnSUhCeWIzUnZJREVnTUFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TXpFS0lDQWdJQzh2SUdGa1pISmxjM05WWkhCaGRHVnlJRDBnUjJ4dlltRnNVM1JoZEdVOFFXUmtjbVZ6Y3o0b2V5QnJaWGs2SUNkMUp5QjlLUW9nSUNBZ2FXNTBZMTh3SUM4dklEQUtJQ0FnSUdKNWRHVmpYek1nTHk4Z0luVWlDaUFnSUNCaGNIQmZaMnh2WW1Gc1gyZGxkRjlsZUFvZ0lDQWdZWE56WlhKMElDOHZJR05vWldOcklFZHNiMkpoYkZOMFlYUmxJR1Y0YVhOMGN3b2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk56Z0tJQ0FnSUM4dklHRnpjMlZ5ZENoMGFHbHpMbUZrWkhKbGMzTlZaSEJoZEdWeUxuWmhiSFZsSUQwOVBTQnVaWGNnUVdSa2NtVnpjeWhVZUc0dWMyVnVaR1Z5S1N3Z0owOXViSGtnZFhCa1lYUmxjaUJqWVc0Z1kyaGhibWRsSUdGa1pISmxjM05GZUdWamRYUnBkbVVuS1FvZ0lDQWdkSGh1SUZObGJtUmxjZ29nSUNBZ1BUMEtJQ0FnSUdGemMyVnlkQ0F2THlCUGJteDVJSFZ3WkdGMFpYSWdZMkZ1SUdOb1lXNW5aU0JoWkdSeVpYTnpSWGhsWTNWMGFYWmxDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3pOUW9nSUNBZ0x5OGdZV1JrY21WemMwVjRaV04xZEdsMlpTQTlJRWRzYjJKaGJGTjBZWFJsUEVGa1pISmxjM00rS0hzZ2EyVjVPaUFuWlNjZ2ZTa0tJQ0FnSUdKNWRHVmpJRFVnTHk4Z0ltVWlDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6bzNPUW9nSUNBZ0x5OGdkR2hwY3k1aFpHUnlaWE56UlhobFkzVjBhWFpsTG5aaGJIVmxJRDBnWVFvZ0lDQWdabkpoYldWZlpHbG5JQzB4Q2lBZ0lDQmhjSEJmWjJ4dlltRnNYM0IxZEFvZ0lDQWdjbVYwYzNWaUNnb0tMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02T2tkaGMxTjBZWFJwYjI0dWMyVjBVM1Z6Y0dWdVpHVmtLR2x6VTNWemNHVnVaR1ZrT2lCMWFXNTBOalFwSUMwK0lIWnZhV1E2Q25ObGRGTjFjM0JsYm1SbFpEb0tJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qZzNMVGc0Q2lBZ0lDQXZMeUJBWVhKak5DNWhZbWx0WlhSb2IyUW9LUW9nSUNBZ0x5OGdjMlYwVTNWemNHVnVaR1ZrS0dselUzVnpjR1Z1WkdWa09pQmliMjlzWldGdUtTQjdDaUFnSUNCd2NtOTBieUF4SURBS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pNeENpQWdJQ0F2THlCaFpHUnlaWE56VldSd1lYUmxjaUE5SUVkc2IySmhiRk4wWVhSbFBFRmtaSEpsYzNNK0tIc2dhMlY1T2lBbmRTY2dmU2tLSUNBZ0lHbHVkR05mTUNBdkx5QXdDaUFnSUNCaWVYUmxZMTh6SUM4dklDSjFJZ29nSUNBZ1lYQndYMmRzYjJKaGJGOW5aWFJmWlhnS0lDQWdJR0Z6YzJWeWRDQXZMeUJqYUdWamF5QkhiRzlpWVd4VGRHRjBaU0JsZUdsemRITUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qZzVDaUFnSUNBdkx5QmhjM05sY25Rb2RHaHBjeTVoWkdSeVpYTnpWV1J3WVhSbGNpNTJZV3gxWlNBOVBUMGdibVYzSUVGa1pISmxjM01vVkhodUxuTmxibVJsY2lrc0lDZFBibXg1SUhWd1pHRjBaWElnWTJGdUlHTm9ZVzVuWlNCaFpHUnlaWE56UlhobFkzVjBhWFpsSnlrS0lDQWdJSFI0YmlCVFpXNWtaWElLSUNBZ0lEMDlDaUFnSUNCaGMzTmxjblFnTHk4Z1QyNXNlU0IxY0dSaGRHVnlJR05oYmlCamFHRnVaMlVnWVdSa2NtVnpjMFY0WldOMWRHbDJaUW9nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZORFVLSUNBZ0lDOHZJSE4xYzNCbGJtUmxaQ0E5SUVkc2IySmhiRk4wWVhSbFBHSnZiMnhsWVc0K0tIc2dhMlY1T2lBbmN5Y2dmU2tLSUNBZ0lHSjVkR1ZqWHpBZ0x5OGdJbk1pQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem81TUFvZ0lDQWdMeThnZEdocGN5NXpkWE53Wlc1a1pXUXVkbUZzZFdVZ1BTQnBjMU4xYzNCbGJtUmxaQW9nSUNBZ1puSmhiV1ZmWkdsbklDMHhDaUFnSUNCaGNIQmZaMnh2WW1Gc1gzQjFkQW9nSUNBZ2NtVjBjM1ZpQ2dvS0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZPa2RoYzFOMFlYUnBiMjR1WjJWMFJuVnVaR1Z5UW1Gc1lXNWpaU2htZFc1a1pYSTZJR0o1ZEdWektTQXRQaUJpZVhSbGN6b0taMlYwUm5WdVpHVnlRbUZzWVc1alpUb0tJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qazNMVGs0Q2lBZ0lDQXZMeUJBWVhKak5DNWhZbWx0WlhSb2IyUW9leUJ5WldGa2IyNXNlVG9nZEhKMVpTQjlLUW9nSUNBZ0x5OGdaMlYwUm5WdVpHVnlRbUZzWVc1alpTaG1kVzVrWlhJNklFRmtaSEpsYzNNcE9pQlZhVzUwVGpZMElIc0tJQ0FnSUhCeWIzUnZJREVnTVFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpVS0lDQWdJQzh2SUhCMVlteHBZeUJqYjI1bWFXZDFjbUYwYVc5dUlEMGdRbTk0VFdGd1BFRmtaSEpsYzNNc0lGVnpaWEpUZEhKMVkzUStLSHNnYTJWNVVISmxabWw0T2lBbll5Y2dmU2tLSUNBZ0lHSjVkR1ZqWHpJZ0x5OGdJbU1pQ2lBZ0lDQm1jbUZ0WlY5a2FXY2dMVEVLSUNBZ0lHTnZibU5oZEFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02T1RrS0lDQWdJQzh2SUhKbGRIVnliaUIwYUdsekxtTnZibVpwWjNWeVlYUnBiMjRvWm5WdVpHVnlLUzUyWVd4MVpTNWlZV3hoYm1ObENpQWdJQ0JpYjNoZloyVjBDaUFnSUNCaGMzTmxjblFnTHk4Z1FtOTRJRzExYzNRZ2FHRjJaU0IyWVd4MVpRb2dJQ0FnWlhoMGNtRmpkQ0F3SURnZ0x5OGdiMjRnWlhKeWIzSTZJRWx1WkdWNElHRmpZMlZ6Y3lCcGN5QnZkWFFnYjJZZ1ltOTFibVJ6Q2lBZ0lDQnlaWFJ6ZFdJS0Nnb3ZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem82UjJGelUzUmhkR2x2Ymk1blpYUkdkVzVrWlhKRGIyNW1hV2QxY21GMGFXOXVLR1oxYm1SbGNqb2dZbmwwWlhNcElDMCtJR0o1ZEdWek9ncG5aWFJHZFc1a1pYSkRiMjVtYVdkMWNtRjBhVzl1T2dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRBMkxURXdOd29nSUNBZ0x5OGdRR0Z5WXpRdVlXSnBiV1YwYUc5a0tIc2djbVZoWkc5dWJIazZJSFJ5ZFdVZ2ZTa0tJQ0FnSUM4dklHZGxkRVoxYm1SbGNrTnZibVpwWjNWeVlYUnBiMjRvWm5WdVpHVnlPaUJCWkdSeVpYTnpLVG9nYzNSeWFXNW5JSHNLSUNBZ0lIQnliM1J2SURFZ01Rb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qVUtJQ0FnSUM4dklIQjFZbXhwWXlCamIyNW1hV2QxY21GMGFXOXVJRDBnUW05NFRXRndQRUZrWkhKbGMzTXNJRlZ6WlhKVGRISjFZM1ErS0hzZ2EyVjVVSEpsWm1sNE9pQW5ZeWNnZlNrS0lDQWdJR0o1ZEdWalh6SWdMeThnSW1NaUNpQWdJQ0JtY21GdFpWOWthV2NnTFRFS0lDQWdJR052Ym1OaGRBb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1UQTRDaUFnSUNBdkx5QnlaWFIxY200Z2RHaHBjeTVqYjI1bWFXZDFjbUYwYVc5dUtHWjFibVJsY2lrdWRtRnNkV1V1WTI5dVptbG5kWEpoZEdsdmJpNXVZWFJwZG1VS0lDQWdJR0p2ZUY5blpYUUtJQ0FnSUdGemMyVnlkQ0F2THlCQ2IzZ2diWFZ6ZENCb1lYWmxJSFpoYkhWbENpQWdJQ0JrZFhBS0lDQWdJR2x1ZEdOZk1pQXZMeUE0Q2lBZ0lDQmxlSFJ5WVdOMFgzVnBiblF4TmdvZ0lDQWdaR2xuSURFS0lDQWdJR3hsYmdvZ0lDQWdjM1ZpYzNSeWFXNW5Nd29nSUNBZ1pYaDBjbUZqZENBeUlEQUtJQ0FnSUhKbGRITjFZZ29LQ2k4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qcEhZWE5UZEdGMGFXOXVMbWRsZEVaMWJtUmxja0p2ZUNobWRXNWtaWEk2SUdKNWRHVnpLU0F0UGlCaWVYUmxjem9LWjJWMFJuVnVaR1Z5UW05NE9nb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1URTJMVEV4TndvZ0lDQWdMeThnUUdGeVl6UXVZV0pwYldWMGFHOWtLSHNnY21WaFpHOXViSGs2SUhSeWRXVWdmU2tLSUNBZ0lDOHZJR2RsZEVaMWJtUmxja0p2ZUNobWRXNWtaWEk2SUVGa1pISmxjM01wT2lCVmMyVnlVM1J5ZFdOMElIc0tJQ0FnSUhCeWIzUnZJREVnTVFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpVS0lDQWdJQzh2SUhCMVlteHBZeUJqYjI1bWFXZDFjbUYwYVc5dUlEMGdRbTk0VFdGd1BFRmtaSEpsYzNNc0lGVnpaWEpUZEhKMVkzUStLSHNnYTJWNVVISmxabWw0T2lBbll5Y2dmU2tLSUNBZ0lHSjVkR1ZqWHpJZ0x5OGdJbU1pQ2lBZ0lDQm1jbUZ0WlY5a2FXY2dMVEVLSUNBZ0lHTnZibU5oZEFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRFNENpQWdJQ0F2THlCeVpYUjFjbTRnZEdocGN5NWpiMjVtYVdkMWNtRjBhVzl1S0daMWJtUmxjaWt1ZG1Gc2RXVUtJQ0FnSUdKdmVGOW5aWFFLSUNBZ0lHRnpjMlZ5ZENBdkx5QkNiM2dnYlhWemRDQm9ZWFpsSUhaaGJIVmxDaUFnSUNCeVpYUnpkV0lLQ2dvdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6bzZSMkZ6VTNSaGRHbHZiaTVrWlhCdmMybDBWMmwwYUVOdmJtWnBaM1Z5WVhScGIyNG9kSGh1UkdWd2IzTnBkRG9nZFdsdWREWTBMQ0JqYjI1bWFXZDFjbUYwYVc5dU9pQmllWFJsY3lrZ0xUNGdkbTlwWkRvS1pHVndiM05wZEZkcGRHaERiMjVtYVdkMWNtRjBhVzl1T2dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRJNExURXlPUW9nSUNBZ0x5OGdRR0Z5WXpRdVlXSnBiV1YwYUc5a0tDa0tJQ0FnSUM4dklIQjFZbXhwWXlCa1pYQnZjMmwwVjJsMGFFTnZibVpwWjNWeVlYUnBiMjRvZEhodVJHVndiM05wZERvZ1ozUjRiaTVRWVhsdFpXNTBWSGh1TENCamIyNW1hV2QxY21GMGFXOXVPaUJoY21NMExsTjBjaWs2SUhadmFXUWdld29nSUNBZ2NISnZkRzhnTWlBd0NpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pvME5Rb2dJQ0FnTHk4Z2MzVnpjR1Z1WkdWa0lEMGdSMnh2WW1Gc1UzUmhkR1U4WW05dmJHVmhiajRvZXlCclpYazZJQ2R6SnlCOUtRb2dJQ0FnYVc1MFkxOHdJQzh2SURBS0lDQWdJR0o1ZEdWalh6QWdMeThnSW5NaUNpQWdJQ0JoY0hCZloyeHZZbUZzWDJkbGRGOWxlQW9nSUNBZ1lYTnpaWEowSUM4dklHTm9aV05ySUVkc2IySmhiRk4wWVhSbElHVjRhWE4wY3dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRNd0NpQWdJQ0F2THlCaGMzTmxjblFvSVhSb2FYTXVjM1Z6Y0dWdVpHVmtMblpoYkhWbExDQW5WR2hsSUhOdFlYSjBJR052Ym5SeVlXTjBJR2x6SUhOMWMzQmxibVJsWkNCaGRDQjBhR1VnYlc5dFpXNTBKeWtLSUNBZ0lDRUtJQ0FnSUdGemMyVnlkQ0F2THlCVWFHVWdjMjFoY25RZ1kyOXVkSEpoWTNRZ2FYTWdjM1Z6Y0dWdVpHVmtJR0YwSUhSb1pTQnRiMjFsYm5RS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pFek1Rb2dJQ0FnTHk4Z1lYTnpaWEowS0c5d0xteGxiaWhDZVhSbGN5aGpiMjVtYVdkMWNtRjBhVzl1TG01aGRHbDJaU2twSUQ0Z01Dd2dKME52Ym1acFozVnlZWFJwYjI0Z2JYVnpkQ0JpWlNCa1pXWnBibVZrSnlrS0lDQWdJR1p5WVcxbFgyUnBaeUF0TVFvZ0lDQWdaWGgwY21GamRDQXlJREFLSUNBZ0lHUjFjQW9nSUNBZ2JHVnVDaUFnSUNCaGMzTmxjblFnTHk4Z1EyOXVabWxuZFhKaGRHbHZiaUJ0ZFhOMElHSmxJR1JsWm1sdVpXUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qRXpNZ29nSUNBZ0x5OGdZWE56WlhKMEtHOXdMbk4xWW5OMGNtbHVaeWhDZVhSbGN5aGpiMjVtYVdkMWNtRjBhVzl1TG01aGRHbDJaU2tzSURBc0lERXBMblJ2VTNSeWFXNW5LQ2tnUFQwOUlDZDdKeXdnSjBsdWRtRnNhV1FnWTI5dVptbG5kWEpoZEdsdmJpQndjbTkyYVdSbFpDY3BDaUFnSUNCemRXSnpkSEpwYm1jZ01DQXhDaUFnSUNCd2RYTm9ZbmwwWlhNZ0luc2lDaUFnSUNBOVBRb2dJQ0FnWVhOelpYSjBJQzh2SUVsdWRtRnNhV1FnWTI5dVptbG5kWEpoZEdsdmJpQndjbTkyYVdSbFpBb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1UTXpDaUFnSUNBdkx5QjJZWElnYzJWdVpHVnlJRDBnYm1WM0lHRnlZelF1UVdSa2NtVnpjeWgwZUc1RVpYQnZjMmwwTG5ObGJtUmxjaWtLSUNBZ0lHWnlZVzFsWDJScFp5QXRNZ29nSUNBZ1ozUjRibk1nVTJWdVpHVnlDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3hNelFLSUNBZ0lDOHZJR052Ym5OMElHWmxaVG9nZFdsdWREWTBJRDBnZEhodVJHVndiM05wZEM1aGJXOTFiblFnTHlBeU1DQXZMelVsQ2lBZ0lDQm1jbUZ0WlY5a2FXY2dMVElLSUNBZ0lHZDBlRzV6SUVGdGIzVnVkQW9nSUNBZ1pIVndDaUFnSUNCcGJuUmpYek1nTHk4Z01qQUtJQ0FnSUM4S0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pFek5Rb2dJQ0FnTHk4Z1kyOXVjM1FnWkdWd2IzTnBkRG9nZFdsdWREWTBJRDBnZEhodVJHVndiM05wZEM1aGJXOTFiblFnTFNCbVpXVUtJQ0FnSUMwS0lDQWdJR1IxY0FvZ0lDQWdZMjkyWlhJZ01nb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qWUtJQ0FnSUM4dklIQjFZbXhwWXlCaGJHeEVaWEJ2YzJsMGN5QTlJRWRzYjJKaGJGTjBZWFJsUEhWcGJuUTJORDRvS1NBdkx5QmthV1ptWlhKbGJtTmxJR0psZEhkbFpXNGdkR2hwY3lCMllXeDFaU0JoYm1RZ2NtVmhiQ0IyWVd4MVpTQnBjeUIwYUdVZ2NISnZkRzlqYjJ3Z1ptVmxJR0ZqWTNWdGRXeGhkR2x2YmdvZ0lDQWdhVzUwWTE4d0lDOHZJREFLSUNBZ0lHSjVkR1ZqSURRZ0x5OGdJbUZzYkVSbGNHOXphWFJ6SWdvZ0lDQWdZWEJ3WDJkc2IySmhiRjluWlhSZlpYZ0tJQ0FnSUdGemMyVnlkQ0F2THlCamFHVmpheUJIYkc5aVlXeFRkR0YwWlNCbGVHbHpkSE1LSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakV6TndvZ0lDQWdMeThnZEdocGN5NWhiR3hFWlhCdmMybDBjeTUyWVd4MVpTQXJQU0JrWlhCdmMybDBDaUFnSUNBckNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5nb2dJQ0FnTHk4Z2NIVmliR2xqSUdGc2JFUmxjRzl6YVhSeklEMGdSMnh2WW1Gc1UzUmhkR1U4ZFdsdWREWTBQaWdwSUM4dklHUnBabVpsY21WdVkyVWdZbVYwZDJWbGJpQjBhR2x6SUhaaGJIVmxJR0Z1WkNCeVpXRnNJSFpoYkhWbElHbHpJSFJvWlNCd2NtOTBiMk52YkNCbVpXVWdZV05qZFcxMWJHRjBhVzl1Q2lBZ0lDQmllWFJsWXlBMElDOHZJQ0poYkd4RVpYQnZjMmwwY3lJS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pFek53b2dJQ0FnTHk4Z2RHaHBjeTVoYkd4RVpYQnZjMmwwY3k1MllXeDFaU0FyUFNCa1pYQnZjMmwwQ2lBZ0lDQnpkMkZ3Q2lBZ0lDQmhjSEJmWjJ4dlltRnNYM0IxZEFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRNNUNpQWdJQ0F2THlCaGMzTmxjblFvZEhodVJHVndiM05wZEM1eVpXTmxhWFpsY2lBOVBUMGdSMnh2WW1Gc0xtTjFjbkpsYm5SQmNIQnNhV05oZEdsdmJrRmtaSEpsYzNNc0lDZFNaV05sYVhabGNpQnRkWE4wSUdKbElIUm9aU0JuWVhNZ2MzUmhkR2x2YmlCaGNIQW5LUW9nSUNBZ1puSmhiV1ZmWkdsbklDMHlDaUFnSUNCbmRIaHVjeUJTWldObGFYWmxjZ29nSUNBZ1oyeHZZbUZzSUVOMWNuSmxiblJCY0hCc2FXTmhkR2x2YmtGa1pISmxjM01LSUNBZ0lEMDlDaUFnSUNCaGMzTmxjblFnTHk4Z1VtVmpaV2wyWlhJZ2JYVnpkQ0JpWlNCMGFHVWdaMkZ6SUhOMFlYUnBiMjRnWVhCd0NpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5Rb2dJQ0FnTHk4Z2NIVmliR2xqSUdOdmJtWnBaM1Z5WVhScGIyNGdQU0JDYjNoTllYQThRV1JrY21WemN5d2dWWE5sY2xOMGNuVmpkRDRvZXlCclpYbFFjbVZtYVhnNklDZGpKeUI5S1FvZ0lDQWdZbmwwWldOZk1pQXZMeUFpWXlJS0lDQWdJSE4zWVhBS0lDQWdJR052Ym1OaGRBb2dJQ0FnWkhWd0NpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE5ERUtJQ0FnSUM4dklHbG1JQ2gwYUdsekxtTnZibVpwWjNWeVlYUnBiMjRvYzJWdVpHVnlLUzVsZUdsemRITXBJSHNLSUNBZ0lHSnZlRjlzWlc0S0lDQWdJR0oxY25rZ01Rb2dJQ0FnWW5vZ1pHVndiM05wZEZkcGRHaERiMjVtYVdkMWNtRjBhVzl1WDJWc2MyVmZZbTlrZVVBeUNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE5ESUtJQ0FnSUM4dklIUm9hWE11WTI5dVptbG5kWEpoZEdsdmJpaHpaVzVrWlhJcExuWmhiSFZsTG1KaGJHRnVZMlVnUFNCdVpYY2dWV2x1ZEU0Mk5DaGtaWEJ2YzJsMElDc2dkR2hwY3k1amIyNW1hV2QxY21GMGFXOXVLSE5sYm1SbGNpa3VkbUZzZFdVdVltRnNZVzVqWlM1dVlYUnBkbVVwQ2lBZ0lDQmtkWEFLSUNBZ0lHSnZlRjluWlhRS0lDQWdJR0Z6YzJWeWRDQXZMeUJDYjNnZ2JYVnpkQ0JvWVhabElIWmhiSFZsQ2lBZ0lDQnBiblJqWHpBZ0x5OGdNQW9nSUNBZ1pYaDBjbUZqZEY5MWFXNTBOalFLSUNBZ0lHWnlZVzFsWDJScFp5QXdDaUFnSUNBckNpQWdJQ0JwZEc5aUNpQWdJQ0JrYVdjZ01Rb2dJQ0FnWW05NFgyZGxkQW9nSUNBZ1lYTnpaWEowSUM4dklFSnZlQ0J0ZFhOMElHaGhkbVVnZG1Gc2RXVUtJQ0FnSUhOM1lYQUtJQ0FnSUhKbGNHeGhZMlV5SURBS0lDQWdJR1JwWnlBeENpQWdJQ0JpYjNoZlpHVnNDaUFnSUNCd2IzQUtJQ0FnSUdScFp5QXhDaUFnSUNCemQyRndDaUFnSUNCaWIzaGZjSFYwQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem94TkRNS0lDQWdJQzh2SUhSb2FYTXVZMjl1Wm1sbmRYSmhkR2x2YmloelpXNWtaWElwTG5aaGJIVmxMbU52Ym1acFozVnlZWFJwYjI0Z1BTQmpiMjVtYVdkMWNtRjBhVzl1Q2lBZ0lDQmtkWEFLSUNBZ0lHSnZlRjluWlhRS0lDQWdJR0Z6YzJWeWRDQXZMeUJDYjNnZ2JYVnpkQ0JvWVhabElIWmhiSFZsQ2lBZ0lDQmtkWEFLSUNBZ0lHbHVkR05mTWlBdkx5QTRDaUFnSUNCbGVIUnlZV04wWDNWcGJuUXhOZ29nSUNBZ2FXNTBZMTh3SUM4dklEQUtJQ0FnSUhOM1lYQUtJQ0FnSUdWNGRISmhZM1F6Q2lBZ0lDQm1jbUZ0WlY5a2FXY2dMVEVLSUNBZ0lHTnZibU5oZEFvZ0lDQWdaR2xuSURFS0lDQWdJR0p2ZUY5a1pXd0tJQ0FnSUhCdmNBb2dJQ0FnWW05NFgzQjFkQW9nSUNBZ2NtVjBjM1ZpQ2dwa1pYQnZjMmwwVjJsMGFFTnZibVpwWjNWeVlYUnBiMjVmWld4elpWOWliMlI1UURJNkNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE5EWUtJQ0FnSUM4dklHSmhiR0Z1WTJVNklHNWxkeUJWYVc1MFRqWTBLR1JsY0c5emFYUXBMQW9nSUNBZ1puSmhiV1ZmWkdsbklEQUtJQ0FnSUdsMGIySUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qRTBOUzB4TkRnS0lDQWdJQzh2SUdOdmJuTjBJRzVsZDFaaGJIVmxJRDBnYm1WM0lGVnpaWEpUZEhKMVkzUW9ld29nSUNBZ0x5OGdJQ0JpWVd4aGJtTmxPaUJ1WlhjZ1ZXbHVkRTQyTkNoa1pYQnZjMmwwS1N3S0lDQWdJQzh2SUNBZ1kyOXVabWxuZFhKaGRHbHZiam9nWTI5dVptbG5kWEpoZEdsdmJpd0tJQ0FnSUM4dklIMHBDaUFnSUNCd2RYTm9ZbmwwWlhNZ01IZ3dNREJoQ2lBZ0lDQmpiMjVqWVhRS0lDQWdJR1p5WVcxbFgyUnBaeUF0TVFvZ0lDQWdZMjl1WTJGMENpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE5Ea0tJQ0FnSUM4dklIUm9hWE11WTI5dVptbG5kWEpoZEdsdmJpaHpaVzVrWlhJcExuWmhiSFZsSUQwZ2JtVjNWbUZzZFdVdVkyOXdlU2dwQ2lBZ0lDQnpkMkZ3Q2lBZ0lDQmtkWEFLSUNBZ0lHSnZlRjlrWld3S0lDQWdJSEJ2Y0FvZ0lDQWdjM2RoY0FvZ0lDQWdZbTk0WDNCMWRBb2dJQ0FnY21WMGMzVmlDZ29LTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk9rZGhjMU4wWVhScGIyNHVaR1Z3YjNOcGRDaDBlRzVFWlhCdmMybDBPaUIxYVc1ME5qUXBJQzArSUhadmFXUTZDbVJsY0c5emFYUTZDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3hOVGt0TVRZd0NpQWdJQ0F2THlCQVlYSmpOQzVoWW1sdFpYUm9iMlFvS1FvZ0lDQWdMeThnY0hWaWJHbGpJR1JsY0c5emFYUW9kSGh1UkdWd2IzTnBkRG9nWjNSNGJpNVFZWGx0Wlc1MFZIaHVLVG9nZG05cFpDQjdDaUFnSUNCd2NtOTBieUF4SURBS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pRMUNpQWdJQ0F2THlCemRYTndaVzVrWldRZ1BTQkhiRzlpWVd4VGRHRjBaVHhpYjI5c1pXRnVQaWg3SUd0bGVUb2dKM01uSUgwcENpQWdJQ0JwYm5Salh6QWdMeThnTUFvZ0lDQWdZbmwwWldOZk1DQXZMeUFpY3lJS0lDQWdJR0Z3Y0Y5bmJHOWlZV3hmWjJWMFgyVjRDaUFnSUNCaGMzTmxjblFnTHk4Z1kyaGxZMnNnUjJ4dlltRnNVM1JoZEdVZ1pYaHBjM1J6Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem94TmpFS0lDQWdJQzh2SUdGemMyVnlkQ2doZEdocGN5NXpkWE53Wlc1a1pXUXVkbUZzZFdVc0lDZFVhR1VnYzIxaGNuUWdZMjl1ZEhKaFkzUWdhWE1nYzNWemNHVnVaR1ZrSUdGMElIUm9aU0J0YjIxbGJuUW5LUW9nSUNBZ0lRb2dJQ0FnWVhOelpYSjBJQzh2SUZSb1pTQnpiV0Z5ZENCamIyNTBjbUZqZENCcGN5QnpkWE53Wlc1a1pXUWdZWFFnZEdobElHMXZiV1Z1ZEFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TVRZeUNpQWdJQ0F2THlCMllYSWdjMlZ1WkdWeUlEMGdibVYzSUdGeVl6UXVRV1JrY21WemN5aDBlRzVFWlhCdmMybDBMbk5sYm1SbGNpa0tJQ0FnSUdaeVlXMWxYMlJwWnlBdE1Rb2dJQ0FnWjNSNGJuTWdVMlZ1WkdWeUNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE5qTUtJQ0FnSUM4dklHTnZibk4wSUdabFpUb2dkV2x1ZERZMElEMGdkSGh1UkdWd2IzTnBkQzVoYlc5MWJuUWdMeUF5TUNBdkx6VWxDaUFnSUNCbWNtRnRaVjlrYVdjZ0xURUtJQ0FnSUdkMGVHNXpJRUZ0YjNWdWRBb2dJQ0FnWkhWd0NpQWdJQ0JwYm5Salh6TWdMeThnTWpBS0lDQWdJQzhLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakUyTkFvZ0lDQWdMeThnWTI5dWMzUWdaR1Z3YjNOcGREb2dkV2x1ZERZMElEMGdkSGh1UkdWd2IzTnBkQzVoYlc5MWJuUWdMU0JtWldVS0lDQWdJQzBLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakkyQ2lBZ0lDQXZMeUJ3ZFdKc2FXTWdZV3hzUkdWd2IzTnBkSE1nUFNCSGJHOWlZV3hUZEdGMFpUeDFhVzUwTmpRK0tDa2dMeThnWkdsbVptVnlaVzVqWlNCaVpYUjNaV1Z1SUhSb2FYTWdkbUZzZFdVZ1lXNWtJSEpsWVd3Z2RtRnNkV1VnYVhNZ2RHaGxJSEJ5YjNSdlkyOXNJR1psWlNCaFkyTjFiWFZzWVhScGIyNEtJQ0FnSUdsdWRHTmZNQ0F2THlBd0NpQWdJQ0JpZVhSbFl5QTBJQzh2SUNKaGJHeEVaWEJ2YzJsMGN5SUtJQ0FnSUdGd2NGOW5iRzlpWVd4ZloyVjBYMlY0Q2lBZ0lDQmhjM05sY25RZ0x5OGdZMmhsWTJzZ1IyeHZZbUZzVTNSaGRHVWdaWGhwYzNSekNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE5qWUtJQ0FnSUM4dklIUm9hWE11WVd4c1JHVndiM05wZEhNdWRtRnNkV1VnS3owZ1pHVndiM05wZEFvZ0lDQWdaR2xuSURFS0lDQWdJQ3NLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakkyQ2lBZ0lDQXZMeUJ3ZFdKc2FXTWdZV3hzUkdWd2IzTnBkSE1nUFNCSGJHOWlZV3hUZEdGMFpUeDFhVzUwTmpRK0tDa2dMeThnWkdsbVptVnlaVzVqWlNCaVpYUjNaV1Z1SUhSb2FYTWdkbUZzZFdVZ1lXNWtJSEpsWVd3Z2RtRnNkV1VnYVhNZ2RHaGxJSEJ5YjNSdlkyOXNJR1psWlNCaFkyTjFiWFZzWVhScGIyNEtJQ0FnSUdKNWRHVmpJRFFnTHk4Z0ltRnNiRVJsY0c5emFYUnpJZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNVFkyQ2lBZ0lDQXZMeUIwYUdsekxtRnNiRVJsY0c5emFYUnpMblpoYkhWbElDczlJR1JsY0c5emFYUUtJQ0FnSUhOM1lYQUtJQ0FnSUdGd2NGOW5iRzlpWVd4ZmNIVjBDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3hOamdLSUNBZ0lDOHZJR0Z6YzJWeWRDaDBlRzVFWlhCdmMybDBMbkpsWTJWcGRtVnlJRDA5UFNCSGJHOWlZV3d1WTNWeWNtVnVkRUZ3Y0d4cFkyRjBhVzl1UVdSa2NtVnpjeXdnSjFKbFkyVnBkbVZ5SUcxMWMzUWdZbVVnZEdobElHZGhjeUJ6ZEdGMGFXOXVJR0Z3Y0NjcENpQWdJQ0JtY21GdFpWOWthV2NnTFRFS0lDQWdJR2QwZUc1eklGSmxZMlZwZG1WeUNpQWdJQ0JuYkc5aVlXd2dRM1Z5Y21WdWRFRndjR3hwWTJGMGFXOXVRV1JrY21WemN3b2dJQ0FnUFQwS0lDQWdJR0Z6YzJWeWRDQXZMeUJTWldObGFYWmxjaUJ0ZFhOMElHSmxJSFJvWlNCbllYTWdjM1JoZEdsdmJpQmhjSEFLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakkxQ2lBZ0lDQXZMeUJ3ZFdKc2FXTWdZMjl1Wm1sbmRYSmhkR2x2YmlBOUlFSnZlRTFoY0R4QlpHUnlaWE56TENCVmMyVnlVM1J5ZFdOMFBpaDdJR3RsZVZCeVpXWnBlRG9nSjJNbklIMHBDaUFnSUNCaWVYUmxZMTh5SUM4dklDSmpJZ29nSUNBZ2RXNWpiM1psY2lBeUNpQWdJQ0JqYjI1allYUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qRTNNQW9nSUNBZ0x5OGdZWE56WlhKMEtIUm9hWE11WTI5dVptbG5kWEpoZEdsdmJpaHpaVzVrWlhJcExtVjRhWE4wY3l3Z0owWjFibVJsY2lCdGRYTjBJSE5sZENCamIyNW1hV2QxY21GMGFXOXVJR1pwY25OMEp5a0tJQ0FnSUdSMWNBb2dJQ0FnWW05NFgyeGxiZ29nSUNBZ1luVnllU0F4Q2lBZ0lDQmhjM05sY25RZ0x5OGdSblZ1WkdWeUlHMTFjM1FnYzJWMElHTnZibVpwWjNWeVlYUnBiMjRnWm1seWMzUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qRTNNZ29nSUNBZ0x5OGdkR2hwY3k1amIyNW1hV2QxY21GMGFXOXVLSE5sYm1SbGNpa3VkbUZzZFdVdVltRnNZVzVqWlNBOUlHNWxkeUJWYVc1MFRqWTBLR1JsY0c5emFYUWdLeUIwYUdsekxtTnZibVpwWjNWeVlYUnBiMjRvYzJWdVpHVnlLUzUyWVd4MVpTNWlZV3hoYm1ObExtNWhkR2wyWlNrS0lDQWdJR1IxY0FvZ0lDQWdZbTk0WDJkbGRBb2dJQ0FnWVhOelpYSjBJQzh2SUVKdmVDQnRkWE4wSUdoaGRtVWdkbUZzZFdVS0lDQWdJR2x1ZEdOZk1DQXZMeUF3Q2lBZ0lDQmxlSFJ5WVdOMFgzVnBiblEyTkFvZ0lDQWdkVzVqYjNabGNpQXlDaUFnSUNBckNpQWdJQ0JwZEc5aUNpQWdJQ0JrYVdjZ01Rb2dJQ0FnWW05NFgyZGxkQW9nSUNBZ1lYTnpaWEowSUM4dklFSnZlQ0J0ZFhOMElHaGhkbVVnZG1Gc2RXVUtJQ0FnSUhOM1lYQUtJQ0FnSUhKbGNHeGhZMlV5SURBS0lDQWdJR1JwWnlBeENpQWdJQ0JpYjNoZlpHVnNDaUFnSUNCd2IzQUtJQ0FnSUdKdmVGOXdkWFFLSUNBZ0lISmxkSE4xWWdvS0NpOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPanBIWVhOVGRHRjBhVzl1TG1aMWJtUkJZMk52ZFc1MEtHRnRiM1Z1ZERvZ2RXbHVkRFkwTENCeVpXTmxhWFpsY2pvZ1lubDBaWE1zSUc1dmRHVTZJR0o1ZEdWekxDQm1kVzVrWlhJNklHSjVkR1Z6S1NBdFBpQmllWFJsY3pvS1puVnVaRUZqWTI5MWJuUTZDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3hPRE10TVRnMENpQWdJQ0F2THlCQVlYSmpOQzVoWW1sdFpYUm9iMlFvS1FvZ0lDQWdMeThnY0hWaWJHbGpJR1oxYm1SQlkyTnZkVzUwS0dGdGIzVnVkRG9nZFdsdWREWTBMQ0J5WldObGFYWmxjam9nUVdSa2NtVnpjeXdnYm05MFpUb2djM1J5YVc1bkxDQm1kVzVrWlhJNklFRmtaSEpsYzNNcE9pQmllWFJsY3lCN0NpQWdJQ0J3Y205MGJ5QTBJREVLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPalExQ2lBZ0lDQXZMeUJ6ZFhOd1pXNWtaV1FnUFNCSGJHOWlZV3hUZEdGMFpUeGliMjlzWldGdVBpaDdJR3RsZVRvZ0ozTW5JSDBwQ2lBZ0lDQnBiblJqWHpBZ0x5OGdNQW9nSUNBZ1lubDBaV05mTUNBdkx5QWljeUlLSUNBZ0lHRndjRjluYkc5aVlXeGZaMlYwWDJWNENpQWdJQ0JoYzNObGNuUWdMeThnWTJobFkyc2dSMnh2WW1Gc1UzUmhkR1VnWlhocGMzUnpDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3hPRFVLSUNBZ0lDOHZJR0Z6YzJWeWRDZ2hkR2hwY3k1emRYTndaVzVrWldRdWRtRnNkV1VzSUNkVWFHVWdjMjFoY25RZ1kyOXVkSEpoWTNRZ2FYTWdjM1Z6Y0dWdVpHVmtJR0YwSUhSb1pTQnRiMjFsYm5RbktRb2dJQ0FnSVFvZ0lDQWdZWE56WlhKMElDOHZJRlJvWlNCemJXRnlkQ0JqYjI1MGNtRmpkQ0JwY3lCemRYTndaVzVrWldRZ1lYUWdkR2hsSUcxdmJXVnVkQW9nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNelVLSUNBZ0lDOHZJR0ZrWkhKbGMzTkZlR1ZqZFhScGRtVWdQU0JIYkc5aVlXeFRkR0YwWlR4QlpHUnlaWE56UGloN0lHdGxlVG9nSjJVbklIMHBDaUFnSUNCcGJuUmpYekFnTHk4Z01Bb2dJQ0FnWW5sMFpXTWdOU0F2THlBaVpTSUtJQ0FnSUdGd2NGOW5iRzlpWVd4ZloyVjBYMlY0Q2lBZ0lDQmhjM05sY25RZ0x5OGdZMmhsWTJzZ1IyeHZZbUZzVTNSaGRHVWdaWGhwYzNSekNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE9EWUtJQ0FnSUM4dklHRnpjMlZ5ZENoMGFHbHpMbUZrWkhKbGMzTkZlR1ZqZFhScGRtVXVkbUZzZFdVZ1BUMDlJRzVsZHlCQlpHUnlaWE56S0ZSNGJpNXpaVzVrWlhJcExDQW5UMjVzZVNCbGVHVmpkWFJ2Y2lCallXNGdkWE5sSUhSb2FYTWdiV1YwYUc5a0p5a0tJQ0FnSUhSNGJpQlRaVzVrWlhJS0lDQWdJRDA5Q2lBZ0lDQmhjM05sY25RZ0x5OGdUMjVzZVNCbGVHVmpkWFJ2Y2lCallXNGdkWE5sSUhSb2FYTWdiV1YwYUc5a0NpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5Rb2dJQ0FnTHk4Z2NIVmliR2xqSUdOdmJtWnBaM1Z5WVhScGIyNGdQU0JDYjNoTllYQThRV1JrY21WemN5d2dWWE5sY2xOMGNuVmpkRDRvZXlCclpYbFFjbVZtYVhnNklDZGpKeUI5S1FvZ0lDQWdZbmwwWldOZk1pQXZMeUFpWXlJS0lDQWdJR1p5WVcxbFgyUnBaeUF0TVFvZ0lDQWdZMjl1WTJGMENpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE9EY0tJQ0FnSUM4dklHRnpjMlZ5ZENoMGFHbHpMbU52Ym1acFozVnlZWFJwYjI0b1puVnVaR1Z5S1M1bGVHbHpkSE1zSUNkR2RXNWtaWElnWW05NElHUnZaWE1nYm05MElHVjRhWE4wY3ljcENpQWdJQ0JrZFhBS0lDQWdJR0p2ZUY5c1pXNEtJQ0FnSUdKMWNua2dNUW9nSUNBZ1lYTnpaWEowSUM4dklFWjFibVJsY2lCaWIzZ2daRzlsY3lCdWIzUWdaWGhwYzNSekNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE9EZ0tJQ0FnSUM4dklHTnZibk4wSUdKaGJHRnVZMlVnUFNCMGFHbHpMbU52Ym1acFozVnlZWFJwYjI0b1puVnVaR1Z5S1M1MllXeDFaUzVpWVd4aGJtTmxMbTVoZEdsMlpRb2dJQ0FnWkhWd0NpQWdJQ0JpYjNoZloyVjBDaUFnSUNCaGMzTmxjblFnTHk4Z1FtOTRJRzExYzNRZ2FHRjJaU0IyWVd4MVpRb2dJQ0FnYVc1MFkxOHdJQzh2SURBS0lDQWdJR1Y0ZEhKaFkzUmZkV2x1ZERZMENpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveE9URUtJQ0FnSUM4dklHRnpjMlZ5ZENoaVlXeGhibU5sSUQ0Z1lXMXZkVzUwSUNzZ01qQXdNQ3dnSjBaMWJtUmxjaUJwY3lCdmRYUWdiMllnZEdobElHUmxjRzl6YVhRbktRb2dJQ0FnWm5KaGJXVmZaR2xuSUMwMENpQWdJQ0J3ZFhOb2FXNTBJREl3TURBZ0x5OGdNakF3TUFvZ0lDQWdLd29nSUNBZ1Bnb2dJQ0FnWVhOelpYSjBJQzh2SUVaMWJtUmxjaUJwY3lCdmRYUWdiMllnZEdobElHUmxjRzl6YVhRS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pFNU5TMHlNREVLSUNBZ0lDOHZJR052Ym5OMElHbDBlRzVTWlhOMWJIUWdQU0JwZEhodUNpQWdJQ0F2THlBZ0lDNXdZWGx0Wlc1MEtIc0tJQ0FnSUM4dklDQWdJQ0JoYlc5MWJuUTZJR0Z0YjNWdWRDd0tJQ0FnSUM4dklDQWdJQ0J5WldObGFYWmxjam9nY21WalpXbDJaWEl1Ym1GMGFYWmxMQW9nSUNBZ0x5OGdJQ0FnSUc1dmRHVTZJRzV2ZEdVc0NpQWdJQ0F2THlBZ0lIMHBDaUFnSUNBdkx5QWdJQzV6ZFdKdGFYUW9LUW9nSUNBZ2FYUjRibDlpWldkcGJnb2dJQ0FnWm5KaGJXVmZaR2xuSUMweUNpQWdJQ0JwZEhodVgyWnBaV3hrSUU1dmRHVUtJQ0FnSUdaeVlXMWxYMlJwWnlBdE13b2dJQ0FnYVhSNGJsOW1hV1ZzWkNCU1pXTmxhWFpsY2dvZ0lDQWdabkpoYldWZlpHbG5JQzAwQ2lBZ0lDQnBkSGh1WDJacFpXeGtJRUZ0YjNWdWRBb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1UazFMVEl3TUFvZ0lDQWdMeThnWTI5dWMzUWdhWFI0YmxKbGMzVnNkQ0E5SUdsMGVHNEtJQ0FnSUM4dklDQWdMbkJoZVcxbGJuUW9ld29nSUNBZ0x5OGdJQ0FnSUdGdGIzVnVkRG9nWVcxdmRXNTBMQW9nSUNBZ0x5OGdJQ0FnSUhKbFkyVnBkbVZ5T2lCeVpXTmxhWFpsY2k1dVlYUnBkbVVzQ2lBZ0lDQXZMeUFnSUNBZ2JtOTBaVG9nYm05MFpTd0tJQ0FnSUM4dklDQWdmU2tLSUNBZ0lHbHVkR05mTVNBdkx5QXhDaUFnSUNCcGRIaHVYMlpwWld4a0lGUjVjR1ZGYm5WdENpQWdJQ0JwYm5Salh6QWdMeThnTUFvZ0lDQWdhWFI0Ymw5bWFXVnNaQ0JHWldVS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pFNU5TMHlNREVLSUNBZ0lDOHZJR052Ym5OMElHbDBlRzVTWlhOMWJIUWdQU0JwZEhodUNpQWdJQ0F2THlBZ0lDNXdZWGx0Wlc1MEtIc0tJQ0FnSUM4dklDQWdJQ0JoYlc5MWJuUTZJR0Z0YjNWdWRDd0tJQ0FnSUM4dklDQWdJQ0J5WldObGFYWmxjam9nY21WalpXbDJaWEl1Ym1GMGFYWmxMQW9nSUNBZ0x5OGdJQ0FnSUc1dmRHVTZJRzV2ZEdVc0NpQWdJQ0F2THlBZ0lIMHBDaUFnSUNBdkx5QWdJQzV6ZFdKdGFYUW9LUW9nSUNBZ2FYUjRibDl6ZFdKdGFYUUtJQ0FnSUdsMGVHNGdSbVZsQ2lBZ0lDQnBkSGh1SUZSNFNVUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSXdOUW9nSUNBZ0x5OGdkR2hwY3k1amIyNW1hV2QxY21GMGFXOXVLR1oxYm1SbGNpa3VkbUZzZFdVdVltRnNZVzVqWlM1dVlYUnBkbVVnTFNCaGJXOTFiblFnTFNCcGRIaHVVbVZ6ZFd4MExtWmxaU0FxSURJc0NpQWdJQ0JrYVdjZ01nb2dJQ0FnWW05NFgyZGxkQW9nSUNBZ1lYTnpaWEowSUM4dklFSnZlQ0J0ZFhOMElHaGhkbVVnZG1Gc2RXVUtJQ0FnSUdsdWRHTmZNQ0F2THlBd0NpQWdJQ0JsZUhSeVlXTjBYM1ZwYm5RMk5Bb2dJQ0FnWm5KaGJXVmZaR2xuSUMwMENpQWdJQ0F0Q2lBZ0lDQjFibU52ZG1WeUlESUtJQ0FnSUhCMWMyaHBiblFnTWlBdkx5QXlDaUFnSUNBcUNpQWdJQ0F0Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem95TURRdE1qQTJDaUFnSUNBdkx5QjBhR2x6TG1OdmJtWnBaM1Z5WVhScGIyNG9ablZ1WkdWeUtTNTJZV3gxWlM1aVlXeGhibU5sSUQwZ2JtVjNJRlZwYm5ST05qUW9DaUFnSUNBdkx5QWdJSFJvYVhNdVkyOXVabWxuZFhKaGRHbHZiaWhtZFc1a1pYSXBMblpoYkhWbExtSmhiR0Z1WTJVdWJtRjBhWFpsSUMwZ1lXMXZkVzUwSUMwZ2FYUjRibEpsYzNWc2RDNW1aV1VnS2lBeUxBb2dJQ0FnTHk4Z0tRb2dJQ0FnYVhSdllnb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qQTBDaUFnSUNBdkx5QjBhR2x6TG1OdmJtWnBaM1Z5WVhScGIyNG9ablZ1WkdWeUtTNTJZV3gxWlM1aVlXeGhibU5sSUQwZ2JtVjNJRlZwYm5ST05qUW9DaUFnSUNCa2FXY2dNZ29nSUNBZ1ltOTRYMmRsZEFvZ0lDQWdZWE56WlhKMElDOHZJRUp2ZUNCdGRYTjBJR2hoZG1VZ2RtRnNkV1VLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakl3TkMweU1EWUtJQ0FnSUM4dklIUm9hWE11WTI5dVptbG5kWEpoZEdsdmJpaG1kVzVrWlhJcExuWmhiSFZsTG1KaGJHRnVZMlVnUFNCdVpYY2dWV2x1ZEU0Mk5DZ0tJQ0FnSUM4dklDQWdkR2hwY3k1amIyNW1hV2QxY21GMGFXOXVLR1oxYm1SbGNpa3VkbUZzZFdVdVltRnNZVzVqWlM1dVlYUnBkbVVnTFNCaGJXOTFiblFnTFNCcGRIaHVVbVZ6ZFd4MExtWmxaU0FxSURJc0NpQWdJQ0F2THlBcENpQWdJQ0J6ZDJGd0NpQWdJQ0J5WlhCc1lXTmxNaUF3Q2lBZ0lDQmthV2NnTWdvZ0lDQWdZbTk0WDJSbGJBb2dJQ0FnY0c5d0NpQWdJQ0IxYm1OdmRtVnlJRElLSUNBZ0lITjNZWEFLSUNBZ0lHSnZlRjl3ZFhRS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJd09Bb2dJQ0FnTHk4Z2NtVjBkWEp1SUdsMGVHNVNaWE4xYkhRdWRIaHVTV1FLSUNBZ0lISmxkSE4xWWdvS0NpOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPanBIWVhOVGRHRjBhVzl1TG5kcGRHaGtjbUYzS0hKbFkyVnBkbVZ5T2lCaWVYUmxjeXdnWVcxdmRXNTBPaUJpZVhSbGN5a2dMVDRnWW5sMFpYTTZDbmRwZEdoa2NtRjNPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNakU0TFRJeE9Rb2dJQ0FnTHk4Z1FHRnlZelF1WVdKcGJXVjBhRzlrS0NrS0lDQWdJQzh2SUhCMVlteHBZeUIzYVhSb1pISmhkeWh5WldObGFYWmxjam9nUVdSa2NtVnpjeXdnWVcxdmRXNTBPaUJWYVc1MFRqWTBLVG9nWW5sMFpYTWdld29nSUNBZ2NISnZkRzhnTWlBeENpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pvME5Rb2dJQ0FnTHk4Z2MzVnpjR1Z1WkdWa0lEMGdSMnh2WW1Gc1UzUmhkR1U4WW05dmJHVmhiajRvZXlCclpYazZJQ2R6SnlCOUtRb2dJQ0FnYVc1MFkxOHdJQzh2SURBS0lDQWdJR0o1ZEdWalh6QWdMeThnSW5NaUNpQWdJQ0JoY0hCZloyeHZZbUZzWDJkbGRGOWxlQW9nSUNBZ1lYTnpaWEowSUM4dklHTm9aV05ySUVkc2IySmhiRk4wWVhSbElHVjRhWE4wY3dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpJd0NpQWdJQ0F2THlCaGMzTmxjblFvSVhSb2FYTXVjM1Z6Y0dWdVpHVmtMblpoYkhWbExDQW5WR2hsSUhOdFlYSjBJR052Ym5SeVlXTjBJR2x6SUhOMWMzQmxibVJsWkNCaGRDQjBhR1VnYlc5dFpXNTBKeWtLSUNBZ0lDRUtJQ0FnSUdGemMyVnlkQ0F2THlCVWFHVWdjMjFoY25RZ1kyOXVkSEpoWTNRZ2FYTWdjM1Z6Y0dWdVpHVmtJR0YwSUhSb1pTQnRiMjFsYm5RS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJMUNpQWdJQ0F2THlCd2RXSnNhV01nWTI5dVptbG5kWEpoZEdsdmJpQTlJRUp2ZUUxaGNEeEJaR1J5WlhOekxDQlZjMlZ5VTNSeWRXTjBQaWg3SUd0bGVWQnlaV1pwZURvZ0oyTW5JSDBwQ2lBZ0lDQmllWFJsWTE4eUlDOHZJQ0pqSWdvZ0lDQWdabkpoYldWZlpHbG5JQzB5Q2lBZ0lDQmpiMjVqWVhRS0lDQWdJR1IxY0FvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpJeUNpQWdJQ0F2THlCcFppQW9kR2hwY3k1amIyNW1hV2QxY21GMGFXOXVLSEpsWTJWcGRtVnlLUzVsZUdsemRITXBJSHNLSUNBZ0lHSnZlRjlzWlc0S0lDQWdJR0oxY25rZ01Rb2dJQ0FnWW5vZ2QybDBhR1J5WVhkZlpXeHpaVjlpYjJSNVFETUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSXlOQW9nSUNBZ0x5OGdkbUZ5SUdWNFkyVnpjMEpoYkdGdVkyVTZJSFZwYm5RMk5DQTlJSFJvYVhNdVkyOXVabWxuZFhKaGRHbHZiaWh5WldObGFYWmxjaWt1ZG1Gc2RXVXVZbUZzWVc1alpTNXVZWFJwZG1VS0lDQWdJR1p5WVcxbFgyUnBaeUF3Q2lBZ0lDQmtkWEFLSUNBZ0lHSnZlRjluWlhRS0lDQWdJR0Z6YzJWeWRDQXZMeUJDYjNnZ2JYVnpkQ0JvWVhabElIWmhiSFZsQ2lBZ0lDQnBiblJqWHpBZ0x5OGdNQW9nSUNBZ1pYaDBjbUZqZEY5MWFXNTBOalFLSUNBZ0lDOHZJSE50WVhKMFgyTnZiblJ5WVdOMGN5OW5ZWE5mYzNSaGRHbHZiaTlqYjI1MGNtRmpkQzVoYkdkdkxuUnpPakl5TlFvZ0lDQWdMeThnWVhOelpYSjBLR0Z0YjNWdWRDNXVZWFJwZG1VZ1BEMGdaWGhqWlhOelFtRnNZVzVqWlN3Z0oxUm9aU0IzYVhSb1pISmhkMkZzSUdGdGIzVnVkQ0JqWVc1dWIzUWdZbVVnYldGNGFXMTFiU0I1YjNWeUlHUmxjRzl6YVhRbktRb2dJQ0FnWm5KaGJXVmZaR2xuSUMweENpQWdJQ0JpZEc5cENpQWdJQ0JrZFhBS0lDQWdJR1JwWnlBeUNpQWdJQ0E4UFFvZ0lDQWdZWE56WlhKMElDOHZJRlJvWlNCM2FYUm9aSEpoZDJGc0lHRnRiM1Z1ZENCallXNXViM1FnWW1VZ2JXRjRhVzExYlNCNWIzVnlJR1JsY0c5emFYUUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSXlOd29nSUNBZ0x5OGdkR2hwY3k1amIyNW1hV2QxY21GMGFXOXVLSEpsWTJWcGRtVnlLUzUyWVd4MVpTNWlZV3hoYm1ObElEMGdibVYzSUZWcGJuUk9OalFvWlhoalpYTnpRbUZzWVc1alpTQXRJR0Z0YjNWdWRDNXVZWFJwZG1VcENpQWdJQ0J6ZDJGd0NpQWdJQ0JrYVdjZ01Rb2dJQ0FnTFFvZ0lDQWdhWFJ2WWdvZ0lDQWdaR2xuSURJS0lDQWdJR0p2ZUY5blpYUUtJQ0FnSUdGemMyVnlkQ0F2THlCQ2IzZ2diWFZ6ZENCb1lYWmxJSFpoYkhWbENpQWdJQ0J6ZDJGd0NpQWdJQ0J5WlhCc1lXTmxNaUF3Q2lBZ0lDQmthV2NnTWdvZ0lDQWdZbTk0WDJSbGJBb2dJQ0FnY0c5d0NpQWdJQ0IxYm1OdmRtVnlJRElLSUNBZ0lITjNZWEFLSUNBZ0lHSnZlRjl3ZFhRS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJeU9TMHlNelVLSUNBZ0lDOHZJR052Ym5OMElHbDBlRzVTWlhOMWJIUWdQU0JwZEhodUNpQWdJQ0F2THlBZ0lDNXdZWGx0Wlc1MEtIc0tJQ0FnSUM4dklDQWdJQ0JoYlc5MWJuUTZJR0Z0YjNWdWRDNXVZWFJwZG1Vc0NpQWdJQ0F2THlBZ0lDQWdjbVZqWldsMlpYSTZJSEpsWTJWcGRtVnlMbTVoZEdsMlpTd0tJQ0FnSUM4dklDQWdJQ0J1YjNSbE9pQW5kWE5sY2lCM2FYUm9aSEpoZDJGc0p5d0tJQ0FnSUM4dklDQWdmU2tLSUNBZ0lDOHZJQ0FnTG5OMVltMXBkQ2dwQ2lBZ0lDQnBkSGh1WDJKbFoybHVDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3lNek1LSUNBZ0lDOHZJRzV2ZEdVNklDZDFjMlZ5SUhkcGRHaGtjbUYzWVd3bkxBb2dJQ0FnY0hWemFHSjVkR1Z6SUNKMWMyVnlJSGRwZEdoa2NtRjNZV3dpQ2lBZ0lDQnBkSGh1WDJacFpXeGtJRTV2ZEdVS0lDQWdJR1p5WVcxbFgyUnBaeUF0TWdvZ0lDQWdhWFI0Ymw5bWFXVnNaQ0JTWldObGFYWmxjZ29nSUNBZ2FYUjRibDltYVdWc1pDQkJiVzkxYm5RS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJeU9TMHlNelFLSUNBZ0lDOHZJR052Ym5OMElHbDBlRzVTWlhOMWJIUWdQU0JwZEhodUNpQWdJQ0F2THlBZ0lDNXdZWGx0Wlc1MEtIc0tJQ0FnSUM4dklDQWdJQ0JoYlc5MWJuUTZJR0Z0YjNWdWRDNXVZWFJwZG1Vc0NpQWdJQ0F2THlBZ0lDQWdjbVZqWldsMlpYSTZJSEpsWTJWcGRtVnlMbTVoZEdsMlpTd0tJQ0FnSUM4dklDQWdJQ0J1YjNSbE9pQW5kWE5sY2lCM2FYUm9aSEpoZDJGc0p5d0tJQ0FnSUM4dklDQWdmU2tLSUNBZ0lHbHVkR05mTVNBdkx5QXhDaUFnSUNCcGRIaHVYMlpwWld4a0lGUjVjR1ZGYm5WdENpQWdJQ0JwYm5Salh6QWdMeThnTUFvZ0lDQWdhWFI0Ymw5bWFXVnNaQ0JHWldVS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJeU9TMHlNelVLSUNBZ0lDOHZJR052Ym5OMElHbDBlRzVTWlhOMWJIUWdQU0JwZEhodUNpQWdJQ0F2THlBZ0lDNXdZWGx0Wlc1MEtIc0tJQ0FnSUM4dklDQWdJQ0JoYlc5MWJuUTZJR0Z0YjNWdWRDNXVZWFJwZG1Vc0NpQWdJQ0F2THlBZ0lDQWdjbVZqWldsMlpYSTZJSEpsWTJWcGRtVnlMbTVoZEdsMlpTd0tJQ0FnSUM4dklDQWdJQ0J1YjNSbE9pQW5kWE5sY2lCM2FYUm9aSEpoZDJGc0p5d0tJQ0FnSUM4dklDQWdmU2tLSUNBZ0lDOHZJQ0FnTG5OMVltMXBkQ2dwQ2lBZ0lDQnBkSGh1WDNOMVltMXBkQW9nSUNBZ2FYUjRiaUJVZUVsRUNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU16Y0tJQ0FnSUM4dklISmxkSFZ5YmlCcGRIaHVVbVZ6ZFd4MExuUjRia2xrQ2lBZ0lDQnpkMkZ3Q2lBZ0lDQnlaWFJ6ZFdJS0NuZHBkR2hrY21GM1gyVnNjMlZmWW05a2VVQXpPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNekVLSUNBZ0lDOHZJR0ZrWkhKbGMzTlZaSEJoZEdWeUlEMGdSMnh2WW1Gc1UzUmhkR1U4UVdSa2NtVnpjejRvZXlCclpYazZJQ2QxSnlCOUtRb2dJQ0FnYVc1MFkxOHdJQzh2SURBS0lDQWdJR0o1ZEdWalh6TWdMeThnSW5VaUNpQWdJQ0JoY0hCZloyeHZZbUZzWDJkbGRGOWxlQW9nSUNBZ1lYTnpaWEowSUM4dklHTm9aV05ySUVkc2IySmhiRk4wWVhSbElHVjRhWE4wY3dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpRd0NpQWdJQ0F2THlCaGMzTmxjblFvZEdocGN5NWhaR1J5WlhOelZXUndZWFJsY2k1MllXeDFaU0E5UFQwZ2JtVjNJRUZrWkhKbGMzTW9WSGh1TG5ObGJtUmxjaWtzSUNkUGJteDVJSFZ3WkdGMFpYSWdZMkZ1SUhWelpTQjBhR2x6SUcxbGRHaHZaQ2NwQ2lBZ0lDQjBlRzRnVTJWdVpHVnlDaUFnSUNBOVBRb2dJQ0FnWVhOelpYSjBJQzh2SUU5dWJIa2dkWEJrWVhSbGNpQmpZVzRnZFhObElIUm9hWE1nYldWMGFHOWtDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3lOREVLSUNBZ0lDOHZJSFpoY2lCbGVHTmxjM05DWVd4aGJtTmxPaUIxYVc1ME5qUWdQU0JIYkc5aVlXd3VZM1Z5Y21WdWRFRndjR3hwWTJGMGFXOXVRV1JrY21WemN5NWlZV3hoYm1ObElDMGdkR2hwY3k1aGJHeEVaWEJ2YzJsMGN5NTJZV3gxWlFvZ0lDQWdaMnh2WW1Gc0lFTjFjbkpsYm5SQmNIQnNhV05oZEdsdmJrRmtaSEpsYzNNS0lDQWdJR0ZqWTNSZmNHRnlZVzF6WDJkbGRDQkJZMk4wUW1Gc1lXNWpaUW9nSUNBZ1lYTnpaWEowSUM4dklHRmpZMjkxYm5RZ1puVnVaR1ZrQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem95TmdvZ0lDQWdMeThnY0hWaWJHbGpJR0ZzYkVSbGNHOXphWFJ6SUQwZ1IyeHZZbUZzVTNSaGRHVThkV2x1ZERZMFBpZ3BJQzh2SUdScFptWmxjbVZ1WTJVZ1ltVjBkMlZsYmlCMGFHbHpJSFpoYkhWbElHRnVaQ0J5WldGc0lIWmhiSFZsSUdseklIUm9aU0J3Y205MGIyTnZiQ0JtWldVZ1lXTmpkVzExYkdGMGFXOXVDaUFnSUNCcGJuUmpYekFnTHk4Z01Bb2dJQ0FnWW5sMFpXTWdOQ0F2THlBaVlXeHNSR1Z3YjNOcGRITWlDaUFnSUNCaGNIQmZaMnh2WW1Gc1gyZGxkRjlsZUFvZ0lDQWdZWE56WlhKMElDOHZJR05vWldOcklFZHNiMkpoYkZOMFlYUmxJR1Y0YVhOMGN3b2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qUXhDaUFnSUNBdkx5QjJZWElnWlhoalpYTnpRbUZzWVc1alpUb2dkV2x1ZERZMElEMGdSMnh2WW1Gc0xtTjFjbkpsYm5SQmNIQnNhV05oZEdsdmJrRmtaSEpsYzNNdVltRnNZVzVqWlNBdElIUm9hWE11WVd4c1JHVndiM05wZEhNdWRtRnNkV1VLSUNBZ0lDMEtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSTBNZ29nSUNBZ0x5OGdZWE56WlhKMEtHRnRiM1Z1ZEM1dVlYUnBkbVVnUEQwZ1pYaGpaWE56UW1Gc1lXNWpaU3dnSjFkcGRHaGtjbUYzWVd3Z1lXMXZkVzUwSUdOaGJtNXZkQ0JpWlNCb2FXZG9aWElnZEdobGJpQmpiMnhzWldOMFpXUWdabVZsY3ljcENpQWdJQ0JtY21GdFpWOWthV2NnTFRFS0lDQWdJR0owYjJrS0lDQWdJR1IxY0FvZ0lDQWdkVzVqYjNabGNpQXlDaUFnSUNBOFBRb2dJQ0FnWVhOelpYSjBJQzh2SUZkcGRHaGtjbUYzWVd3Z1lXMXZkVzUwSUdOaGJtNXZkQ0JpWlNCb2FXZG9aWElnZEdobGJpQmpiMnhzWldOMFpXUWdabVZsY3dvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpRekxUSTBPUW9nSUNBZ0x5OGdZMjl1YzNRZ2FYUjRibEpsYzNWc2RDQTlJR2wwZUc0S0lDQWdJQzh2SUNBZ0xuQmhlVzFsYm5Rb2V3b2dJQ0FnTHk4Z0lDQWdJR0Z0YjNWdWREb2dZVzF2ZFc1MExtNWhkR2wyWlN3S0lDQWdJQzh2SUNBZ0lDQnlaV05sYVhabGNqb2djbVZqWldsMlpYSXVibUYwYVhabExBb2dJQ0FnTHk4Z0lDQWdJRzV2ZEdVNklDZHpaWEoyYVdObElHWmxaU0IzYVhSb1pISmhkMkZzSnl3S0lDQWdJQzh2SUNBZ2ZTa0tJQ0FnSUM4dklDQWdMbk4xWW0xcGRDZ3BDaUFnSUNCcGRIaHVYMkpsWjJsdUNpQWdJQ0F2THlCemJXRnlkRjlqYjI1MGNtRmpkSE12WjJGelgzTjBZWFJwYjI0dlkyOXVkSEpoWTNRdVlXeG5ieTUwY3pveU5EY0tJQ0FnSUM4dklHNXZkR1U2SUNkelpYSjJhV05sSUdabFpTQjNhWFJvWkhKaGQyRnNKeXdLSUNBZ0lIQjFjMmhpZVhSbGN5QWljMlZ5ZG1salpTQm1aV1VnZDJsMGFHUnlZWGRoYkNJS0lDQWdJR2wwZUc1ZlptbGxiR1FnVG05MFpRb2dJQ0FnWm5KaGJXVmZaR2xuSUMweUNpQWdJQ0JwZEhodVgyWnBaV3hrSUZKbFkyVnBkbVZ5Q2lBZ0lDQnBkSGh1WDJacFpXeGtJRUZ0YjNWdWRBb2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qUXpMVEkwT0FvZ0lDQWdMeThnWTI5dWMzUWdhWFI0YmxKbGMzVnNkQ0E5SUdsMGVHNEtJQ0FnSUM4dklDQWdMbkJoZVcxbGJuUW9ld29nSUNBZ0x5OGdJQ0FnSUdGdGIzVnVkRG9nWVcxdmRXNTBMbTVoZEdsMlpTd0tJQ0FnSUM4dklDQWdJQ0J5WldObGFYWmxjam9nY21WalpXbDJaWEl1Ym1GMGFYWmxMQW9nSUNBZ0x5OGdJQ0FnSUc1dmRHVTZJQ2R6WlhKMmFXTmxJR1psWlNCM2FYUm9aSEpoZDJGc0p5d0tJQ0FnSUM4dklDQWdmU2tLSUNBZ0lHbHVkR05mTVNBdkx5QXhDaUFnSUNCcGRIaHVYMlpwWld4a0lGUjVjR1ZGYm5WdENpQWdJQ0JwYm5Salh6QWdMeThnTUFvZ0lDQWdhWFI0Ymw5bWFXVnNaQ0JHWldVS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pJME15MHlORGtLSUNBZ0lDOHZJR052Ym5OMElHbDBlRzVTWlhOMWJIUWdQU0JwZEhodUNpQWdJQ0F2THlBZ0lDNXdZWGx0Wlc1MEtIc0tJQ0FnSUM4dklDQWdJQ0JoYlc5MWJuUTZJR0Z0YjNWdWRDNXVZWFJwZG1Vc0NpQWdJQ0F2THlBZ0lDQWdjbVZqWldsMlpYSTZJSEpsWTJWcGRtVnlMbTVoZEdsMlpTd0tJQ0FnSUM4dklDQWdJQ0J1YjNSbE9pQW5jMlZ5ZG1salpTQm1aV1VnZDJsMGFHUnlZWGRoYkNjc0NpQWdJQ0F2THlBZ0lIMHBDaUFnSUNBdkx5QWdJQzV6ZFdKdGFYUW9LUW9nSUNBZ2FYUjRibDl6ZFdKdGFYUUtJQ0FnSUdsMGVHNGdWSGhKUkFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpVd0NpQWdJQ0F2THlCeVpYUjFjbTRnYVhSNGJsSmxjM1ZzZEM1MGVHNUpaQW9nSUNBZ2MzZGhjQW9nSUNBZ2NtVjBjM1ZpQ2dvS0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZPa2RoYzFOMFlYUnBiMjR1YzJWdVpFOXViR2x1WlV0bGVWSmxaMmx6ZEhKaGRHbHZiaWgyYjNSbFMyVjVPaUJpZVhSbGN5d2djMlZzWldOMGFXOXVTMlY1T2lCaWVYUmxjeXdnYzNSaGRHVlFjbTl2Wmt0bGVUb2dZbmwwWlhNc0lIWnZkR1ZHYVhKemREb2dkV2x1ZERZMExDQjJiM1JsVEdGemREb2dkV2x1ZERZMExDQjJiM1JsUzJWNVJHbHNkWFJwYjI0NklIVnBiblEyTkN3Z1ptVmxPaUIxYVc1ME5qUXBJQzArSUdKNWRHVnpPZ3B6Wlc1a1QyNXNhVzVsUzJWNVVtVm5hWE4wY21GMGFXOXVPZ29nSUNBZ0x5OGdjMjFoY25SZlkyOXVkSEpoWTNSekwyZGhjMTl6ZEdGMGFXOXVMMk52Ym5SeVlXTjBMbUZzWjI4dWRITTZNalUzTFRJMk5nb2dJQ0FnTHk4Z1FHRnlZelF1WVdKcGJXVjBhRzlrS0NrS0lDQWdJQzh2SUhCMVlteHBZeUJ6Wlc1a1QyNXNhVzVsUzJWNVVtVm5hWE4wY21GMGFXOXVLQW9nSUNBZ0x5OGdJQ0IyYjNSbFMyVjVPaUJpZVhSbGN5d0tJQ0FnSUM4dklDQWdjMlZzWldOMGFXOXVTMlY1T2lCaWVYUmxjeXdLSUNBZ0lDOHZJQ0FnYzNSaGRHVlFjbTl2Wmt0bGVUb2dZbmwwWlhNc0NpQWdJQ0F2THlBZ0lIWnZkR1ZHYVhKemREb2dkV2x1ZERZMExBb2dJQ0FnTHk4Z0lDQjJiM1JsVEdGemREb2dkV2x1ZERZMExBb2dJQ0FnTHk4Z0lDQjJiM1JsUzJWNVJHbHNkWFJwYjI0NklIVnBiblEyTkN3S0lDQWdJQzh2SUNBZ1ptVmxPaUIxYVc1ME5qUXNDaUFnSUNBdkx5QXBPaUJpZVhSbGN5QjdDaUFnSUNCd2NtOTBieUEzSURFS0lDQWdJQzh2SUhOdFlYSjBYMk52Ym5SeVlXTjBjeTluWVhOZmMzUmhkR2x2Ymk5amIyNTBjbUZqZEM1aGJHZHZMblJ6T2pRMUNpQWdJQ0F2THlCemRYTndaVzVrWldRZ1BTQkhiRzlpWVd4VGRHRjBaVHhpYjI5c1pXRnVQaWg3SUd0bGVUb2dKM01uSUgwcENpQWdJQ0JwYm5Salh6QWdMeThnTUFvZ0lDQWdZbmwwWldOZk1DQXZMeUFpY3lJS0lDQWdJR0Z3Y0Y5bmJHOWlZV3hmWjJWMFgyVjRDaUFnSUNCaGMzTmxjblFnTHk4Z1kyaGxZMnNnUjJ4dlltRnNVM1JoZEdVZ1pYaHBjM1J6Q2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem95TmpjS0lDQWdJQzh2SUdGemMyVnlkQ2doZEdocGN5NXpkWE53Wlc1a1pXUXVkbUZzZFdVc0lDZFVhR1VnYzIxaGNuUWdZMjl1ZEhKaFkzUWdhWE1nYzNWemNHVnVaR1ZrSUdGMElIUm9aU0J0YjIxbGJuUW5LUW9nSUNBZ0lRb2dJQ0FnWVhOelpYSjBJQzh2SUZSb1pTQnpiV0Z5ZENCamIyNTBjbUZqZENCcGN5QnpkWE53Wlc1a1pXUWdZWFFnZEdobElHMXZiV1Z1ZEFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TXpFS0lDQWdJQzh2SUdGa1pISmxjM05WWkhCaGRHVnlJRDBnUjJ4dlltRnNVM1JoZEdVOFFXUmtjbVZ6Y3o0b2V5QnJaWGs2SUNkMUp5QjlLUW9nSUNBZ2FXNTBZMTh3SUM4dklEQUtJQ0FnSUdKNWRHVmpYek1nTHk4Z0luVWlDaUFnSUNCaGNIQmZaMnh2WW1Gc1gyZGxkRjlsZUFvZ0lDQWdZWE56WlhKMElDOHZJR05vWldOcklFZHNiMkpoYkZOMFlYUmxJR1Y0YVhOMGN3b2dJQ0FnTHk4Z2MyMWhjblJmWTI5dWRISmhZM1J6TDJkaGMxOXpkR0YwYVc5dUwyTnZiblJ5WVdOMExtRnNaMjh1ZEhNNk1qWTRDaUFnSUNBdkx5QmhjM05sY25Rb2RHaHBjeTVoWkdSeVpYTnpWV1J3WVhSbGNpNTJZV3gxWlNBOVBUMGdibVYzSUVGa1pISmxjM01vVkhodUxuTmxibVJsY2lrc0lDZFBibXg1SUhWd1pHRjBaWElnWTJGdUlIVnpaU0IwYUdseklHMWxkR2h2WkNjcENpQWdJQ0IwZUc0Z1UyVnVaR1Z5Q2lBZ0lDQTlQUW9nSUNBZ1lYTnpaWEowSUM4dklFOXViSGtnZFhCa1lYUmxjaUJqWVc0Z2RYTmxJSFJvYVhNZ2JXVjBhRzlrQ2lBZ0lDQXZMeUJ6YldGeWRGOWpiMjUwY21GamRITXZaMkZ6WDNOMFlYUnBiMjR2WTI5dWRISmhZM1F1WVd4bmJ5NTBjem95TmprdE1qYzVDaUFnSUNBdkx5QmpiMjV6ZENCcGRIaHVVbVZ6ZFd4MElEMGdhWFI0YmdvZ0lDQWdMeThnSUNBdWEyVjVVbVZuYVhOMGNtRjBhVzl1S0hzS0lDQWdJQzh2SUNBZ0lDQnpaV3hsWTNScGIyNUxaWGs2SUhObGJHVmpkR2x2Ymt0bGVTd0tJQ0FnSUM4dklDQWdJQ0J6ZEdGMFpWQnliMjltUzJWNU9pQnpkR0YwWlZCeWIyOW1TMlY1TEFvZ0lDQWdMeThnSUNBZ0lIWnZkR1ZHYVhKemREb2dkbTkwWlVacGNuTjBMQW9nSUNBZ0x5OGdJQ0FnSUhadmRHVkxaWGxFYVd4MWRHbHZiam9nZG05MFpVdGxlVVJwYkhWMGFXOXVMQW9nSUNBZ0x5OGdJQ0FnSUhadmRHVk1ZWE4wT2lCMmIzUmxUR0Z6ZEN3S0lDQWdJQzh2SUNBZ0lDQjJiM1JsUzJWNU9pQjJiM1JsUzJWNUxBb2dJQ0FnTHk4Z0lDQWdJR1psWlRvZ1ptVmxMQW9nSUNBZ0x5OGdJQ0I5S1FvZ0lDQWdMeThnSUNBdWMzVmliV2wwS0NrS0lDQWdJR2wwZUc1ZlltVm5hVzRLSUNBZ0lHWnlZVzFsWDJScFp5QXROd29nSUNBZ2FYUjRibDltYVdWc1pDQldiM1JsVUVzS0lDQWdJR1p5WVcxbFgyUnBaeUF0TXdvZ0lDQWdhWFI0Ymw5bWFXVnNaQ0JXYjNSbFRHRnpkQW9nSUNBZ1puSmhiV1ZmWkdsbklDMHlDaUFnSUNCcGRIaHVYMlpwWld4a0lGWnZkR1ZMWlhsRWFXeDFkR2x2YmdvZ0lDQWdabkpoYldWZlpHbG5JQzAwQ2lBZ0lDQnBkSGh1WDJacFpXeGtJRlp2ZEdWR2FYSnpkQW9nSUNBZ1puSmhiV1ZmWkdsbklDMDFDaUFnSUNCcGRIaHVYMlpwWld4a0lGTjBZWFJsVUhKdmIyWlFTd29nSUNBZ1puSmhiV1ZmWkdsbklDMDJDaUFnSUNCcGRIaHVYMlpwWld4a0lGTmxiR1ZqZEdsdmJsQkxDaUFnSUNBdkx5QnpiV0Z5ZEY5amIyNTBjbUZqZEhNdloyRnpYM04wWVhScGIyNHZZMjl1ZEhKaFkzUXVZV3huYnk1MGN6b3lOamt0TWpjNENpQWdJQ0F2THlCamIyNXpkQ0JwZEhodVVtVnpkV3gwSUQwZ2FYUjRiZ29nSUNBZ0x5OGdJQ0F1YTJWNVVtVm5hWE4wY21GMGFXOXVLSHNLSUNBZ0lDOHZJQ0FnSUNCelpXeGxZM1JwYjI1TFpYazZJSE5sYkdWamRHbHZia3RsZVN3S0lDQWdJQzh2SUNBZ0lDQnpkR0YwWlZCeWIyOW1TMlY1T2lCemRHRjBaVkJ5YjI5bVMyVjVMQW9nSUNBZ0x5OGdJQ0FnSUhadmRHVkdhWEp6ZERvZ2RtOTBaVVpwY25OMExBb2dJQ0FnTHk4Z0lDQWdJSFp2ZEdWTFpYbEVhV3gxZEdsdmJqb2dkbTkwWlV0bGVVUnBiSFYwYVc5dUxBb2dJQ0FnTHk4Z0lDQWdJSFp2ZEdWTVlYTjBPaUIyYjNSbFRHRnpkQ3dLSUNBZ0lDOHZJQ0FnSUNCMmIzUmxTMlY1T2lCMmIzUmxTMlY1TEFvZ0lDQWdMeThnSUNBZ0lHWmxaVG9nWm1WbExBb2dJQ0FnTHk4Z0lDQjlLUW9nSUNBZ2NIVnphR2x1ZENBeUlDOHZJRElLSUNBZ0lHbDBlRzVmWm1sbGJHUWdWSGx3WlVWdWRXMEtJQ0FnSUdaeVlXMWxYMlJwWnlBdE1Rb2dJQ0FnYVhSNGJsOW1hV1ZzWkNCR1pXVUtJQ0FnSUM4dklITnRZWEowWDJOdmJuUnlZV04wY3k5bllYTmZjM1JoZEdsdmJpOWpiMjUwY21GamRDNWhiR2R2TG5Sek9qSTJPUzB5TnprS0lDQWdJQzh2SUdOdmJuTjBJR2wwZUc1U1pYTjFiSFFnUFNCcGRIaHVDaUFnSUNBdkx5QWdJQzVyWlhsU1pXZHBjM1J5WVhScGIyNG9ld29nSUNBZ0x5OGdJQ0FnSUhObGJHVmpkR2x2Ymt0bGVUb2djMlZzWldOMGFXOXVTMlY1TEFvZ0lDQWdMeThnSUNBZ0lITjBZWFJsVUhKdmIyWkxaWGs2SUhOMFlYUmxVSEp2YjJaTFpYa3NDaUFnSUNBdkx5QWdJQ0FnZG05MFpVWnBjbk4wT2lCMmIzUmxSbWx5YzNRc0NpQWdJQ0F2THlBZ0lDQWdkbTkwWlV0bGVVUnBiSFYwYVc5dU9pQjJiM1JsUzJWNVJHbHNkWFJwYjI0c0NpQWdJQ0F2THlBZ0lDQWdkbTkwWlV4aGMzUTZJSFp2ZEdWTVlYTjBMQW9nSUNBZ0x5OGdJQ0FnSUhadmRHVkxaWGs2SUhadmRHVkxaWGtzQ2lBZ0lDQXZMeUFnSUNBZ1ptVmxPaUJtWldVc0NpQWdJQ0F2THlBZ0lIMHBDaUFnSUNBdkx5QWdJQzV6ZFdKdGFYUW9LUW9nSUNBZ2FYUjRibDl6ZFdKdGFYUUtJQ0FnSUdsMGVHNGdWSGhKUkFvZ0lDQWdMeThnYzIxaGNuUmZZMjl1ZEhKaFkzUnpMMmRoYzE5emRHRjBhVzl1TDJOdmJuUnlZV04wTG1Gc1oyOHVkSE02TWpnd0NpQWdJQ0F2THlCeVpYUjFjbTRnYVhSNGJsSmxjM1ZzZEM1MGVHNUpaQW9nSUNBZ2NtVjBjM1ZpQ2c9PSIsImNsZWFyIjoiSTNCeVlXZHRZU0IyWlhKemFXOXVJREV3Q2lOd2NtRm5iV0VnZEhsd1pYUnlZV05ySUdaaGJITmxDZ292THlCQVlXeG5iM0poYm1SbWIzVnVaR0YwYVc5dUwyRnNaMjl5WVc1a0xYUjVjR1Z6WTNKcGNIUXZZbUZ6WlMxamIyNTBjbUZqZEM1a0xuUnpPanBDWVhObFEyOXVkSEpoWTNRdVkyeGxZWEpUZEdGMFpWQnliMmR5WVcwb0tTQXRQaUIxYVc1ME5qUTZDbTFoYVc0NkNpQWdJQ0J3ZFhOb2FXNTBJREVnTHk4Z01Rb2dJQ0FnY21WMGRYSnVDZz09In0sImJ5dGVDb2RlIjp7ImFwcHJvdmFsIjoiQ2lBRUFBRUlGQ1lIQVhNRUZSOThkUUZqQVhVTFlXeHNSR1Z3YjNOcGRITUJaUVZ6WTNabGNqRVlRQUFvS3pFQVp5Y0dnQk5DU1VGVVJVTXRSMEZUTFRBeExUQXhMVEF4WnljRk1RQm5LQ0puSndRaVp6RWJRUUdGZ2dzRWNLWmVpUVNMR0hzOUJPbWoxcWdFQUpiMU93VFdBaVlQQkVvZHhlZ0VaNUxkSlFRMkplVHJCQmV6clhvRWpUbXNzUVRHSFZiMU5ob0FqZ3NCRWdFREFQSUEzd0RFQUxFQW1BQ0NBRm9BUEFBQ0lrTXhHUlJFTVJoRU5ob0JWd0lBTmhvQ1Z3SUFOaG9EVndJQU5ob0VGellhQlJjMkdnWVhOaG9IRjRnRE4wa1ZGbGNHQWt4UUtVeFFzQ05ETVJrVVJERVlSRFlhQVRZYUFvZ0Nka2tWRmxjR0FreFFLVXhRc0NORE1Sa1VSREVZUkRZYUFSYzJHZ0kyR2dOWEFnQTJHZ1NJQWU1SkZSWlhCZ0pNVUNsTVVMQWpRekVaRkVReEdFUXhGaU1KU1RnUUl4SkVpQUdFSTBNeEdSUkVNUmhFTVJZakNVazRFQ01TUkRZYUFZZ0E2eU5ETVJrVVJERVlSRFlhQVlnQTBpbE1VTEFqUXpFWkZFUXhHRVEyR2dHSUFLdEpGUlpYQmdKTVVDbE1VTEFqUXpFWkZFUXhHRVEyR2dHSUFJTXBURkN3STBNeEdSUkVNUmhFTmhvQklsT0lBRjRqUXpFWkZFUXhHRVEyR2dHSUFENGpRekVaZ1FRU1JERVlSRFlhQVZjQ0FJZ0FHSUFCQUNKUEFsUXBURkN3STBNeEdVRCt5akVZRkVRalE0b0JBU0lyWlVReEFCSkVKd2FMLzJjamlZb0JBQ0lyWlVReEFCSkVKd1dMLzJlSmlnRUFJaXRsUkRFQUVrUW9pLzluaVlvQkFTcUwvMUMrUkZjQUNJbUtBUUVxaS85UXZrUkpKRmxMQVJWU1Z3SUFpWW9CQVNxTC8xQytSSW1LQWdBaUtHVkVGRVNMLzFjQ0FFa1ZSRkVBQVlBQmV4SkVpLzQ0QUl2K09BaEpKUW9KU1U0Q0lpY0VaVVFJSndSTVo0ditPQWN5Q2hKRUtreFFTYjFGQVVFQUtrbStSQ0piaXdBSUZrc0J2a1JNWEFCTEFieElTd0ZNdjBtK1JFa2tXU0pNV0l2L1VFc0J2RWkvaVlzQUZvQUNBQXBRaS85UVRFbThTRXkvaVlvQkFDSW9aVVFVUkl2L09BQ0wvemdJU1NVS0NTSW5CR1ZFU3dFSUp3Uk1aNHYvT0FjeUNoSkVLazhDVUVtOVJRRkVTYjVFSWx0UEFnZ1dTd0crUkV4Y0FFc0J2RWkvaVlvRUFTSW9aVVFVUkNJbkJXVkVNUUFTUkNxTC8xQkp2VVVCUkVtK1JDSmJpL3lCMEE4SURVU3hpLzZ5Qll2OXNnZUwvTElJSTdJUUlySUJzN1FCdEJkTEFyNUVJbHVML0FsUEFvRUNDd2tXU3dLK1JFeGNBRXNDdkVoUEFreS9pWW9DQVNJb1pVUVVSQ3FML2xCSnZVVUJRUUJJaXdCSnZrUWlXNHYvRjBsTEFnNUVURXNCQ1JaTEFyNUVURndBU3dLOFNFOENUTCt4Z0E5MWMyVnlJSGRwZEdoa2NtRjNZV3l5Qll2K3NnZXlDQ095RUNLeUFiTzBGMHlKSWl0bFJERUFFa1F5Q25NQVJDSW5CR1ZFQ1l2L0YwbFBBZzVFc1lBV2MyVnlkbWxqWlNCbVpXVWdkMmwwYUdSeVlYZGhiTElGaS82eUI3SUlJN0lRSXJJQnM3UVhUSW1LQndFaUtHVkVGRVFpSzJWRU1RQVNSTEdMK2JJS2kvMnlEWXYrc2c2TC9MSU1pL3V5UDR2NnNndUJBcklRaS8reUFiTzBGNGs9IiwiY2xlYXIiOiJDb0VCUXc9PSJ9LCJjb21waWxlckluZm8iOnsiY29tcGlsZXIiOiJwdXlhIiwiY29tcGlsZXJWZXJzaW9uIjp7Im1ham9yIjo0LCJtaW5vciI6NywicGF0Y2giOjAsImNvbW1pdEhhc2giOm51bGx9fSwiZXZlbnRzIjpbXSwidGVtcGxhdGVWYXJpYWJsZXMiOnt9LCJzY3JhdGNoVmFyaWFibGVzIjp7fX0=";
    }

}
