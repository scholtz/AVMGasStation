/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getABIStructFromABITuple, getArc56ReturnValue } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientBareCallParams,
  AppClientCompilationParams,
  AppClientMethodCallParams,
  AppClientParams,
  CallOnComplete,
  CloneAppClientParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryDeployParams, AppFactoryParams, AppFactoryResolveAppClientByCreatorAndNameParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { AppMethodCallTransactionArgument, RawSimulateOptions, SimulateOptions, SkipSignaturesSimulateOptions, TransactionComposer } from '@algorandfoundation/algokit-utils/types/composer'
import { SendAtomicTransactionComposerResults, SendParams } from '@algorandfoundation/algokit-utils/types/transaction'
import { modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"GasStation","structs":{"UserStruct":[{"name":"balance","type":"uint64"},{"name":"configuration","type":"string"}]},"methods":[{"name":"updateApplication","args":[{"type":"string","name":"newVersion"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"desc":"addressUdpater from global biatec configuration is allowed to update application","events":[],"recommendations":{}},{"name":"setAddressExecutive","args":[{"type":"address","name":"a","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execution address with which it is possible to fund other addresses","events":[],"recommendations":{}},{"name":"setSuspended","args":[{"type":"bool","name":"isSuspended"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Execution address with which it is possible to fund other addresses","events":[],"recommendations":{}},{"name":"getFunderBalance","args":[{"type":"address","name":"funder","desc":"Funder's address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Readonly method to fetch easily funder's balance","events":[],"recommendations":{}},{"name":"getFunderConfiguration","args":[{"type":"address","name":"funder","desc":"Funder's address"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Readonly method to fetch easily funder's configuration","events":[],"recommendations":{}},{"name":"getFunderBox","args":[{"type":"address","name":"funder","desc":"Funder's address"}],"returns":{"type":"(uint64,string)","struct":"UserStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Readonly method to fetch easily funder's box","events":[],"recommendations":{}},{"name":"depositWithConfiguration","args":[{"type":"pay","name":"txnDeposit","desc":"Deposit transaction"},{"type":"string","name":"configuration","desc":"Configration to be stored into the box"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Gas Funder can set configuration with the deposit tx\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas","events":[],"recommendations":{}},{"name":"deposit","args":[{"type":"pay","name":"txnDeposit","desc":"Deposit transaction"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Gas Funder can deposit more algos to his funder account deposit\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas","events":[],"recommendations":{}},{"name":"fundAccount","args":[{"type":"uint64","name":"amount","desc":"Amout to send"},{"type":"address","name":"receiver","desc":"Receiver"},{"type":"string","name":"note","desc":"Note"},{"type":"address","name":"funder"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Executor can fund the account which needs gas to execute the transaction","events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"address","name":"receiver","desc":"Receiver"},{"type":"uint64","name":"amount","desc":"Amout to send"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Biatec can withdraw service fees. The current balance","events":[],"recommendations":{}},{"name":"sendOnlineKeyRegistration","args":[{"type":"byte[]","name":"voteKey"},{"type":"byte[]","name":"selectionKey"},{"type":"byte[]","name":"stateProofKey"},{"type":"uint64","name":"voteFirst"},{"type":"uint64","name":"voteLast"},{"type":"uint64","name":"voteKeyDilution"},{"type":"uint64","name":"fee"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Updater can perfom key registration for this LP pool","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"allDeposits":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWxsRGVwb3NpdHM="},"addressUdpater":{"keyType":"AVMString","valueType":"address","key":"dQ==","desc":"Top secret multisig account with which it is possible update user contracts or biatec contracts."},"addressExecutive":{"keyType":"AVMString","valueType":"address","key":"ZQ==","desc":"Address which can execute the gas distribution. In possession of the Biatec."},"version":{"keyType":"AVMString","valueType":"AVMString","key":"c2N2ZXI=","desc":"Version of the smart contract"},"suspended":{"keyType":"AVMString","valueType":"AVMUint64","key":"cw==","desc":"Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.\nOnly addressUdpater multisig can modify this setting."}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"configuration":{"keyType":"address","valueType":"UserStruct","prefix":"Yw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[549,562,582,654,664,678,764,774,813,851,867,904,923],"errorMessage":"Box must have value"},{"pc":[600],"errorMessage":"Configuration must be defined"},{"pc":[810],"errorMessage":"Funder box does not exists"},{"pc":[823],"errorMessage":"Funder is out of the deposit"},{"pc":[761],"errorMessage":"Funder must set configuration first"},{"pc":[550],"errorMessage":"Index access is out of bounds"},{"pc":[608],"errorMessage":"Invalid configuration provided"},{"pc":[179,237,267,307,329,354,373,400,419,436],"errorMessage":"OnCompletion is not NoOp"},{"pc":[453],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[500],"errorMessage":"Only addressUdpater setup in the config can update application"},{"pc":[801],"errorMessage":"Only executor can use this method"},{"pc":[518,535],"errorMessage":"Only updater can change addressExecutive"},{"pc":[979,1059],"errorMessage":"Only updater can use this method"},{"pc":[641,752],"errorMessage":"Receiver must be the gas station app"},{"pc":[592,720,792,888,1051],"errorMessage":"The smart contract is suspended at the moment"},{"pc":[914],"errorMessage":"The withdrawal amount cannot be maximum your deposit"},{"pc":[998],"errorMessage":"Withdrawal amount cannot be higher then collected fees"},{"pc":[984],"errorMessage":"account funded"},{"pc":[487],"errorMessage":"can only call when creating"},{"pc":[182,240,270,310,332,357,376,403,422,439,456],"errorMessage":"can only call when not creating"},{"pc":[496,514,531,590,628,718,737,790,797,886,975,989,1049,1055],"errorMessage":"check GlobalState exists"},{"pc":[320,342],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEIFCYHAXMEFR98dQFjAXULYWxsRGVwb3NpdHMBZQVzY3ZlcjEYQAAoKzEAZycGgBNCSUFURUMtR0FTLTAxLTAxLTAxZycFMQBnKCJnJwQiZzEbQQGFggsEcKZeiQSLGHs9BOmj1qgEAJb1OwTWAiYPBEodxegEZ5LdJQQ2JeTrBBezrXoEjTmssQTGHVb1NhoAjgsBEgEDAPIA3wDEALEAmACCAFoAPAACIkMxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEFzYaBRc2GgYXNhoHF4gDN0kVFlcGAkxQKUxQsCNDMRkURDEYRDYaATYaAogCdkkVFlcGAkxQKUxQsCNDMRkURDEYRDYaARc2GgI2GgNXAgA2GgSIAe5JFRZXBgJMUClMULAjQzEZFEQxGEQxFiMJSTgQIxJEiAGEI0MxGRREMRhEMRYjCUk4ECMSRDYaAYgA6yNDMRkURDEYRDYaAYgA0ilMULAjQzEZFEQxGEQ2GgGIAKtJFRZXBgJMUClMULAjQzEZFEQxGEQ2GgGIAIMpTFCwI0MxGRREMRhENhoBIlOIAF4jQzEZFEQxGEQ2GgGIAD4jQzEZgQQSRDEYRDYaAVcCAIgAGIABACJPAlQpTFCwI0MxGUD+yjEYFEQjQ4oBASIrZUQxABJEJwaL/2cjiYoBACIrZUQxABJEJwWL/2eJigEAIitlRDEAEkQoi/9niYoBASqL/1C+RFcACImKAQEqi/9QvkRJJFlLARVSVwIAiYoBASqL/1C+RImKAgAiKGVEFESL/1cCAEkVRFEAAYABexJEi/44AIv+OAhJJQoJSU4CIicEZUQIJwRMZ4v+OAcyChJEKkxQSb1FAUEAKkm+RCJbiwAIFksBvkRMXABLAbxISwFMv0m+REkkWSJMWIv/UEsBvEi/iYsAFoACAApQi/9QTEm8SEy/iYoBACIoZUQURIv/OACL/zgISSUKCSInBGVESwEIJwRMZ4v/OAcyChJEKk8CUEm9RQFESb5EIltPAggWSwG+RExcAEsBvEi/iYoEASIoZUQURCInBWVEMQASRCqL/1BJvUUBREm+RCJbi/yB0A8IDUSxi/6yBYv9sgeL/LIII7IQIrIBs7QBtBdLAr5EIluL/AlPAoECCwkWSwK+RExcAEsCvEhPAky/iYoCASIoZUQURCqL/lBJvUUBQQBIiwBJvkQiW4v/F0lLAg5ETEsBCRZLAr5ETFwASwK8SE8CTL+xgA91c2VyIHdpdGhkcmF3YWyyBYv+sgeyCCOyECKyAbO0F0yJIitlRDEAEkQyCnMARCInBGVECYv/F0lPAg5EsYAWc2VydmljZSBmZWUgd2l0aGRyYXdhbLIFi/6yB7III7IQIrIBs7QXTImKBwEiKGVEFEQiK2VEMQASRLGL+bIKi/2yDYv+sg6L/LIMi/uyP4v6sguBArIQi/+yAbO0F4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type UserStruct = {
  balance: bigint,
  configuration: string
}


/**
 * Converts the ABI tuple representation of a UserStruct to the struct representation
 */
export function UserStructFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserStruct, APP_SPEC.structs) as UserStruct
}

/**
 * The argument types for the GasStation contract
 */
export type GasStationArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'updateApplication(string)bool': {
      newVersion: string
    }
    'setAddressExecutive(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setSuspended(bool)void': {
      isSuspended: boolean
    }
    'getFunderBalance(address)uint64': {
      /**
       * Funder's address
       */
      funder: string
    }
    'getFunderConfiguration(address)string': {
      /**
       * Funder's address
       */
      funder: string
    }
    'getFunderBox(address)(uint64,string)': {
      /**
       * Funder's address
       */
      funder: string
    }
    'depositWithConfiguration(pay,string)void': {
      /**
       * Deposit transaction
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * Configration to be stored into the box
       */
      configuration: string
    }
    'deposit(pay)void': {
      /**
       * Deposit transaction
       */
      txnDeposit: AppMethodCallTransactionArgument
    }
    'fundAccount(uint64,address,string,address)byte[]': {
      /**
       * Amout to send
       */
      amount: bigint | number
      /**
       * Receiver
       */
      receiver: string
      /**
       * Note
       */
      note: string
      funder: string
    }
    'withdraw(address,uint64)byte[]': {
      /**
       * Receiver
       */
      receiver: string
      /**
       * Amout to send
       */
      amount: bigint | number
    }
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': {
      voteKey: Uint8Array
      selectionKey: Uint8Array
      stateProofKey: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'updateApplication(string)bool': [newVersion: string]
    'setAddressExecutive(address)void': [a: string]
    'setSuspended(bool)void': [isSuspended: boolean]
    'getFunderBalance(address)uint64': [funder: string]
    'getFunderConfiguration(address)string': [funder: string]
    'getFunderBox(address)(uint64,string)': [funder: string]
    'depositWithConfiguration(pay,string)void': [txnDeposit: AppMethodCallTransactionArgument, configuration: string]
    'deposit(pay)void': [txnDeposit: AppMethodCallTransactionArgument]
    'fundAccount(uint64,address,string,address)byte[]': [amount: bigint | number, receiver: string, note: string, funder: string]
    'withdraw(address,uint64)byte[]': [receiver: string, amount: bigint | number]
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': [voteKey: Uint8Array, selectionKey: Uint8Array, stateProofKey: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type GasStationReturns = {
  'updateApplication(string)bool': boolean
  'setAddressExecutive(address)void': void
  'setSuspended(bool)void': void
  'getFunderBalance(address)uint64': bigint
  'getFunderConfiguration(address)string': string
  'getFunderBox(address)(uint64,string)': UserStruct
  'depositWithConfiguration(pay,string)void': void
  'deposit(pay)void': void
  'fundAccount(uint64,address,string,address)byte[]': Uint8Array
  'withdraw(address,uint64)byte[]': Uint8Array
  'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the GasStation smart contract.
 */
export type GasStationTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'updateApplication(string)bool' | 'updateApplication', {
      argsObj: GasStationArgs['obj']['updateApplication(string)bool']
      argsTuple: GasStationArgs['tuple']['updateApplication(string)bool']
      returns: GasStationReturns['updateApplication(string)bool']
    }>
    & Record<'setAddressExecutive(address)void' | 'setAddressExecutive', {
      argsObj: GasStationArgs['obj']['setAddressExecutive(address)void']
      argsTuple: GasStationArgs['tuple']['setAddressExecutive(address)void']
      returns: GasStationReturns['setAddressExecutive(address)void']
    }>
    & Record<'setSuspended(bool)void' | 'setSuspended', {
      argsObj: GasStationArgs['obj']['setSuspended(bool)void']
      argsTuple: GasStationArgs['tuple']['setSuspended(bool)void']
      returns: GasStationReturns['setSuspended(bool)void']
    }>
    & Record<'getFunderBalance(address)uint64' | 'getFunderBalance', {
      argsObj: GasStationArgs['obj']['getFunderBalance(address)uint64']
      argsTuple: GasStationArgs['tuple']['getFunderBalance(address)uint64']
      returns: GasStationReturns['getFunderBalance(address)uint64']
    }>
    & Record<'getFunderConfiguration(address)string' | 'getFunderConfiguration', {
      argsObj: GasStationArgs['obj']['getFunderConfiguration(address)string']
      argsTuple: GasStationArgs['tuple']['getFunderConfiguration(address)string']
      returns: GasStationReturns['getFunderConfiguration(address)string']
    }>
    & Record<'getFunderBox(address)(uint64,string)' | 'getFunderBox', {
      argsObj: GasStationArgs['obj']['getFunderBox(address)(uint64,string)']
      argsTuple: GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']
      returns: GasStationReturns['getFunderBox(address)(uint64,string)']
    }>
    & Record<'depositWithConfiguration(pay,string)void' | 'depositWithConfiguration', {
      argsObj: GasStationArgs['obj']['depositWithConfiguration(pay,string)void']
      argsTuple: GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']
      returns: GasStationReturns['depositWithConfiguration(pay,string)void']
    }>
    & Record<'deposit(pay)void' | 'deposit', {
      argsObj: GasStationArgs['obj']['deposit(pay)void']
      argsTuple: GasStationArgs['tuple']['deposit(pay)void']
      returns: GasStationReturns['deposit(pay)void']
    }>
    & Record<'fundAccount(uint64,address,string,address)byte[]' | 'fundAccount', {
      argsObj: GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]']
      argsTuple: GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']
      returns: GasStationReturns['fundAccount(uint64,address,string,address)byte[]']
    }>
    & Record<'withdraw(address,uint64)byte[]' | 'withdraw', {
      argsObj: GasStationArgs['obj']['withdraw(address,uint64)byte[]']
      argsTuple: GasStationArgs['tuple']['withdraw(address,uint64)byte[]']
      returns: GasStationReturns['withdraw(address,uint64)byte[]']
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]' | 'sendOnlineKeyRegistration', {
      argsObj: GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
      argsTuple: GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
      returns: GasStationReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        allDeposits: bigint
        /**
         * Top secret multisig account with which it is possible update user contracts or biatec contracts.
         */
        addressUdpater: string
        /**
         * Address which can execute the gas distribution. In possession of the Biatec.
         */
        addressExecutive: string
        /**
         * Version of the smart contract
         */
        version: string
        /**
        * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
        Only addressUdpater multisig can modify this setting.

         */
        suspended: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        configuration: Map<string, UserStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type GasStationSignatures = keyof GasStationTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GasStationNonVoidMethodSignatures = keyof GasStationTypes['methods'] extends infer T ? T extends keyof GasStationTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the GasStation smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GasStationSignatures> = GasStationTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GasStation smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GasStationSignatures> = GasStationTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = GasStationTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = GasStationTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type GasStationCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type GasStationUpdateCallParams =
  | Expand<CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & {method: 'updateApplication'}>
  | Expand<CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & {method: 'updateApplication(string)bool'}>
/**
 * Defines arguments required for the deploy method.
 */
export type GasStationDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GasStationCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: GasStationUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the GasStation smart contract
 */
export abstract class GasStationParamsFactory {
  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends GasStationUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)bool':
            return GasStationParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the GasStation smart contract using the updateApplication(string)bool ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)bool' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setAddressExecutive(address)void ABI method
   *
   * Execution address with which it is possible to fund other addresses
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressExecutive(params: CallParams<GasStationArgs['obj']['setAddressExecutive(address)void'] | GasStationArgs['tuple']['setAddressExecutive(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressExecutive(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setSuspended(bool)void ABI method
   *
   * Execution address with which it is possible to fund other addresses
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setSuspended(params: CallParams<GasStationArgs['obj']['setSuspended(bool)void'] | GasStationArgs['tuple']['setSuspended(bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setSuspended(bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.isSuspended],
    }
  }
  /**
   * Constructs a no op call for the getFunderBalance(address)uint64 ABI method
   *
   * Readonly method to fetch easily funder's balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFunderBalance(params: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFunderBalance(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.funder],
    }
  }
  /**
   * Constructs a no op call for the getFunderConfiguration(address)string ABI method
   *
   * Readonly method to fetch easily funder's configuration
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFunderConfiguration(params: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFunderConfiguration(address)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.funder],
    }
  }
  /**
   * Constructs a no op call for the getFunderBox(address)(uint64,string) ABI method
   *
   * Readonly method to fetch easily funder's box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getFunderBox(params: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getFunderBox(address)(uint64,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.funder],
    }
  }
  /**
   * Constructs a no op call for the depositWithConfiguration(pay,string)void ABI method
   *
  * Gas Funder can set configuration with the deposit tx
  
  Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositWithConfiguration(params: CallParams<GasStationArgs['obj']['depositWithConfiguration(pay,string)void'] | GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositWithConfiguration(pay,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.configuration],
    }
  }
  /**
   * Constructs a no op call for the deposit(pay)void ABI method
   *
  * Gas Funder can deposit more algos to his funder account deposit
  
  Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deposit(params: CallParams<GasStationArgs['obj']['deposit(pay)void'] | GasStationArgs['tuple']['deposit(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit],
    }
  }
  /**
   * Constructs a no op call for the fundAccount(uint64,address,string,address)byte[] ABI method
   *
   * Executor can fund the account which needs gas to execute the transaction
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundAccount(params: CallParams<GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]'] | GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundAccount(uint64,address,string,address)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.receiver, params.args.note, params.args.funder],
    }
  }
  /**
   * Constructs a no op call for the withdraw(address,uint64)byte[] ABI method
   *
   * Biatec can withdraw service fees. The current balance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<GasStationArgs['obj']['withdraw(address,uint64)byte[]'] | GasStationArgs['tuple']['withdraw(address,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(address,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] ABI method
   *
   * Updater can perfom key registration for this LP pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voteKey, params.args.selectionKey, params.args.stateProofKey, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the GasStation smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GasStationFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GasStationFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GasStationClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GasStationClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the GasStation smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GasStationDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      updateParams: params.updateParams?.method ? GasStationParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (GasStationUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new GasStationClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GasStation smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the GasStation smart contract using the updateApplication(string)bool ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(GasStationParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GasStation smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GasStation smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new GasStationClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the GasStation smart contract
 */
export class GasStationClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GasStationClient`
   *
   * @param appClient An `AppClient` instance which has been created with the GasStation app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GasStationClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GasStationNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GasStationClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GasStationClient> {
    return new GasStationClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GasStationClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GasStationClient> {
    return new GasStationClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the GasStation smart contract using the `updateApplication(string)bool` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
        return this.appClient.params.update(GasStationParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the GasStation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the GasStation smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to fund other addresses
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressExecutive: (params: CallParams<GasStationArgs['obj']['setAddressExecutive(address)void'] | GasStationArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.setAddressExecutive(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `setSuspended(bool)void` ABI method.
     *
     * Execution address with which it is possible to fund other addresses
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setSuspended: (params: CallParams<GasStationArgs['obj']['setSuspended(bool)void'] | GasStationArgs['tuple']['setSuspended(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.setSuspended(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderBalance(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's balance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getFunderBalance: (params: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.getFunderBalance(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderConfiguration(address)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's configuration
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getFunderConfiguration: (params: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.getFunderConfiguration(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderBox(address)(uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getFunderBox: (params: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.getFunderBox(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `depositWithConfiguration(pay,string)void` ABI method.
     *
    * Gas Funder can set configuration with the deposit tx
    
    Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositWithConfiguration: (params: CallParams<GasStationArgs['obj']['depositWithConfiguration(pay,string)void'] | GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.depositWithConfiguration(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `deposit(pay)void` ABI method.
     *
    * Gas Funder can deposit more algos to his funder account deposit
    
    Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deposit: (params: CallParams<GasStationArgs['obj']['deposit(pay)void'] | GasStationArgs['tuple']['deposit(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.deposit(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `fundAccount(uint64,address,string,address)byte[]` ABI method.
     *
     * Executor can fund the account which needs gas to execute the transaction
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundAccount: (params: CallParams<GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]'] | GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.fundAccount(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `withdraw(address,uint64)byte[]` ABI method.
     *
     * Biatec can withdraw service fees. The current balance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<GasStationArgs['obj']['withdraw(address,uint64)byte[]'] | GasStationArgs['tuple']['withdraw(address,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Updater can perfom key registration for this LP pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GasStationParamsFactory.sendOnlineKeyRegistration(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the GasStation smart contract using the `updateApplication(string)bool` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(GasStationParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the GasStation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the GasStation smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to fund other addresses
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressExecutive: (params: CallParams<GasStationArgs['obj']['setAddressExecutive(address)void'] | GasStationArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.setAddressExecutive(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `setSuspended(bool)void` ABI method.
     *
     * Execution address with which it is possible to fund other addresses
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setSuspended: (params: CallParams<GasStationArgs['obj']['setSuspended(bool)void'] | GasStationArgs['tuple']['setSuspended(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.setSuspended(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderBalance(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getFunderBalance: (params: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.getFunderBalance(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderConfiguration(address)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's configuration
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getFunderConfiguration: (params: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.getFunderConfiguration(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderBox(address)(uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getFunderBox: (params: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.getFunderBox(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `depositWithConfiguration(pay,string)void` ABI method.
     *
    * Gas Funder can set configuration with the deposit tx
    
    Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositWithConfiguration: (params: CallParams<GasStationArgs['obj']['depositWithConfiguration(pay,string)void'] | GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.depositWithConfiguration(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `deposit(pay)void` ABI method.
     *
    * Gas Funder can deposit more algos to his funder account deposit
    
    Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deposit: (params: CallParams<GasStationArgs['obj']['deposit(pay)void'] | GasStationArgs['tuple']['deposit(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.deposit(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `fundAccount(uint64,address,string,address)byte[]` ABI method.
     *
     * Executor can fund the account which needs gas to execute the transaction
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundAccount: (params: CallParams<GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]'] | GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.fundAccount(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `withdraw(address,uint64)byte[]` ABI method.
     *
     * Biatec can withdraw service fees. The current balance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<GasStationArgs['obj']['withdraw(address,uint64)byte[]'] | GasStationArgs['tuple']['withdraw(address,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the GasStation smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Updater can perfom key registration for this LP pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GasStationParamsFactory.sendOnlineKeyRegistration(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the GasStation smart contract using the `updateApplication(string)bool` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(GasStationParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | GasStationReturns['updateApplication(string)bool'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the GasStation smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the GasStation smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to fund other addresses
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressExecutive: async (params: CallParams<GasStationArgs['obj']['setAddressExecutive(address)void'] | GasStationArgs['tuple']['setAddressExecutive(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.setAddressExecutive(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['setAddressExecutive(address)void'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `setSuspended(bool)void` ABI method.
     *
     * Execution address with which it is possible to fund other addresses
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setSuspended: async (params: CallParams<GasStationArgs['obj']['setSuspended(bool)void'] | GasStationArgs['tuple']['setSuspended(bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.setSuspended(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['setSuspended(bool)void'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderBalance(address)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's balance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getFunderBalance: async (params: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.getFunderBalance(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['getFunderBalance(address)uint64'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderConfiguration(address)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's configuration
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getFunderConfiguration: async (params: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.getFunderConfiguration(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['getFunderConfiguration(address)string'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `getFunderBox(address)(uint64,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Readonly method to fetch easily funder's box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getFunderBox: async (params: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.getFunderBox(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['getFunderBox(address)(uint64,string)'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `depositWithConfiguration(pay,string)void` ABI method.
     *
    * Gas Funder can set configuration with the deposit tx
    
    Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositWithConfiguration: async (params: CallParams<GasStationArgs['obj']['depositWithConfiguration(pay,string)void'] | GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.depositWithConfiguration(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['depositWithConfiguration(pay,string)void'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `deposit(pay)void` ABI method.
     *
    * Gas Funder can deposit more algos to his funder account deposit
    
    Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deposit: async (params: CallParams<GasStationArgs['obj']['deposit(pay)void'] | GasStationArgs['tuple']['deposit(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.deposit(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['deposit(pay)void'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `fundAccount(uint64,address,string,address)byte[]` ABI method.
     *
     * Executor can fund the account which needs gas to execute the transaction
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundAccount: async (params: CallParams<GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]'] | GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.fundAccount(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['fundAccount(uint64,address,string,address)byte[]'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `withdraw(address,uint64)byte[]` ABI method.
     *
     * Biatec can withdraw service fees. The current balance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<GasStationArgs['obj']['withdraw(address,uint64)byte[]'] | GasStationArgs['tuple']['withdraw(address,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['withdraw(address,uint64)byte[]'])}
    },

    /**
     * Makes a call to the GasStation smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Updater can perfom key registration for this LP pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GasStationParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | GasStationReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GasStationClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the GasStation smart contract using the `getFunderBalance(address)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Readonly method to fetch easily funder's balance
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getFunderBalance(params: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']>) {
    const result = await this.appClient.send.call(GasStationParamsFactory.getFunderBalance(params))
    return result.return as unknown as GasStationReturns['getFunderBalance(address)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the GasStation smart contract using the `getFunderConfiguration(address)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Readonly method to fetch easily funder's configuration
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getFunderConfiguration(params: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']>) {
    const result = await this.appClient.send.call(GasStationParamsFactory.getFunderConfiguration(params))
    return result.return as unknown as GasStationReturns['getFunderConfiguration(address)string']
  }

  /**
   * Makes a readonly (simulated) call to the GasStation smart contract using the `getFunderBox(address)(uint64,string)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Readonly method to fetch easily funder's box
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getFunderBox(params: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']>) {
    const result = await this.appClient.send.call(GasStationParamsFactory.getFunderBox(params))
    return result.return as unknown as GasStationReturns['getFunderBox(address)(uint64,string)']
  }

  /**
   * Methods to access state for the current GasStation app
   */
  state = {
    /**
     * Methods to access global state for the current GasStation app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          allDeposits: result.allDeposits,
          addressUdpater: result.addressUdpater,
          addressExecutive: result.addressExecutive,
          version: result.version,
          suspended: result.suspended,
        }
      },
      /**
       * Get the current value of the allDeposits key in global state
       */
      allDeposits: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("allDeposits")) as bigint | undefined },
      /**
       * Get the current value of the addressUdpater key in global state
       */
      addressUdpater: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressUdpater")) as string | undefined },
      /**
       * Get the current value of the addressExecutive key in global state
       */
      addressExecutive: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressExecutive")) as string | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("version")) as string | undefined },
      /**
       * Get the current value of the suspended key in global state
       */
      suspended: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("suspended")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current GasStation app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the configuration map in box state
       */
      configuration: {
        /**
         * Get all current values of the configuration map in box state
         */
        getMap: async (): Promise<Map<string, UserStruct>> => { return (await this.appClient.state.box.getMap("configuration")) as Map<string, UserStruct> },
        /**
         * Get a current value of the configuration map by key from box state
         */
        value: async (key: string): Promise<UserStruct | undefined> => { return await this.appClient.state.box.getMapValue("configuration", key) as UserStruct | undefined },
      },
    },
  }

  public newGroup(): GasStationComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setAddressExecutive(address)void method call against the GasStation contract
       */
      setAddressExecutive(params: CallParams<GasStationArgs['obj']['setAddressExecutive(address)void'] | GasStationArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressExecutive(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setSuspended(bool)void method call against the GasStation contract
       */
      setSuspended(params: CallParams<GasStationArgs['obj']['setSuspended(bool)void'] | GasStationArgs['tuple']['setSuspended(bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setSuspended(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getFunderBalance(address)uint64 method call against the GasStation contract
       */
      getFunderBalance(params: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFunderBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFunderBalance(address)uint64', v))
        return this
      },
      /**
       * Add a getFunderConfiguration(address)string method call against the GasStation contract
       */
      getFunderConfiguration(params: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFunderConfiguration(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFunderConfiguration(address)string', v))
        return this
      },
      /**
       * Add a getFunderBox(address)(uint64,string) method call against the GasStation contract
       */
      getFunderBox(params: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getFunderBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('getFunderBox(address)(uint64,string)', v))
        return this
      },
      /**
       * Add a depositWithConfiguration(pay,string)void method call against the GasStation contract
       */
      depositWithConfiguration(params: CallParams<GasStationArgs['obj']['depositWithConfiguration(pay,string)void'] | GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositWithConfiguration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deposit(pay)void method call against the GasStation contract
       */
      deposit(params: CallParams<GasStationArgs['obj']['deposit(pay)void'] | GasStationArgs['tuple']['deposit(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deposit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fundAccount(uint64,address,string,address)byte[] method call against the GasStation contract
       */
      fundAccount(params: CallParams<GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]'] | GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundAccount(params)))
        resultMappers.push((v) => client.decodeReturnValue('fundAccount(uint64,address,string,address)byte[]', v))
        return this
      },
      /**
       * Add a withdraw(address,uint64)byte[] method call against the GasStation contract
       */
      withdraw(params: CallParams<GasStationArgs['obj']['withdraw(address,uint64)byte[]'] | GasStationArgs['tuple']['withdraw(address,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdraw(address,uint64)byte[]', v))
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] method call against the GasStation contract
       */
      sendOnlineKeyRegistration(params: CallParams<GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push((v) => client.decodeReturnValue('sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push((v) => client.decodeReturnValue('updateApplication(string)bool', v))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the GasStation contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GasStationComposer
  }
}
export type GasStationComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setAddressExecutive(address)void ABI method.
   *
   * Execution address with which it is possible to fund other addresses
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutive(params?: CallParams<GasStationArgs['obj']['setAddressExecutive(address)void'] | GasStationArgs['tuple']['setAddressExecutive(address)void']>): GasStationComposer<[...TReturns, GasStationReturns['setAddressExecutive(address)void'] | undefined]>

  /**
   * Calls the setSuspended(bool)void ABI method.
   *
   * Execution address with which it is possible to fund other addresses
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSuspended(params?: CallParams<GasStationArgs['obj']['setSuspended(bool)void'] | GasStationArgs['tuple']['setSuspended(bool)void']>): GasStationComposer<[...TReturns, GasStationReturns['setSuspended(bool)void'] | undefined]>

  /**
   * Calls the getFunderBalance(address)uint64 ABI method.
   *
   * Readonly method to fetch easily funder's balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFunderBalance(params?: CallParams<GasStationArgs['obj']['getFunderBalance(address)uint64'] | GasStationArgs['tuple']['getFunderBalance(address)uint64']>): GasStationComposer<[...TReturns, GasStationReturns['getFunderBalance(address)uint64'] | undefined]>

  /**
   * Calls the getFunderConfiguration(address)string ABI method.
   *
   * Readonly method to fetch easily funder's configuration
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFunderConfiguration(params?: CallParams<GasStationArgs['obj']['getFunderConfiguration(address)string'] | GasStationArgs['tuple']['getFunderConfiguration(address)string']>): GasStationComposer<[...TReturns, GasStationReturns['getFunderConfiguration(address)string'] | undefined]>

  /**
   * Calls the getFunderBox(address)(uint64,string) ABI method.
   *
   * Readonly method to fetch easily funder's box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFunderBox(params?: CallParams<GasStationArgs['obj']['getFunderBox(address)(uint64,string)'] | GasStationArgs['tuple']['getFunderBox(address)(uint64,string)']>): GasStationComposer<[...TReturns, GasStationReturns['getFunderBox(address)(uint64,string)'] | undefined]>

  /**
   * Calls the depositWithConfiguration(pay,string)void ABI method.
   *
  * Gas Funder can set configuration with the deposit tx
  
  Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositWithConfiguration(params?: CallParams<GasStationArgs['obj']['depositWithConfiguration(pay,string)void'] | GasStationArgs['tuple']['depositWithConfiguration(pay,string)void']>): GasStationComposer<[...TReturns, GasStationReturns['depositWithConfiguration(pay,string)void'] | undefined]>

  /**
   * Calls the deposit(pay)void ABI method.
   *
  * Gas Funder can deposit more algos to his funder account deposit
  
  Service fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(params?: CallParams<GasStationArgs['obj']['deposit(pay)void'] | GasStationArgs['tuple']['deposit(pay)void']>): GasStationComposer<[...TReturns, GasStationReturns['deposit(pay)void'] | undefined]>

  /**
   * Calls the fundAccount(uint64,address,string,address)byte[] ABI method.
   *
   * Executor can fund the account which needs gas to execute the transaction
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundAccount(params?: CallParams<GasStationArgs['obj']['fundAccount(uint64,address,string,address)byte[]'] | GasStationArgs['tuple']['fundAccount(uint64,address,string,address)byte[]']>): GasStationComposer<[...TReturns, GasStationReturns['fundAccount(uint64,address,string,address)byte[]'] | undefined]>

  /**
   * Calls the withdraw(address,uint64)byte[] ABI method.
   *
   * Biatec can withdraw service fees. The current balance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<GasStationArgs['obj']['withdraw(address,uint64)byte[]'] | GasStationArgs['tuple']['withdraw(address,uint64)byte[]']>): GasStationComposer<[...TReturns, GasStationReturns['withdraw(address,uint64)byte[]'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] ABI method.
   *
   * Updater can perfom key registration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<GasStationArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | GasStationArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']>): GasStationComposer<[...TReturns, GasStationReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the GasStation smart contract using the updateApplication(string)bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<GasStationArgs['obj']['updateApplication(string)bool'] | GasStationArgs['tuple']['updateApplication(string)bool']>): GasStationComposer<[...TReturns, GasStationReturns['updateApplication(string)bool'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the GasStation smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GasStationComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GasStationComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GasStationComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GasStationComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GasStationComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GasStationComposerResults<TReturns>>
}
export type GasStationComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

