{
    "hints": {
        "updateApplication(string)bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "setAddressExecutive(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setSuspended(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getFunderBalance(address)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getFunderConfiguration(address)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getFunderBox(address)(uint64,string)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "UserStruct",
                    "elements": [
                        [
                            "balance",
                            "uint64"
                        ],
                        [
                            "configuration",
                            "string"
                        ]
                    ]
                }
            }
        },
        "depositWithConfiguration(pay,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeConfiguration(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fundAccount(uint64,address,string,address)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(address,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "addressExecutive": {
                    "type": "bytes",
                    "key": "e",
                    "descr": "Address which can execute the gas distribution. In possession of the Biatec."
                },
                "addressUdpater": {
                    "type": "bytes",
                    "key": "u",
                    "descr": "Top secret multisig account with which it is possible update user contracts or biatec contracts."
                },
                "allDeposits": {
                    "type": "uint64",
                    "key": "allDeposits"
                },
                "suspended": {
                    "type": "uint64",
                    "key": "s",
                    "descr": "Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.\nOnly addressUdpater multisig can modify this setting."
                },
                "version": {
                    "type": "bytes",
                    "key": "scver",
                    "descr": "Version of the smart contract"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GasStation",
        "methods": [
            {
                "name": "updateApplication",
                "args": [
                    {
                        "type": "string",
                        "name": "newVersion"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "addressUdpater from global biatec configuration is allowed to update application"
            },
            {
                "name": "setAddressExecutive",
                "args": [
                    {
                        "type": "address",
                        "name": "a",
                        "desc": "Address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Execution address with which it is possible to fund other addresses"
            },
            {
                "name": "setSuspended",
                "args": [
                    {
                        "type": "bool",
                        "name": "isSuspended"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Execution address with which it is possible to fund other addresses"
            },
            {
                "name": "getFunderBalance",
                "args": [
                    {
                        "type": "address",
                        "name": "funder",
                        "desc": "Funder's address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Readonly method to fetch easily funder's balance"
            },
            {
                "name": "getFunderConfiguration",
                "args": [
                    {
                        "type": "address",
                        "name": "funder",
                        "desc": "Funder's address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string"
                },
                "desc": "Readonly method to fetch easily funder's configuration"
            },
            {
                "name": "getFunderBox",
                "args": [
                    {
                        "type": "address",
                        "name": "funder",
                        "desc": "Funder's address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,string)"
                },
                "desc": "Readonly method to fetch easily funder's box"
            },
            {
                "name": "depositWithConfiguration",
                "args": [
                    {
                        "type": "pay",
                        "name": "txnDeposit",
                        "desc": "Deposit transaction"
                    },
                    {
                        "type": "string",
                        "name": "configuration",
                        "desc": "Configration to be stored into the box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Gas Funder can set configuration with the deposit tx\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas"
            },
            {
                "name": "changeConfiguration",
                "args": [
                    {
                        "type": "string",
                        "name": "configuration",
                        "desc": "Configration to be stored into the box"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Gas Funder can set configuration\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas"
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "pay",
                        "name": "txnDeposit",
                        "desc": "Deposit transaction"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Gas Funder can deposit more algos to his funder account deposit\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas"
            },
            {
                "name": "fundAccount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "Amout to send"
                    },
                    {
                        "type": "address",
                        "name": "receiver",
                        "desc": "Receiver"
                    },
                    {
                        "type": "string",
                        "name": "note",
                        "desc": "Note"
                    },
                    {
                        "type": "address",
                        "name": "funder"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "Executor can fund the account which needs gas to execute the transaction"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "address",
                        "name": "receiver",
                        "desc": "Receiver"
                    },
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "Amout to send"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "Biatec can withdraw service fees. The current balance"
            },
            {
                "name": "sendOnlineKeyRegistration",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "voteKey"
                    },
                    {
                        "type": "byte[]",
                        "name": "selectionKey"
                    },
                    {
                        "type": "byte[]",
                        "name": "stateProofKey"
                    },
                    {
                        "type": "uint64",
                        "name": "voteFirst"
                    },
                    {
                        "type": "uint64",
                        "name": "voteLast"
                    },
                    {
                        "type": "uint64",
                        "name": "voteKeyDilution"
                    },
                    {
                        "type": "uint64",
                        "name": "fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "Updater can perfom key registration for this LP pool"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}