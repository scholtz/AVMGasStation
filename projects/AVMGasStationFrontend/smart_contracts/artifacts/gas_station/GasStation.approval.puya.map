{
  "version": 3,
  "sources": [
    "C:/Users/ludko/source/repos/scholtz/AVMGasStationFrontend/projects/AVMGasStationFrontend/smart_contracts/gas_station/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8B+C;AAoBC;;AAA5C;AAZmC;;AAjBvB;;;;;;;;;;;;;;;;;;;;;AA8BZ;AAjB6C;;AAkBC;;AAA9C;AARsC;AASf;AAAvB;AA5BK;;AA6BoB;AAAzB;AA/BJ;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAyOG;;AAAA;AAAA;AAAA;;AAAA;AAzOH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAyOG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAlMH;;;AAAA;;;AAkMG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AA/JH;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA+JG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAvIH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuIG;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAxGH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAwGG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA5FH;;;AA4FG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAlFH;;;AAkFG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAzEH;;;AAyEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA/DH;;;;AAAA;AA+DG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AApDH;;;AAoDG;;;AAAA;;AAfA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AArCH;;;AAAA;;;AAqCG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArCH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAqCE;;;AA9B6C;AAAA;AAAA;AAAA;AAiCK;;AAA9C;AADF;AAxBmC;;AA4BnC;;AAAA;AACO;AAAP;AAQF;;;AA7C6C;AAAA;AAAA;AAAA;AA+CU;;AAA9C;AAAP;AA3C6C;;AA4C7C;;AAAA;;AAQF;;;AAxD6C;AAAA;AAAA;AAAA;AA0DU;;AAA9C;AAAP;AA5CsC;AA6CtC;;AAAA;;AAOF;;;AAxEgE;AAAA;;AAAA;AA0E5B;AAAA;AAAM;;;AAAxC;AAOF;;;AAjFgE;AAAA;;AAAA;AAmF5B;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAc;;;AAAtD;AAQF;;;AA3FgE;AAAA;;AAAA;AA6F5B;AAAA;AAAlC;AAUF;;;AAnFwC;AAAA;AAAA;AAAA;AAqF/B;AAAP;AACkC;;AAAA;;;AAA3B;AAAA;AAAP;AACO;;;AAA+D;;;AAA/D;AAAP;AACI;;AAAqC;;AACV;;AAAA;;AAAzB;AAAkC;AAApB;AACI;AAAlB;AAAA;;AA7GD;AAAA;;AAAA;AAAA;AA+GL;AA/GK;;AA+GL;AAAA;AAEkB;;AAAA;;AAAoB;;AAA/B;AAAP;AAlH8D;AAAA;AAAA;AAAA;AAoH/B;AAAA;;AAA/B;;;AAC8F;AAAA;AAAA;AAAM;AAAQ;AAAnD;;AAAA;AAAZ;AAAhB;;AAAA;AAAA;AAA3B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAC2B;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAGW;;AAAA;AADM;;;;AAAA;AAAA;;AAAA;AAIjB;AAAA;AAAA;;AAAA;AAAA;;AAUJ;;;AAlHwC;AAAA;AAAA;AAAA;AAoH/B;AAAP;AACI;;AAAqC;;AACV;;AAAA;;AAAzB;AAAkC;AAApB;AACI;AA1InB;AAAA;;AAAA;AAAA;AA4IL;;AAAA;AA5IK;;AA4IL;AAAA;AAEkB;;AAAA;;AAAoB;;AAA/B;AAAP;AA/I8D;AAAA;;AAAA;AAiJ5B;AAAA;AAAA;;AAAlC;AAE4F;AAAA;AAAA;AAAM;AAAQ;AAAnD;;AAAA;AAAZ;AAAhB;;AAAA;AAAA;AAA3B;AAAA;;AAAA;;AAAA;;AAAA;;AAWF;;;AA1IwC;AAAA;AAAA;AAAA;AA4I/B;AAAP;AAtJ6C;AAAA;;AAAA;AAAA;AAuJU;;AAAhD;AAAP;AAjK8D;AAAA;;AAAA;AAkK5B;AAAA;AAAA;;AAAlC;AAC2C;AAAA;AAAA;AAAM;AAAQ;AAGxC;;AAAS;;;AAAT;AAAV;AAAP;AAImB;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;;;AAUU;;AAAA;AAAA;AAAM;AAAQ;AAAzC;;AAAA;AAA2D;;AAAiB;;AAAjB;AAA3D;AADyC;AAAhB;;AAAA;AAAA;AAA3B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAIA;AAUF;;;AA7KwC;AAAA;AAAA;AAAA;AA+K/B;AAAP;AAnM8D;AAAA;;AAAA;AAAA;AAqM7B;AAAA;;AAAjC;;;AAE2D;;AAAA;AAAA;AAAA;AAAM;AAAQ;AACzD;;AAAA;AAAP;AAAA;;AAAA;AAAP;AAEyD;AAAA;;AAAA;AAAZ;AAAhB;;AAAA;AAAA;AAA7B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAEmB;AAIT;;;;;;;;;;;;;;;;;;;;;;;;;AAJS;;;AAAA;;;AAAA;;;AAQnB;AAAA;AA9MyC;AAAA;AAAA;AAAA;AAiNY;;AAA9C;AAAP;AACmC;;AAA0B;;AAAA;AAvN1D;AAAA;;AAAA;AAAA;AAuNyB;AACd;;AAAA;AAAP;AAAA;;AAAA;AAAP;AACmB;AAIT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJS;;;AAAA;;;AAAA;;;AAOnB;AAAA;AAOJ;;;AApNwC;AAAA;AAAA;AAAA;AA8N/B;AAAP;AA5O2C;AAAA;AAAA;AAAA;AA6OU;;AAA9C;AAAP;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA;;;AAWnB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 20"
    },
    "7": {
      "op": "bytecblock \"s\" 0x151f7c75 \"c\" \"u\" \"allDeposits\" \"e\" \"scver\""
    },
    "40": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "42": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "45": {
      "op": "bytec_3 // \"u\"",
      "defined_out": [
        "\"u\""
      ],
      "stack_out": [
        "\"u\""
      ]
    },
    "46": {
      "op": "txn Sender",
      "defined_out": [
        "\"u\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"u\"",
        "new_state_value%0#0"
      ]
    },
    "48": {
      "op": "app_global_put",
      "stack_out": []
    },
    "49": {
      "op": "bytec 6 // \"scver\"",
      "defined_out": [
        "\"scver\""
      ],
      "stack_out": [
        "\"scver\""
      ]
    },
    "51": {
      "op": "pushbytes \"BIATEC-GAS-01-01-01\"",
      "defined_out": [
        "\"BIATEC-GAS-01-01-01\"",
        "\"scver\""
      ],
      "stack_out": [
        "\"scver\"",
        "\"BIATEC-GAS-01-01-01\""
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": []
    },
    "73": {
      "op": "bytec 5 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "75": {
      "op": "txn Sender",
      "defined_out": [
        "\"e\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"e\"",
        "new_state_value%1#0"
      ]
    },
    "77": {
      "op": "app_global_put",
      "stack_out": []
    },
    "78": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "79": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "\"s\"",
        "0"
      ]
    },
    "80": {
      "op": "app_global_put",
      "stack_out": []
    },
    "81": {
      "op": "bytec 4 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\""
      ],
      "stack_out": [
        "\"allDeposits\""
      ]
    },
    "83": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"allDeposits\"",
        "0"
      ]
    },
    "84": {
      "op": "app_global_put",
      "stack_out": []
    },
    "85": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "87": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "90": {
      "op": "pushbytess 0x70a65e89 0x8b187b3d 0xe9a3d6a8 0x0096f53b 0xd602260f 0x4a1dc5e8 0x6792dd25 0x3625e4eb 0x17b3ad7a 0x8d39acb1 0xc61d56f5 // method \"updateApplication(string)bool\", method \"setAddressExecutive(address)void\", method \"setSuspended(bool)void\", method \"getFunderBalance(address)uint64\", method \"getFunderConfiguration(address)string\", method \"getFunderBox(address)(uint64,string)\", method \"depositWithConfiguration(pay,string)void\", method \"deposit(pay)void\", method \"fundAccount(uint64,address,string,address)byte[]\", method \"withdraw(address,uint64)byte[]\", method \"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]\"",
      "defined_out": [
        "Method(deposit(pay)void)",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(fundAccount(uint64,address,string,address)byte[])",
        "Method(getFunderBalance(address)uint64)",
        "Method(getFunderBox(address)(uint64,string))",
        "Method(getFunderConfiguration(address)string)",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(updateApplication(string)bool)",
        "Method(withdraw(address,uint64)byte[])"
      ],
      "stack_out": [
        "Method(updateApplication(string)bool)",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(getFunderBalance(address)uint64)",
        "Method(getFunderConfiguration(address)string)",
        "Method(getFunderBox(address)(uint64,string))",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(deposit(pay)void)",
        "Method(fundAccount(uint64,address,string,address)byte[])",
        "Method(withdraw(address,uint64)byte[])",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])"
      ]
    },
    "147": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deposit(pay)void)",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(fundAccount(uint64,address,string,address)byte[])",
        "Method(getFunderBalance(address)uint64)",
        "Method(getFunderBox(address)(uint64,string))",
        "Method(getFunderConfiguration(address)string)",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(updateApplication(string)bool)",
        "Method(withdraw(address,uint64)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(updateApplication(string)bool)",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(getFunderBalance(address)uint64)",
        "Method(getFunderConfiguration(address)string)",
        "Method(getFunderBox(address)(uint64,string))",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(deposit(pay)void)",
        "Method(fundAccount(uint64,address,string,address)byte[])",
        "Method(withdraw(address,uint64)byte[])",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "tmp%2#0"
      ]
    },
    "150": {
      "op": "match main_updateApplication_route@5 main_setAddressExecutive_route@6 main_setSuspended_route@7 main_getFunderBalance_route@8 main_getFunderConfiguration_route@9 main_getFunderBox_route@10 main_depositWithConfiguration_route@11 main_deposit_route@12 main_fundAccount_route@13 main_withdraw_route@14 main_sendOnlineKeyRegistration_route@15",
      "stack_out": []
    },
    "174": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": []
    },
    "176": {
      "block": "main_sendOnlineKeyRegistration_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "183": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "186": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0"
      ]
    },
    "192": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0"
      ]
    },
    "195": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%68#0"
      ]
    },
    "198": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0"
      ]
    },
    "201": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "204": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "205": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "208": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0"
      ]
    },
    "209": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "212": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0"
      ]
    },
    "213": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "216": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "217": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.sendOnlineKeyRegistration",
      "op": "callsub sendOnlineKeyRegistration",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "220": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "221": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length%3#0"
      ]
    },
    "222": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "as_bytes%3#0"
      ]
    },
    "223": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "length_uint16%3#0"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "length_uint16%3#0",
        "to_encode%4#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0"
      ]
    },
    "228": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "0x151f7c75"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%3#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "231": {
      "op": "log",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return",
      "stack_out": []
    },
    "234": {
      "block": "main_withdraw_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "244": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "247": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.withdraw",
      "op": "callsub withdraw",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "250": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "251": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%2#0"
      ]
    },
    "252": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%2#0"
      ]
    },
    "253": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%2#0"
      ]
    },
    "256": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%3#0"
      ]
    },
    "257": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "258": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "260": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "261": {
      "op": "log",
      "stack_out": []
    },
    "262": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "263": {
      "op": "return",
      "stack_out": []
    },
    "264": {
      "block": "main_fundAccount_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "266": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "267": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "268": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "270": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "271": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "274": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "275": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_bytes[32]%4#0",
        "tmp%52#0"
      ]
    },
    "281": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_bytes[32]%4#0",
        "tmp%53#0"
      ]
    },
    "284": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_bytes[32]%4#0",
        "tmp%53#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "287": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.fundAccount",
      "op": "callsub fundAccount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "291": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "292": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "293": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "298": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "300": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "301": {
      "op": "log",
      "stack_out": []
    },
    "302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "303": {
      "op": "return",
      "stack_out": []
    },
    "304": {
      "block": "main_deposit_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "306": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "307": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "308": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "310": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "311": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "313": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "1"
      ]
    },
    "314": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "315": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "316": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "318": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "319": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "320": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "321": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.deposit",
      "op": "callsub deposit",
      "stack_out": []
    },
    "324": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_depositWithConfiguration_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "335": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "1"
      ]
    },
    "336": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "337": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "338": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "340": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "341": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "342": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "343": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%41#0"
      ]
    },
    "346": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.depositWithConfiguration",
      "op": "callsub depositWithConfiguration",
      "stack_out": []
    },
    "349": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "return",
      "stack_out": []
    },
    "351": {
      "block": "main_getFunderBox_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "353": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "354": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "355": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "357": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "358": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "361": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.getFunderBox",
      "op": "callsub getFunderBox",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "364": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "365": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "367": {
      "op": "log",
      "stack_out": []
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "block": "main_getFunderConfiguration_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "377": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "380": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.getFunderConfiguration",
      "op": "callsub getFunderConfiguration",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "383": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "384": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "385": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "386": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "389": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "390": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "391": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "392": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "393": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "394": {
      "op": "log",
      "stack_out": []
    },
    "395": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "396": {
      "op": "return",
      "stack_out": []
    },
    "397": {
      "block": "main_getFunderBalance_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "399": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "400": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "401": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "403": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "404": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "407": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.getFunderBalance",
      "op": "callsub getFunderBalance",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "410": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0x151f7c75"
      ]
    },
    "411": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%23#0"
      ]
    },
    "412": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "413": {
      "op": "log",
      "stack_out": []
    },
    "414": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "block": "main_setSuspended_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "418": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "419": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "420": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "422": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "423": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "426": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "427": {
      "op": "getbit",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "428": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.setSuspended",
      "op": "callsub setSuspended",
      "stack_out": []
    },
    "431": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "return",
      "stack_out": []
    },
    "433": {
      "block": "main_setAddressExecutive_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "435": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "436": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "437": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "439": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "440": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "443": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.setAddressExecutive",
      "op": "callsub setAddressExecutive",
      "stack_out": []
    },
    "446": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "447": {
      "op": "return",
      "stack_out": []
    },
    "448": {
      "block": "main_updateApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "450": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "UpdateApplication"
      ]
    },
    "452": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "460": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "463": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.updateApplication",
      "op": "callsub updateApplication",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "466": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "469": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "470": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "472": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "473": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "476": {
      "op": "log",
      "stack_out": []
    },
    "477": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "478": {
      "op": "return",
      "stack_out": []
    },
    "479": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "481": {
      "op": "bnz main_after_if_else@22",
      "stack_out": []
    },
    "484": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "486": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "487": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "488": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "489": {
      "op": "return",
      "stack_out": []
    },
    "490": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.updateApplication",
      "params": {
        "newVersion#0": "bytes"
      },
      "block": "updateApplication",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "493": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "494": {
      "op": "bytec_3 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "495": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "496": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "497": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "500": {
      "error": "Only addressUdpater setup in the config can update application",
      "op": "assert // Only addressUdpater setup in the config can update application",
      "stack_out": []
    },
    "501": {
      "op": "bytec 6 // \"scver\"",
      "defined_out": [
        "\"scver\""
      ],
      "stack_out": [
        "\"scver\""
      ]
    },
    "503": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"scver\"",
        "newVersion#0 (copy)"
      ],
      "stack_out": [
        "\"scver\"",
        "newVersion#0 (copy)"
      ]
    },
    "505": {
      "op": "app_global_put",
      "stack_out": []
    },
    "506": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "507": {
      "retsub": true,
      "op": "retsub"
    },
    "508": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.setAddressExecutive",
      "params": {
        "a#0": "bytes"
      },
      "block": "setAddressExecutive",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "511": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "512": {
      "op": "bytec_3 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "514": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "515": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "518": {
      "error": "Only updater can change addressExecutive",
      "op": "assert // Only updater can change addressExecutive",
      "stack_out": []
    },
    "519": {
      "op": "bytec 5 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "521": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "a#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "a#0 (copy)"
      ]
    },
    "523": {
      "op": "app_global_put",
      "stack_out": []
    },
    "524": {
      "retsub": true,
      "op": "retsub"
    },
    "525": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.setSuspended",
      "params": {
        "isSuspended#0": "uint64"
      },
      "block": "setSuspended",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "528": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "529": {
      "op": "bytec_3 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "530": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "531": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "532": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "534": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "535": {
      "error": "Only updater can change addressExecutive",
      "op": "assert // Only updater can change addressExecutive",
      "stack_out": []
    },
    "536": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "537": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"s\"",
        "isSuspended#0 (copy)"
      ],
      "stack_out": [
        "\"s\"",
        "isSuspended#0 (copy)"
      ]
    },
    "539": {
      "op": "app_global_put",
      "stack_out": []
    },
    "540": {
      "retsub": true,
      "op": "retsub"
    },
    "541": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.getFunderBalance",
      "params": {
        "funder#0": "bytes"
      },
      "block": "getFunderBalance",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "544": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "\"c\""
      ]
    },
    "545": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c\"",
        "funder#0 (copy)"
      ],
      "stack_out": [
        "\"c\"",
        "funder#0 (copy)"
      ]
    },
    "547": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "548": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "549": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "550": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "553": {
      "retsub": true,
      "op": "retsub"
    },
    "554": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.getFunderConfiguration",
      "params": {
        "funder#0": "bytes"
      },
      "block": "getFunderConfiguration",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "557": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "\"c\""
      ]
    },
    "558": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c\"",
        "funder#0 (copy)"
      ],
      "stack_out": [
        "\"c\"",
        "funder#0 (copy)"
      ]
    },
    "560": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "561": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "562": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "563": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "564": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "8"
      ]
    },
    "565": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item_start_offset%0#0"
      ]
    },
    "566": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "568": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "569": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "570": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "573": {
      "retsub": true,
      "op": "retsub"
    },
    "574": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.getFunderBox",
      "params": {
        "funder#0": "bytes"
      },
      "block": "getFunderBox",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "577": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "\"c\""
      ]
    },
    "578": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c\"",
        "funder#0 (copy)"
      ],
      "stack_out": [
        "\"c\"",
        "funder#0 (copy)"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "581": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "582": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "583": {
      "retsub": true,
      "op": "retsub"
    },
    "584": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.depositWithConfiguration",
      "params": {
        "txnDeposit#0": "uint64",
        "configuration#0": "bytes"
      },
      "block": "depositWithConfiguration",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "587": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "588": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "591": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "592": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "593": {
      "op": "frame_dig -1",
      "defined_out": [
        "configuration#0 (copy)"
      ],
      "stack_out": [
        "configuration#0 (copy)"
      ]
    },
    "595": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "598": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "599": {
      "op": "len",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "600": {
      "error": "Configuration must be defined",
      "op": "assert // Configuration must be defined",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "601": {
      "op": "substring 0 1",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "604": {
      "op": "pushbytes \"{\"",
      "defined_out": [
        "\"{\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "\"{\""
      ]
    },
    "607": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "608": {
      "error": "Invalid configuration provided",
      "op": "assert // Invalid configuration provided",
      "stack_out": []
    },
    "609": {
      "op": "frame_dig -2",
      "defined_out": [
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "611": {
      "op": "gtxns Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "613": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "615": {
      "op": "gtxns Amount",
      "defined_out": [
        "sender#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%7#0"
      ]
    },
    "617": {
      "op": "dup",
      "defined_out": [
        "sender#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "618": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "sender#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "20"
      ]
    },
    "619": {
      "op": "/",
      "defined_out": [
        "fee#0",
        "sender#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%7#0",
        "fee#0"
      ]
    },
    "620": {
      "op": "-",
      "defined_out": [
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "621": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "deposit#0"
      ]
    },
    "622": {
      "op": "cover 2",
      "defined_out": [
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0"
      ]
    },
    "624": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "0"
      ]
    },
    "625": {
      "op": "bytec 4 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\"",
        "0",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "0",
        "\"allDeposits\""
      ]
    },
    "627": {
      "op": "app_global_get_ex",
      "defined_out": [
        "deposit#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "628": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "maybe_value%1#0"
      ]
    },
    "629": {
      "op": "+",
      "defined_out": [
        "deposit#0",
        "new_state_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "new_state_value%0#0"
      ]
    },
    "630": {
      "op": "bytec 4 // \"allDeposits\"",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "new_state_value%0#0",
        "\"allDeposits\""
      ]
    },
    "632": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "\"allDeposits\"",
        "new_state_value%0#0"
      ]
    },
    "633": {
      "op": "app_global_put",
      "stack_out": [
        "deposit#0",
        "sender#0"
      ]
    },
    "634": {
      "op": "frame_dig -2",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "636": {
      "op": "gtxns Receiver",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "tmp%9#0"
      ]
    },
    "638": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "tmp%11#0"
      ]
    },
    "641": {
      "error": "Receiver must be the gas station app",
      "op": "assert // Receiver must be the gas station app",
      "stack_out": [
        "deposit#0",
        "sender#0"
      ]
    },
    "642": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\"",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "\"c\""
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "\"c\"",
        "sender#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0"
      ]
    },
    "645": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%12#0"
      ]
    },
    "646": {
      "op": "box_len",
      "defined_out": [
        "deposit#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "647": {
      "op": "bury 1",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_exists%2#0"
      ]
    },
    "649": {
      "op": "bz depositWithConfiguration_else_body@2",
      "stack_out": [
        "deposit#0",
        "tmp%12#0"
      ]
    },
    "652": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "653": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "654": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%3#0"
      ]
    },
    "655": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "656": {
      "op": "extract_uint64",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "657": {
      "op": "frame_dig 0",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%15#0",
        "deposit#0"
      ]
    },
    "659": {
      "op": "+",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "to_encode%0#0"
      ]
    },
    "660": {
      "op": "itob",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%0#0"
      ]
    },
    "661": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%0#0",
        "tmp%12#0 (copy)"
      ]
    },
    "663": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%12#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "664": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "665": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "666": {
      "op": "replace2 0",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0"
      ]
    },
    "668": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0",
        "tmp%12#0 (copy)"
      ]
    },
    "670": {
      "op": "box_del",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "671": {
      "op": "pop",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0"
      ]
    },
    "672": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%0#0",
        "tmp%12#0 (copy)"
      ]
    },
    "674": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "675": {
      "op": "box_put",
      "stack_out": [
        "deposit#0",
        "tmp%12#0"
      ]
    },
    "676": {
      "op": "dup",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "677": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "678": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%5#0"
      ]
    },
    "679": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "680": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "deposit#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "8"
      ]
    },
    "681": {
      "op": "extract_uint16",
      "defined_out": [
        "deposit#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "item_offset%0#0"
      ]
    },
    "682": {
      "op": "intc_0 // 0"
    },
    "683": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "684": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "deposit#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "data_up_to_item%0#0"
      ]
    },
    "685": {
      "op": "frame_dig -1",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "data_up_to_item%0#0",
        "configuration#0 (copy)"
      ]
    },
    "687": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%1#0"
      ]
    },
    "688": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%1#0",
        "tmp%12#0 (copy)"
      ]
    },
    "690": {
      "op": "box_del",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%1#0",
        "{box_del}"
      ]
    },
    "691": {
      "op": "pop",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "updated_data%1#0"
      ]
    },
    "692": {
      "op": "box_put",
      "stack_out": [
        "deposit#0"
      ]
    },
    "693": {
      "retsub": true,
      "op": "retsub"
    },
    "694": {
      "block": "depositWithConfiguration_else_body@2",
      "stack_in": [
        "deposit#0",
        "tmp%12#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "deposit#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "deposit#0"
      ]
    },
    "696": {
      "op": "itob",
      "defined_out": [
        "deposit#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%1#0"
      ]
    },
    "697": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "deposit#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "val_as_bytes%1#0",
        "0x000a"
      ]
    },
    "701": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "702": {
      "op": "frame_dig -1",
      "defined_out": [
        "configuration#0 (copy)",
        "deposit#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "encoded_tuple_buffer%2#0",
        "configuration#0 (copy)"
      ]
    },
    "704": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "newValue#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "newValue#0"
      ]
    },
    "705": {
      "op": "swap",
      "defined_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0"
      ]
    },
    "706": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "707": {
      "op": "box_del",
      "defined_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0",
        "{box_del}"
      ],
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0",
        "{box_del}"
      ]
    },
    "708": {
      "op": "pop",
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%12#0"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%12#0",
        "newValue#0"
      ]
    },
    "710": {
      "op": "box_put",
      "stack_out": [
        "deposit#0"
      ]
    },
    "711": {
      "retsub": true,
      "op": "retsub"
    },
    "712": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.deposit",
      "params": {
        "txnDeposit#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "715": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "716": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "717": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "718": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "719": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "720": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "721": {
      "op": "frame_dig -1",
      "defined_out": [
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "723": {
      "op": "gtxns Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "725": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "727": {
      "op": "gtxns Amount",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "729": {
      "op": "dup",
      "defined_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "730": {
      "op": "intc_3 // 20",
      "defined_out": [
        "20",
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "20"
      ]
    },
    "731": {
      "op": "/",
      "defined_out": [
        "fee#0",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "fee#0"
      ]
    },
    "732": {
      "op": "-",
      "defined_out": [
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "733": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "0"
      ]
    },
    "734": {
      "op": "bytec 4 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\"",
        "0",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "0",
        "\"allDeposits\""
      ]
    },
    "736": {
      "op": "app_global_get_ex",
      "defined_out": [
        "deposit#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "737": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "maybe_value%1#0"
      ]
    },
    "738": {
      "op": "dig 1",
      "defined_out": [
        "deposit#0",
        "deposit#0 (copy)",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "maybe_value%1#0",
        "deposit#0 (copy)"
      ]
    },
    "740": {
      "op": "+",
      "defined_out": [
        "deposit#0",
        "new_state_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "new_state_value%0#0"
      ]
    },
    "741": {
      "op": "bytec 4 // \"allDeposits\"",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "new_state_value%0#0",
        "\"allDeposits\""
      ]
    },
    "743": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "\"allDeposits\"",
        "new_state_value%0#0"
      ]
    },
    "744": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "745": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "747": {
      "op": "gtxns Receiver",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "tmp%3#0"
      ]
    },
    "749": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "751": {
      "op": "==",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "tmp%5#0"
      ]
    },
    "752": {
      "error": "Receiver must be the gas station app",
      "op": "assert // Receiver must be the gas station app",
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "753": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\"",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "\"c\""
      ]
    },
    "754": {
      "op": "uncover 2",
      "stack_out": [
        "deposit#0",
        "\"c\"",
        "sender#0"
      ]
    },
    "756": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "757": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "758": {
      "op": "box_len",
      "defined_out": [
        "deposit#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "759": {
      "op": "bury 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "761": {
      "error": "Funder must set configuration first",
      "op": "assert // Funder must set configuration first",
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "762": {
      "op": "dup",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "763": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "764": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "766": {
      "op": "extract_uint64",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "767": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "tmp%9#0",
        "deposit#0"
      ]
    },
    "769": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "770": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "771": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "773": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "774": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "775": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "776": {
      "op": "replace2 0",
      "defined_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "778": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "780": {
      "op": "box_del",
      "defined_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "781": {
      "op": "pop",
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "782": {
      "op": "box_put",
      "stack_out": []
    },
    "783": {
      "retsub": true,
      "op": "retsub"
    },
    "784": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.fundAccount",
      "params": {
        "amount#0": "uint64",
        "receiver#0": "bytes",
        "note#0": "bytes",
        "funder#0": "bytes"
      },
      "block": "fundAccount",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "787": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "788": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "789": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "790": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "791": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "792": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "793": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "794": {
      "op": "bytec 5 // \"e\"",
      "defined_out": [
        "\"e\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"e\""
      ]
    },
    "796": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "797": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "798": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "800": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "801": {
      "error": "Only executor can use this method",
      "op": "assert // Only executor can use this method",
      "stack_out": []
    },
    "802": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "\"c\""
      ]
    },
    "803": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c\"",
        "funder#0 (copy)"
      ],
      "stack_out": [
        "\"c\"",
        "funder#0 (copy)"
      ]
    },
    "805": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "806": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "807": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "808": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%2#0"
      ]
    },
    "810": {
      "error": "Funder box does not exists",
      "op": "assert // Funder box does not exists",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "811": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "812": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "813": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0"
      ]
    },
    "814": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "815": {
      "op": "extract_uint64",
      "defined_out": [
        "balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "balance#0"
      ]
    },
    "816": {
      "op": "frame_dig -4",
      "defined_out": [
        "amount#0 (copy)",
        "balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "balance#0",
        "amount#0 (copy)"
      ]
    },
    "818": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "amount#0 (copy)",
        "balance#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "balance#0",
        "amount#0 (copy)",
        "2000"
      ]
    },
    "821": {
      "op": "+",
      "defined_out": [
        "balance#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "balance#0",
        "tmp%6#0"
      ]
    },
    "822": {
      "op": ">",
      "defined_out": [
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "823": {
      "error": "Funder is out of the deposit",
      "op": "assert // Funder is out of the deposit",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "824": {
      "op": "itxn_begin"
    },
    "825": {
      "op": "frame_dig -2",
      "defined_out": [
        "note#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "note#0 (copy)"
      ]
    },
    "827": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "829": {
      "op": "frame_dig -3",
      "defined_out": [
        "receiver#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "receiver#0 (copy)"
      ]
    },
    "831": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "833": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "835": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "837": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "838": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "840": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "841": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "843": {
      "op": "itxn_submit"
    },
    "844": {
      "op": "itxn Fee",
      "defined_out": [
        "itxnResult.Fee#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0"
      ]
    },
    "846": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0"
      ]
    },
    "848": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%3#0 (copy)"
      ]
    },
    "850": {
      "op": "box_get",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "851": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_value%4#0"
      ]
    },
    "852": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "853": {
      "op": "extract_uint64",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%10#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%10#0"
      ]
    },
    "854": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%10#0",
        "amount#0 (copy)"
      ]
    },
    "856": {
      "op": "-",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%11#0"
      ]
    },
    "857": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "itxnResult.Fee#0"
      ]
    },
    "859": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "itxnResult.Fee#0",
        "2"
      ]
    },
    "861": {
      "op": "*",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "862": {
      "op": "-",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "to_encode%0#0"
      ]
    },
    "863": {
      "op": "itob",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0"
      ]
    },
    "864": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "866": {
      "op": "box_get",
      "defined_out": [
        "itxnResult.TxID#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "867": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0",
        "maybe_value%5#0"
      ]
    },
    "868": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "869": {
      "op": "replace2 0",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0"
      ]
    },
    "871": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "873": {
      "op": "box_del",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "874": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0"
      ]
    },
    "875": {
      "op": "uncover 2",
      "stack_out": [
        "itxnResult.TxID#0",
        "updated_data%0#0",
        "tmp%3#0"
      ]
    },
    "877": {
      "op": "swap",
      "stack_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "878": {
      "op": "box_put",
      "stack_out": [
        "itxnResult.TxID#0"
      ]
    },
    "879": {
      "retsub": true,
      "op": "retsub"
    },
    "880": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.withdraw",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "bytes"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "883": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "884": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "885": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "886": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "887": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "888": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "889": {
      "op": "bytec_2 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "\"c\""
      ]
    },
    "890": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"c\"",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "\"c\"",
        "receiver#0 (copy)"
      ]
    },
    "892": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "893": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "894": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "895": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%1#0"
      ]
    },
    "897": {
      "op": "bz withdraw_else_body@3",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "900": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "902": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "903": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "904": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "905": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "906": {
      "op": "extract_uint64",
      "defined_out": [
        "excessBalance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0"
      ]
    },
    "907": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "excessBalance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0",
        "amount#0 (copy)"
      ]
    },
    "909": {
      "op": "btoi",
      "defined_out": [
        "excessBalance#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0",
        "tmp%4#0"
      ]
    },
    "910": {
      "op": "dup",
      "defined_out": [
        "excessBalance#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "911": {
      "op": "dig 2",
      "defined_out": [
        "excessBalance#0",
        "excessBalance#0 (copy)",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "excessBalance#0 (copy)"
      ]
    },
    "913": {
      "op": "<=",
      "defined_out": [
        "excessBalance#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "914": {
      "error": "The withdrawal amount cannot be maximum your deposit",
      "op": "assert // The withdrawal amount cannot be maximum your deposit",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "excessBalance#0",
        "tmp%4#0"
      ]
    },
    "915": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "excessBalance#0"
      ]
    },
    "916": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "excessBalance#0",
        "tmp%4#0 (copy)"
      ]
    },
    "918": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "to_encode%0#0"
      ]
    },
    "919": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "920": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "922": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%1#0",
        "tmp%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "923": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "maybe_value%3#0"
      ]
    },
    "924": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "925": {
      "op": "replace2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0"
      ]
    },
    "927": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "929": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "930": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0"
      ]
    },
    "931": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "updated_data%0#0",
        "tmp%1#0"
      ]
    },
    "933": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "tmp%1#0",
        "updated_data%0#0"
      ]
    },
    "934": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "935": {
      "op": "itxn_begin"
    },
    "936": {
      "op": "pushbytes \"user withdrawal\"",
      "defined_out": [
        "\"user withdrawal\"",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "\"user withdrawal\""
      ]
    },
    "953": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "955": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0",
        "receiver#0 (copy)"
      ]
    },
    "957": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "959": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "961": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "962": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "964": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "965": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "967": {
      "op": "itxn_submit"
    },
    "968": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "itxnResult.TxID#0"
      ]
    },
    "970": {
      "op": "swap"
    },
    "971": {
      "retsub": true,
      "op": "retsub"
    },
    "972": {
      "block": "withdraw_else_body@3",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "973": {
      "op": "bytec_3 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"u\""
      ]
    },
    "974": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "975": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%4#0"
      ]
    },
    "976": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%4#0",
        "tmp%8#0"
      ]
    },
    "978": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "979": {
      "error": "Only updater can use this method",
      "op": "assert // Only updater can use this method",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "980": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%10#0"
      ]
    },
    "982": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "984": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%1#0",
        "value%0#0"
      ]
    },
    "985": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "0"
      ]
    },
    "986": {
      "op": "bytec 4 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\"",
        "0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "0",
        "\"allDeposits\""
      ]
    },
    "988": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "989": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "maybe_value%5#0"
      ]
    },
    "990": {
      "op": "-",
      "defined_out": [
        "excessBalance#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "excessBalance#0"
      ]
    },
    "991": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "excessBalance#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "excessBalance#0",
        "amount#0 (copy)"
      ]
    },
    "993": {
      "op": "btoi",
      "defined_out": [
        "excessBalance#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "excessBalance#0",
        "tmp%11#0"
      ]
    },
    "994": {
      "op": "dup",
      "defined_out": [
        "excessBalance#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "excessBalance#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "995": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "excessBalance#0"
      ]
    },
    "997": {
      "op": "<=",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "998": {
      "error": "Withdrawal amount cannot be higher then collected fees",
      "op": "assert // Withdrawal amount cannot be higher then collected fees",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "999": {
      "op": "itxn_begin"
    },
    "1000": {
      "op": "pushbytes \"service fee withdrawal\"",
      "defined_out": [
        "\"service fee withdrawal\"",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "\"service fee withdrawal\""
      ]
    },
    "1024": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "1026": {
      "op": "frame_dig -2",
      "defined_out": [
        "receiver#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "receiver#0 (copy)"
      ]
    },
    "1028": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0"
      ]
    },
    "1030": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1032": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "1033": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1035": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1036": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1038": {
      "op": "itxn_submit"
    },
    "1039": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult\u2081.TxID#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "itxnResult\u2081.TxID#0"
      ]
    },
    "1041": {
      "op": "swap"
    },
    "1042": {
      "retsub": true,
      "op": "retsub"
    },
    "1043": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.sendOnlineKeyRegistration",
      "params": {
        "voteKey#0": "bytes",
        "selectionKey#0": "bytes",
        "stateProofKey#0": "bytes",
        "voteFirst#0": "uint64",
        "voteLast#0": "uint64",
        "voteKeyDilution#0": "uint64",
        "fee#0": "uint64"
      },
      "block": "sendOnlineKeyRegistration",
      "stack_in": [],
      "op": "proto 7 1"
    },
    "1046": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1047": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "1048": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1049": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1050": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1051": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "1052": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1053": {
      "op": "bytec_3 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "1054": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1055": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1056": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "1058": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1059": {
      "error": "Only updater can use this method",
      "op": "assert // Only updater can use this method",
      "stack_out": []
    },
    "1060": {
      "op": "itxn_begin"
    },
    "1061": {
      "op": "frame_dig -7",
      "defined_out": [
        "voteKey#0 (copy)"
      ],
      "stack_out": [
        "voteKey#0 (copy)"
      ]
    },
    "1063": {
      "op": "itxn_field VotePK",
      "stack_out": []
    },
    "1065": {
      "op": "frame_dig -3",
      "defined_out": [
        "voteLast#0 (copy)"
      ],
      "stack_out": [
        "voteLast#0 (copy)"
      ]
    },
    "1067": {
      "op": "itxn_field VoteLast",
      "stack_out": []
    },
    "1069": {
      "op": "frame_dig -2",
      "defined_out": [
        "voteKeyDilution#0 (copy)"
      ],
      "stack_out": [
        "voteKeyDilution#0 (copy)"
      ]
    },
    "1071": {
      "op": "itxn_field VoteKeyDilution",
      "stack_out": []
    },
    "1073": {
      "op": "frame_dig -4",
      "defined_out": [
        "voteFirst#0 (copy)"
      ],
      "stack_out": [
        "voteFirst#0 (copy)"
      ]
    },
    "1075": {
      "op": "itxn_field VoteFirst",
      "stack_out": []
    },
    "1077": {
      "op": "frame_dig -5",
      "defined_out": [
        "stateProofKey#0 (copy)"
      ],
      "stack_out": [
        "stateProofKey#0 (copy)"
      ]
    },
    "1079": {
      "op": "itxn_field StateProofPK",
      "stack_out": []
    },
    "1081": {
      "op": "frame_dig -6",
      "defined_out": [
        "selectionKey#0 (copy)"
      ],
      "stack_out": [
        "selectionKey#0 (copy)"
      ]
    },
    "1083": {
      "op": "itxn_field SelectionPK",
      "stack_out": []
    },
    "1085": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "1087": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1089": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee#0 (copy)"
      ],
      "stack_out": [
        "fee#0 (copy)"
      ]
    },
    "1091": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1093": {
      "op": "itxn_submit"
    },
    "1094": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.TxID#0"
      ],
      "stack_out": [
        "itxnResult.TxID#0"
      ]
    },
    "1096": {
      "retsub": true,
      "op": "retsub"
    }
  }
}