{
  "version": 3,
  "sources": [
    "C:/Users/ludko/source/repos/scholtz/AVMGasStationFrontend/projects/AVMGasStationFrontend/smart_contracts/gas_station/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6B+C;AAoBC;;AAA5C;AAZmC;;AAjBvB;;;;;;;;;;;;;;;;;;;;;AA8BZ;AAjB6C;;AAkBC;;AAA9C;AARsC;AASf;AAAvB;AA9BJ;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AAoLG;;AAAA;AAAA;AAAA;;AAAA;AApLH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAoLG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAhKH;;;AAAA;AAAA;;AAgKG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAhIH;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAgIG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAxGH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwGG;;;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AA3EH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AA2EG;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA9DH;;;;AAAA;AA8DG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;;AAmDG;;;AAAA;;AAfA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AApCH;;;AAAA;;;AAoCG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApCH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAoCE;;;AA7B6C;AAAA;AAAA;AAAA;AAgCK;;AAA9C;AADF;AAvBmC;;AA2BnC;;AAAA;AACO;AAAP;AAQF;;;AA5C6C;AAAA;AAAA;AAAA;AA8CU;;AAA9C;AAAP;AA1C6C;;AA2C7C;;AAAA;;AAQF;;;AAvD6C;AAAA;AAAA;AAAA;AAyDU;;AAA9C;AAAP;AA3CsC;AA4CtC;;AAAA;;AAUF;;;AAtDwC;AAAA;AAAA;AAAA;AAwD/B;AAAP;AACI;;AAAqC;;AACV;;AAAA;;AAAzB;AAAkC;AAApB;AACI;AAAlB;AAAA;;AA9ED;AAAA;AAAA;AAAA;AAgFL;AAhFK;AAgFL;AAAA;AAEkB;;AAAA;;AAAoB;;AAA/B;AAAP;AAnF8D;;AAAA;AAAA;AAAA;AAqF/B;AAAA;;AAA/B;;;AAC8F;AAAA;AAAA;AAAM;AAAQ;AAAnD;;AAAA;AAAZ;AAAhB;;AAAA;AAAA;AAA3B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAC2B;AAAA;AAAA;AAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAGW;;AAAA;AADM;;;;AAAA;AAAA;;AAAA;AAIjB;AAAA;AAAA;;AAAA;AAAA;;AAUJ;;;AAnFwC;AAAA;AAAA;AAAA;AAqF/B;AAAP;AACI;;AAAqC;;AACV;;AAAA;;AAAzB;AAAkC;AAApB;AACI;AA3GnB;AAAA;AAAA;AAAA;AA6GL;;AAAA;AA7GK;AA6GL;AAAA;AAEkB;;AAAA;;AAAoB;;AAA/B;AAAP;AAhH8D;;AAAA;;AAAA;AAkH5B;AAAA;AAAA;;AAAlC;AAE4F;AAAA;AAAA;AAAM;AAAQ;AAAnD;;AAAA;AAAZ;AAAhB;;AAAA;AAAA;AAA3B;AAAA;;AAAA;;AAAA;;AAAA;;AAWF;;;AA3GwC;AAAA;AAAA;AAAA;AA6G/B;AAAP;AAvH6C;AAAA;;AAAA;AAAA;AAwHU;;AAAhD;AAAP;AAlI8D;;AAAA;;AAAA;AAmI5B;AAAA;AAAA;;AAAlC;AACkC;AAAA;AAAA;AAAM;AAAQ;AAAS;;AAAS;;;AAAT;AAAlD;AAAP;AAImB;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;;;AAUU;;AAAA;AAAA;AAAM;AAAQ;AAAzC;;AAAA;AAA2D;;AAAiB;AAAjB;AAA3D;AADyC;AAAhB;;AAAA;AAAA;AAA3B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAIA;AAUF;;;AA3IwC;AAAA;AAAA;AAAA;AA6I/B;AAAP;AA3J2C;AAAA;AAAA;AAAA;AA4JU;;AAA9C;AAAP;AAEmC;;AAA0B;;AAAA;AAnKxD;AAAA;AAAA;AAAA;AAmKuB;AAET;AAIT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJS;;;AAAA;;;AAAA;;;AAOnB;AAMF;;;AA/JwC;AAAA;AAAA;AAAA;AAyK/B;AAAP;AAvL2C;AAAA;AAAA;AAAA;AAwLU;;AAA9C;AAAP;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAAA;;;AAWnB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 20 2"
    },
    "7": {
      "op": "bytecblock \"s\" \"u\" \"allDeposits\" 0x151f7c75 \"e\" \"c\" \"scver\""
    },
    "40": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "42": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "45": {
      "op": "bytec_1 // \"u\"",
      "defined_out": [
        "\"u\""
      ],
      "stack_out": [
        "\"u\""
      ]
    },
    "46": {
      "op": "txn Sender",
      "defined_out": [
        "\"u\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"u\"",
        "new_state_value%0#0"
      ]
    },
    "48": {
      "op": "app_global_put",
      "stack_out": []
    },
    "49": {
      "op": "bytec 6 // \"scver\"",
      "defined_out": [
        "\"scver\""
      ],
      "stack_out": [
        "\"scver\""
      ]
    },
    "51": {
      "op": "pushbytes \"BIATEC-GAS-01-01-01\"",
      "defined_out": [
        "\"BIATEC-GAS-01-01-01\"",
        "\"scver\""
      ],
      "stack_out": [
        "\"scver\"",
        "\"BIATEC-GAS-01-01-01\""
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": []
    },
    "73": {
      "op": "bytec 4 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "75": {
      "op": "txn Sender",
      "defined_out": [
        "\"e\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"e\"",
        "new_state_value%1#0"
      ]
    },
    "77": {
      "op": "app_global_put",
      "stack_out": []
    },
    "78": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "79": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "\"s\"",
        "0"
      ]
    },
    "80": {
      "op": "app_global_put",
      "stack_out": []
    },
    "81": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "83": {
      "op": "bz main_bare_routing@15",
      "stack_out": []
    },
    "86": {
      "op": "pushbytess 0x70a65e89 0x8b187b3d 0xe9a3d6a8 0x6792dd25 0x3625e4eb 0x5d15f637 0x7c99073a 0xc61d56f5 // method \"updateApplication(string)bool\", method \"setAddressExecutive(address)void\", method \"setSuspended(bool)void\", method \"depositWithConfiguration(pay,string)void\", method \"deposit(pay)void\", method \"fundAccount(uint64,account,string,address)byte[]\", method \"withdraw(account)byte[]\", method \"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]\"",
      "defined_out": [
        "Method(deposit(pay)void)",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(fundAccount(uint64,account,string,address)byte[])",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(updateApplication(string)bool)",
        "Method(withdraw(account)byte[])"
      ],
      "stack_out": [
        "Method(updateApplication(string)bool)",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(deposit(pay)void)",
        "Method(fundAccount(uint64,account,string,address)byte[])",
        "Method(withdraw(account)byte[])",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(deposit(pay)void)",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(fundAccount(uint64,account,string,address)byte[])",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(updateApplication(string)bool)",
        "Method(withdraw(account)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(updateApplication(string)bool)",
        "Method(setAddressExecutive(address)void)",
        "Method(setSuspended(bool)void)",
        "Method(depositWithConfiguration(pay,string)void)",
        "Method(deposit(pay)void)",
        "Method(fundAccount(uint64,account,string,address)byte[])",
        "Method(withdraw(account)byte[])",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "tmp%2#0"
      ]
    },
    "131": {
      "op": "match main_updateApplication_route@5 main_setAddressExecutive_route@6 main_setSuspended_route@7 main_depositWithConfiguration_route@8 main_deposit_route@9 main_fundAccount_route@10 main_withdraw_route@11 main_sendOnlineKeyRegistration_route@12",
      "stack_out": []
    },
    "149": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "150": {
      "op": "return",
      "stack_out": []
    },
    "151": {
      "block": "main_sendOnlineKeyRegistration_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "153": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "154": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "155": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "157": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "158": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "161": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "167": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0"
      ]
    },
    "170": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%55#0"
      ]
    },
    "173": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0"
      ]
    },
    "176": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "179": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "180": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "183": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "184": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "188": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%56#0",
        "tmp%57#0",
        "tmp%58#0",
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "192": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.sendOnlineKeyRegistration",
      "op": "callsub sendOnlineKeyRegistration",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "195": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%2#0"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%2#0"
      ]
    },
    "198": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%2#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "length_uint16%2#0",
        "to_encode%3#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "203": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "0x151f7c75"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%2#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_withdraw_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "220": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "222": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.withdraw",
      "op": "callsub withdraw",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "225": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "226": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "228": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "231": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "232": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "233": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "236": {
      "op": "log",
      "stack_out": []
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "238": {
      "op": "return",
      "stack_out": []
    },
    "239": {
      "block": "main_fundAccount_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "241": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "242": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "243": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "245": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "246": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "249": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "250": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "254": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%34#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%36#0"
      ]
    },
    "256": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%34#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "259": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%34#0",
        "tmp%36#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%36#0",
        "tmp%38#0"
      ]
    },
    "262": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%34#0",
        "tmp%36#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%36#0",
        "tmp%38#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "265": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.fundAccount",
      "op": "callsub fundAccount",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "268": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "269": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "270": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "271": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "274": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "276": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "277": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "278": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "279": {
      "op": "log",
      "stack_out": []
    },
    "280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "281": {
      "op": "return",
      "stack_out": []
    },
    "282": {
      "block": "main_deposit_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "284": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "285": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "286": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "288": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "289": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "291": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "1"
      ]
    },
    "292": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "294": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "296": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "297": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "298": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "299": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.deposit",
      "op": "callsub deposit",
      "stack_out": []
    },
    "302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "303": {
      "op": "return",
      "stack_out": []
    },
    "304": {
      "block": "main_depositWithConfiguration_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "306": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "307": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "308": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "310": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "311": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "313": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "1"
      ]
    },
    "314": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "315": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "316": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "318": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "319": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "320": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "321": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%24#0"
      ]
    },
    "324": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.depositWithConfiguration",
      "op": "callsub depositWithConfiguration",
      "stack_out": []
    },
    "327": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "328": {
      "op": "return",
      "stack_out": []
    },
    "329": {
      "block": "main_setSuspended_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "331": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "332": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "333": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "335": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "336": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "339": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "340": {
      "op": "getbit",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "341": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.setSuspended",
      "op": "callsub setSuspended",
      "stack_out": []
    },
    "344": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "345": {
      "op": "return",
      "stack_out": []
    },
    "346": {
      "block": "main_setAddressExecutive_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "348": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "349": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "350": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "352": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "353": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "356": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.setAddressExecutive",
      "op": "callsub setAddressExecutive",
      "stack_out": []
    },
    "359": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "360": {
      "op": "return",
      "stack_out": []
    },
    "361": {
      "block": "main_updateApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "363": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "UpdateApplication"
      ]
    },
    "365": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "366": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "367": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "369": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "370": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "373": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "376": {
      "callsub": "smart_contracts/gas_station/contract.algo.ts::GasStation.updateApplication",
      "op": "callsub updateApplication",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "379": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "382": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "383": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "385": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "386": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "387": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "388": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "389": {
      "op": "log",
      "stack_out": []
    },
    "390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "391": {
      "op": "return",
      "stack_out": []
    },
    "392": {
      "block": "main_bare_routing@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "394": {
      "op": "bnz main_after_if_else@19",
      "stack_out": []
    },
    "397": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "399": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "400": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.updateApplication",
      "params": {
        "newVersion#0": "bytes"
      },
      "block": "updateApplication",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "406": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "407": {
      "op": "bytec_1 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "408": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "409": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "410": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "412": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "413": {
      "error": "Only addressUdpater setup in the config can update application",
      "op": "assert // Only addressUdpater setup in the config can update application",
      "stack_out": []
    },
    "414": {
      "op": "bytec 6 // \"scver\"",
      "defined_out": [
        "\"scver\""
      ],
      "stack_out": [
        "\"scver\""
      ]
    },
    "416": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"scver\"",
        "newVersion#0 (copy)"
      ],
      "stack_out": [
        "\"scver\"",
        "newVersion#0 (copy)"
      ]
    },
    "418": {
      "op": "app_global_put",
      "stack_out": []
    },
    "419": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "420": {
      "retsub": true,
      "op": "retsub"
    },
    "421": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.setAddressExecutive",
      "params": {
        "a#0": "bytes"
      },
      "block": "setAddressExecutive",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "425": {
      "op": "bytec_1 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "427": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "428": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "431": {
      "error": "Only updater can change addressExecutive",
      "op": "assert // Only updater can change addressExecutive",
      "stack_out": []
    },
    "432": {
      "op": "bytec 4 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "434": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "a#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "a#0 (copy)"
      ]
    },
    "436": {
      "op": "app_global_put",
      "stack_out": []
    },
    "437": {
      "retsub": true,
      "op": "retsub"
    },
    "438": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.setSuspended",
      "params": {
        "isSuspended#0": "uint64"
      },
      "block": "setSuspended",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "441": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "442": {
      "op": "bytec_1 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "443": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "444": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "445": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "447": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "448": {
      "error": "Only updater can change addressExecutive",
      "op": "assert // Only updater can change addressExecutive",
      "stack_out": []
    },
    "449": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "\"s\""
      ]
    },
    "450": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"s\"",
        "isSuspended#0 (copy)"
      ],
      "stack_out": [
        "\"s\"",
        "isSuspended#0 (copy)"
      ]
    },
    "452": {
      "op": "app_global_put",
      "stack_out": []
    },
    "453": {
      "retsub": true,
      "op": "retsub"
    },
    "454": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.depositWithConfiguration",
      "params": {
        "txnDeposit#0": "uint64",
        "configuration#0": "bytes"
      },
      "block": "depositWithConfiguration",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "457": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "458": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "459": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "460": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "461": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "463": {
      "op": "frame_dig -2",
      "defined_out": [
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "465": {
      "op": "gtxns Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "467": {
      "op": "frame_dig -2",
      "stack_out": [
        "sender#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "469": {
      "op": "gtxns Amount",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "471": {
      "op": "dup",
      "defined_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "472": {
      "op": "intc_2 // 20",
      "defined_out": [
        "20",
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "20"
      ]
    },
    "473": {
      "op": "/",
      "defined_out": [
        "fee#0",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "fee#0"
      ]
    },
    "474": {
      "op": "-",
      "defined_out": [
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "475": {
      "op": "dup",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "deposit#0"
      ]
    },
    "476": {
      "op": "cover 2",
      "defined_out": [
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "0"
      ]
    },
    "479": {
      "op": "bytec_2 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\"",
        "0",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "0",
        "\"allDeposits\""
      ]
    },
    "480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "deposit#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "481": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "deposit#0",
        "maybe_value%1#0"
      ]
    },
    "482": {
      "op": "+",
      "defined_out": [
        "deposit#0",
        "new_state_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "new_state_value%0#0"
      ]
    },
    "483": {
      "op": "bytec_2 // \"allDeposits\"",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "new_state_value%0#0",
        "\"allDeposits\""
      ]
    },
    "484": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "\"allDeposits\"",
        "new_state_value%0#0"
      ]
    },
    "485": {
      "op": "app_global_put",
      "stack_out": [
        "deposit#0",
        "sender#0"
      ]
    },
    "486": {
      "op": "frame_dig -2",
      "stack_out": [
        "deposit#0",
        "sender#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "488": {
      "op": "gtxns Receiver",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0"
      ]
    },
    "490": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "492": {
      "op": "==",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "tmp%5#0"
      ]
    },
    "493": {
      "error": "Receiver must be the gas station app",
      "op": "assert // Receiver must be the gas station app",
      "stack_out": [
        "deposit#0",
        "sender#0"
      ]
    },
    "494": {
      "op": "bytec 5 // \"c\"",
      "defined_out": [
        "\"c\"",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "deposit#0",
        "sender#0",
        "\"c\""
      ]
    },
    "496": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "\"c\"",
        "sender#0"
      ]
    },
    "497": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "498": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "499": {
      "op": "box_len",
      "defined_out": [
        "deposit#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "500": {
      "op": "bury 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "502": {
      "op": "bz depositWithConfiguration_else_body@2",
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "505": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "506": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "507": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "509": {
      "op": "extract_uint64",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "510": {
      "op": "frame_dig 0",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0",
        "deposit#0"
      ]
    },
    "512": {
      "op": "+",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "513": {
      "op": "itob",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "514": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "516": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "517": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "518": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "519": {
      "op": "replace2 0",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "521": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "523": {
      "op": "box_del",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "524": {
      "op": "pop",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "525": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "527": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "528": {
      "op": "box_put",
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "529": {
      "op": "dup",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "530": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "531": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%5#0"
      ]
    },
    "532": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "533": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "deposit#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "8"
      ]
    },
    "535": {
      "op": "extract_uint16",
      "defined_out": [
        "deposit#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "item_offset%0#0"
      ]
    },
    "536": {
      "op": "intc_0 // 0"
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%5#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "538": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "deposit#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "data_up_to_item%0#0"
      ]
    },
    "539": {
      "op": "frame_dig -1",
      "defined_out": [
        "configuration#0 (copy)",
        "data_up_to_item%0#0",
        "deposit#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "data_up_to_item%0#0",
        "configuration#0 (copy)"
      ]
    },
    "541": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%1#0"
      ]
    },
    "542": {
      "op": "dig 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%1#0",
        "tmp%6#0 (copy)"
      ]
    },
    "544": {
      "op": "box_del",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%1#0",
        "{box_del}"
      ]
    },
    "545": {
      "op": "pop",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "updated_data%1#0"
      ]
    },
    "546": {
      "op": "box_put",
      "stack_out": [
        "deposit#0"
      ]
    },
    "547": {
      "retsub": true,
      "op": "retsub"
    },
    "548": {
      "block": "depositWithConfiguration_else_body@2",
      "stack_in": [
        "deposit#0",
        "tmp%6#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "deposit#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "deposit#0"
      ]
    },
    "550": {
      "op": "itob",
      "defined_out": [
        "deposit#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "551": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "deposit#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "val_as_bytes%1#0",
        "0x000a"
      ]
    },
    "555": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "556": {
      "op": "frame_dig -1",
      "defined_out": [
        "configuration#0 (copy)",
        "deposit#0",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "encoded_tuple_buffer%2#0",
        "configuration#0 (copy)"
      ]
    },
    "558": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "newValue#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "newValue#0"
      ]
    },
    "559": {
      "op": "swap",
      "defined_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0"
      ]
    },
    "560": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "561": {
      "op": "box_del",
      "defined_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "562": {
      "op": "pop",
      "stack_out": [
        "deposit#0",
        "newValue#0",
        "tmp%6#0"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "newValue#0"
      ]
    },
    "564": {
      "op": "box_put",
      "stack_out": [
        "deposit#0"
      ]
    },
    "565": {
      "retsub": true,
      "op": "retsub"
    },
    "566": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.deposit",
      "params": {
        "txnDeposit#0": "uint64"
      },
      "block": "deposit",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "569": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "570": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "573": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "574": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "575": {
      "op": "frame_dig -1",
      "defined_out": [
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "577": {
      "op": "gtxns Sender",
      "defined_out": [
        "sender#0"
      ],
      "stack_out": [
        "sender#0"
      ]
    },
    "579": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "581": {
      "op": "gtxns Amount",
      "defined_out": [
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0"
      ]
    },
    "583": {
      "op": "dup",
      "defined_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "584": {
      "op": "intc_2 // 20",
      "defined_out": [
        "20",
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "20"
      ]
    },
    "585": {
      "op": "/",
      "defined_out": [
        "fee#0",
        "sender#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "sender#0",
        "tmp%1#0",
        "fee#0"
      ]
    },
    "586": {
      "op": "-",
      "defined_out": [
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "0"
      ]
    },
    "588": {
      "op": "bytec_2 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\"",
        "0",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "0",
        "\"allDeposits\""
      ]
    },
    "589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "deposit#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "maybe_value%1#0"
      ]
    },
    "591": {
      "op": "dig 1",
      "defined_out": [
        "deposit#0",
        "deposit#0 (copy)",
        "maybe_value%1#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "maybe_value%1#0",
        "deposit#0 (copy)"
      ]
    },
    "593": {
      "op": "+",
      "defined_out": [
        "deposit#0",
        "new_state_value%0#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "new_state_value%0#0"
      ]
    },
    "594": {
      "op": "bytec_2 // \"allDeposits\"",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "new_state_value%0#0",
        "\"allDeposits\""
      ]
    },
    "595": {
      "op": "swap",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "\"allDeposits\"",
        "new_state_value%0#0"
      ]
    },
    "596": {
      "op": "app_global_put",
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "597": {
      "op": "frame_dig -1",
      "stack_out": [
        "sender#0",
        "deposit#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "599": {
      "op": "gtxns Receiver",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "tmp%3#0"
      ]
    },
    "601": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "603": {
      "op": "==",
      "defined_out": [
        "deposit#0",
        "sender#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "tmp%5#0"
      ]
    },
    "604": {
      "error": "Receiver must be the gas station app",
      "op": "assert // Receiver must be the gas station app",
      "stack_out": [
        "sender#0",
        "deposit#0"
      ]
    },
    "605": {
      "op": "bytec 5 // \"c\"",
      "defined_out": [
        "\"c\"",
        "deposit#0",
        "sender#0"
      ],
      "stack_out": [
        "sender#0",
        "deposit#0",
        "\"c\""
      ]
    },
    "607": {
      "op": "uncover 2",
      "stack_out": [
        "deposit#0",
        "\"c\"",
        "sender#0"
      ]
    },
    "609": {
      "op": "concat",
      "defined_out": [
        "deposit#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "610": {
      "op": "dup",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "611": {
      "op": "box_len",
      "defined_out": [
        "deposit#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "612": {
      "op": "bury 1",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "614": {
      "error": "Funder must set configuration first",
      "op": "assert // Funder must set configuration first",
      "stack_out": [
        "deposit#0",
        "tmp%6#0"
      ]
    },
    "615": {
      "op": "dup",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "616": {
      "op": "box_get",
      "defined_out": [
        "deposit#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "617": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "618": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "619": {
      "op": "extract_uint64",
      "defined_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "deposit#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "620": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "tmp%9#0",
        "deposit#0"
      ]
    },
    "622": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "to_encode%0#0"
      ]
    },
    "623": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "624": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "626": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "627": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%6#0",
        "val_as_bytes%0#0",
        "maybe_value%4#0"
      ]
    },
    "628": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "629": {
      "op": "replace2 0",
      "defined_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "631": {
      "op": "dig 1",
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "tmp%6#0 (copy)"
      ]
    },
    "633": {
      "op": "box_del",
      "defined_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "634": {
      "op": "pop",
      "stack_out": [
        "tmp%6#0",
        "updated_data%0#0"
      ]
    },
    "635": {
      "op": "box_put",
      "stack_out": []
    },
    "636": {
      "retsub": true,
      "op": "retsub"
    },
    "637": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.fundAccount",
      "params": {
        "amount#0": "uint64",
        "receiver#0": "bytes",
        "note#0": "bytes",
        "funder#0": "bytes"
      },
      "block": "fundAccount",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "640": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "641": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "642": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "643": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "644": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "645": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "646": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "647": {
      "op": "bytec 4 // \"e\"",
      "defined_out": [
        "\"e\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"e\""
      ]
    },
    "649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "650": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "651": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "653": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "654": {
      "error": "Only executor can use this method",
      "op": "assert // Only executor can use this method",
      "stack_out": []
    },
    "655": {
      "op": "bytec 5 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "\"c\""
      ]
    },
    "657": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"c\"",
        "funder#0 (copy)"
      ],
      "stack_out": [
        "\"c\"",
        "funder#0 (copy)"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "660": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "661": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "662": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%2#0"
      ]
    },
    "664": {
      "error": "Funder box does not exists",
      "op": "assert // Funder box does not exists",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "665": {
      "op": "dup",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "666": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "667": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0"
      ]
    },
    "668": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "669": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "670": {
      "op": "frame_dig -4",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "672": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "amount#0 (copy)",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "amount#0 (copy)",
        "2000"
      ]
    },
    "675": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "676": {
      "op": "<",
      "defined_out": [
        "tmp%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "677": {
      "error": "Funder is out of the deposit",
      "op": "assert // Funder is out of the deposit",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "678": {
      "op": "itxn_begin"
    },
    "679": {
      "op": "frame_dig -2",
      "defined_out": [
        "note#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "note#0 (copy)"
      ]
    },
    "681": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "683": {
      "op": "frame_dig -3",
      "defined_out": [
        "receiver#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "receiver#0 (copy)"
      ]
    },
    "685": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "687": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "689": {
      "op": "itxn_field Amount",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "691": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "692": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "694": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "695": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "697": {
      "op": "itxn_submit"
    },
    "698": {
      "op": "itxn Fee",
      "defined_out": [
        "itxnResult.Fee#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0"
      ]
    },
    "700": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0"
      ]
    },
    "702": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%3#0 (copy)"
      ]
    },
    "704": {
      "op": "box_get",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "705": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_value%4#0"
      ]
    },
    "706": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "707": {
      "op": "extract_uint64",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%11#0"
      ]
    },
    "708": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%11#0",
        "amount#0 (copy)"
      ]
    },
    "710": {
      "op": "-",
      "defined_out": [
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%12#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%12#0"
      ]
    },
    "711": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "tmp%12#0",
        "itxnResult.Fee#0"
      ]
    },
    "713": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "itxnResult.Fee#0",
        "itxnResult.TxID#0",
        "tmp%12#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "tmp%12#0",
        "itxnResult.Fee#0",
        "2"
      ]
    },
    "714": {
      "op": "*",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "715": {
      "op": "-",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "to_encode%0#0"
      ]
    },
    "716": {
      "op": "itob",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0"
      ]
    },
    "717": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "719": {
      "op": "box_get",
      "defined_out": [
        "itxnResult.TxID#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "720": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "val_as_bytes%0#0",
        "maybe_value%5#0"
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "maybe_value%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "722": {
      "op": "replace2 0",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0"
      ]
    },
    "724": {
      "op": "dig 2",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "726": {
      "op": "box_del",
      "defined_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "727": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "itxnResult.TxID#0",
        "updated_data%0#0"
      ]
    },
    "728": {
      "op": "uncover 2",
      "stack_out": [
        "itxnResult.TxID#0",
        "updated_data%0#0",
        "tmp%3#0"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "itxnResult.TxID#0",
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "731": {
      "op": "box_put",
      "stack_out": [
        "itxnResult.TxID#0"
      ]
    },
    "732": {
      "retsub": true,
      "op": "retsub"
    },
    "733": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.withdraw",
      "params": {
        "receiver#0": "bytes"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "736": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "737": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "738": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "739": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "740": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "741": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "742": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "743": {
      "op": "bytec_1 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "744": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "745": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "746": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "748": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "749": {
      "error": "Only updater can use this method",
      "op": "assert // Only updater can use this method",
      "stack_out": []
    },
    "750": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "752": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "754": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "755": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%0#0",
        "0"
      ]
    },
    "756": {
      "op": "bytec_2 // \"allDeposits\"",
      "defined_out": [
        "\"allDeposits\"",
        "0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "0",
        "\"allDeposits\""
      ]
    },
    "757": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "758": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value%0#0",
        "maybe_value%2#0"
      ]
    },
    "759": {
      "op": "-",
      "defined_out": [
        "excessBalance#0"
      ],
      "stack_out": [
        "excessBalance#0"
      ]
    },
    "760": {
      "op": "itxn_begin"
    },
    "761": {
      "op": "pushbytes \"service fee withdrawal\"",
      "defined_out": [
        "\"service fee withdrawal\"",
        "excessBalance#0"
      ],
      "stack_out": [
        "excessBalance#0",
        "\"service fee withdrawal\""
      ]
    },
    "785": {
      "op": "itxn_field Note",
      "stack_out": [
        "excessBalance#0"
      ]
    },
    "787": {
      "op": "frame_dig -1",
      "defined_out": [
        "excessBalance#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "excessBalance#0",
        "receiver#0 (copy)"
      ]
    },
    "789": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "excessBalance#0"
      ]
    },
    "791": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "793": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "794": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "796": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "797": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "799": {
      "op": "itxn_submit"
    },
    "800": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.TxID#0"
      ],
      "stack_out": [
        "itxnResult.TxID#0"
      ]
    },
    "802": {
      "retsub": true,
      "op": "retsub"
    },
    "803": {
      "subroutine": "smart_contracts/gas_station/contract.algo.ts::GasStation.sendOnlineKeyRegistration",
      "params": {
        "voteKey#0": "bytes",
        "selectionKey#0": "bytes",
        "stateProofKey#0": "bytes",
        "voteFirst#0": "uint64",
        "voteLast#0": "uint64",
        "voteKeyDilution#0": "uint64",
        "fee#0": "uint64"
      },
      "block": "sendOnlineKeyRegistration",
      "stack_in": [],
      "op": "proto 7 1"
    },
    "806": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "807": {
      "op": "bytec_0 // \"s\"",
      "defined_out": [
        "\"s\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"s\""
      ]
    },
    "808": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "809": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "810": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "811": {
      "error": "The smart contract is suspended at the moment",
      "op": "assert // The smart contract is suspended at the moment",
      "stack_out": []
    },
    "812": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "813": {
      "op": "bytec_1 // \"u\"",
      "defined_out": [
        "\"u\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"u\""
      ]
    },
    "814": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "815": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "816": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "818": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "819": {
      "error": "Only updater can use this method",
      "op": "assert // Only updater can use this method",
      "stack_out": []
    },
    "820": {
      "op": "itxn_begin"
    },
    "821": {
      "op": "frame_dig -7",
      "defined_out": [
        "voteKey#0 (copy)"
      ],
      "stack_out": [
        "voteKey#0 (copy)"
      ]
    },
    "823": {
      "op": "itxn_field VotePK",
      "stack_out": []
    },
    "825": {
      "op": "frame_dig -3",
      "defined_out": [
        "voteLast#0 (copy)"
      ],
      "stack_out": [
        "voteLast#0 (copy)"
      ]
    },
    "827": {
      "op": "itxn_field VoteLast",
      "stack_out": []
    },
    "829": {
      "op": "frame_dig -2",
      "defined_out": [
        "voteKeyDilution#0 (copy)"
      ],
      "stack_out": [
        "voteKeyDilution#0 (copy)"
      ]
    },
    "831": {
      "op": "itxn_field VoteKeyDilution",
      "stack_out": []
    },
    "833": {
      "op": "frame_dig -4",
      "defined_out": [
        "voteFirst#0 (copy)"
      ],
      "stack_out": [
        "voteFirst#0 (copy)"
      ]
    },
    "835": {
      "op": "itxn_field VoteFirst",
      "stack_out": []
    },
    "837": {
      "op": "frame_dig -5",
      "defined_out": [
        "stateProofKey#0 (copy)"
      ],
      "stack_out": [
        "stateProofKey#0 (copy)"
      ]
    },
    "839": {
      "op": "itxn_field StateProofPK",
      "stack_out": []
    },
    "841": {
      "op": "frame_dig -6",
      "defined_out": [
        "selectionKey#0 (copy)"
      ],
      "stack_out": [
        "selectionKey#0 (copy)"
      ]
    },
    "843": {
      "op": "itxn_field SelectionPK",
      "stack_out": []
    },
    "845": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "846": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "848": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee#0 (copy)"
      ],
      "stack_out": [
        "fee#0 (copy)"
      ]
    },
    "850": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "852": {
      "op": "itxn_submit"
    },
    "853": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.TxID#0"
      ],
      "stack_out": [
        "itxnResult.TxID#0"
      ]
    },
    "855": {
      "retsub": true,
      "op": "retsub"
    }
  }
}