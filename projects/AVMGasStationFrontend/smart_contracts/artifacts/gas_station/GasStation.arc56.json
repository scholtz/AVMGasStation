{
    "name": "GasStation",
    "structs": {
        "UserStruct": [
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "configuration",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "updateApplication",
            "args": [
                {
                    "type": "string",
                    "name": "newVersion"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "desc": "addressUdpater from global biatec configuration is allowed to update application",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAddressExecutive",
            "args": [
                {
                    "type": "address",
                    "name": "a",
                    "desc": "Address"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Execution address with which it is possible to fund other addresses",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setSuspended",
            "args": [
                {
                    "type": "bool",
                    "name": "isSuspended"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Execution address with which it is possible to fund other addresses",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "depositWithConfiguration",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit transaction"
                },
                {
                    "type": "string",
                    "name": "configuration",
                    "desc": "Configration to be stored into the box"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Gas Funder can set configuration with the deposit tx\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Gas Funder can deposit more algos to his funder account deposit\n\nService fee is 5% and is deducted on deposit, on deposit of 100 Algo, user receives 95 Algo credit for his users to use for gas",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fundAccount",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount",
                    "desc": "Amout to send"
                },
                {
                    "type": "account",
                    "name": "receiver",
                    "desc": "Receiver"
                },
                {
                    "type": "string",
                    "name": "note",
                    "desc": "Note"
                },
                {
                    "type": "address",
                    "name": "funder"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Executor can fund the account which needs gas to execute the transaction",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "account",
                    "name": "receiver",
                    "desc": "Receiver"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Biatec can withdraw service fees. The current balance",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sendOnlineKeyRegistration",
            "args": [
                {
                    "type": "byte[]",
                    "name": "voteKey"
                },
                {
                    "type": "byte[]",
                    "name": "selectionKey"
                },
                {
                    "type": "byte[]",
                    "name": "stateProofKey"
                },
                {
                    "type": "uint64",
                    "name": "voteFirst"
                },
                {
                    "type": "uint64",
                    "name": "voteLast"
                },
                {
                    "type": "uint64",
                    "name": "voteKeyDilution"
                },
                {
                    "type": "uint64",
                    "name": "fee"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Updater can perfom key registration for this LP pool",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "allDeposits": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWxsRGVwb3NpdHM="
                },
                "addressUdpater": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "dQ==",
                    "desc": "Top secret multisig account with which it is possible update user contracts or biatec contracts."
                },
                "addressExecutive": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "ZQ==",
                    "desc": "Address which can execute the gas distribution. In possession of the Biatec."
                },
                "version": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "c2N2ZXI=",
                    "desc": "Version of the smart contract"
                },
                "suspended": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cw==",
                    "desc": "Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.\nOnly addressUdpater multisig can modify this setting."
                }
            },
            "local": {},
            "box": {
                "configuration": {
                    "keyType": "AVMString",
                    "valueType": "UserStruct",
                    "key": "Yw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        507,
                        517,
                        531,
                        617,
                        627,
                        667,
                        705,
                        720
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        664
                    ],
                    "errorMessage": "Funder box does not exists"
                },
                {
                    "pc": [
                        677
                    ],
                    "errorMessage": "Funder is out of the deposit"
                },
                {
                    "pc": [
                        614
                    ],
                    "errorMessage": "Funder must set configuration first"
                },
                {
                    "pc": [
                        154,
                        212,
                        242,
                        285,
                        307,
                        332,
                        349
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        366
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        413
                    ],
                    "errorMessage": "Only addressUdpater setup in the config can update application"
                },
                {
                    "pc": [
                        654
                    ],
                    "errorMessage": "Only executor can use this method"
                },
                {
                    "pc": [
                        431,
                        448
                    ],
                    "errorMessage": "Only updater can change addressExecutive"
                },
                {
                    "pc": [
                        749,
                        819
                    ],
                    "errorMessage": "Only updater can use this method"
                },
                {
                    "pc": [
                        493,
                        604
                    ],
                    "errorMessage": "Receiver must be the gas station app"
                },
                {
                    "pc": [
                        462,
                        574,
                        645,
                        741,
                        811
                    ],
                    "errorMessage": "The smart contract is suspended at the moment"
                },
                {
                    "pc": [
                        754
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        400
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        157,
                        215,
                        245,
                        288,
                        310,
                        335,
                        352,
                        369
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        409,
                        427,
                        444,
                        460,
                        481,
                        572,
                        590,
                        643,
                        650,
                        739,
                        745,
                        758,
                        809,
                        815
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        298,
                        320
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEUAiYHAXMBdQthbGxEZXBvc2l0cwQVH3x1AWUBYwVzY3ZlcjEYQAAkKTEAZycGgBNCSUFURUMtR0FTLTAxLTAxLTAxZycEMQBnKCJnMRtBATKCCARwpl6JBIsYez0E6aPWqARnkt0lBDYl5OsEXRX2NwR8mQc6BMYdVvU2GgCOCADUAMUAtACbAIUAWgA8AAIiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgQXNhoFFzYaBhc2GgcXiAJgSRUWVwYCTFArTFCwI0MxGRREMRhENhoBF8AciAH8SRUWVwYCTFArTFCwI0MxGRREMRhENhoBFzYaAhfAHDYaA1cCADYaBIgBcUkVFlcGAkxQK0xQsCNDMRkURDEYRDEWIwlJOBAjEkSIAQgjQzEZFEQxGEQxFiMJSTgQIxJENhoBiAB/I0MxGRREMRhENhoBIlOIAF4jQzEZFEQxGEQ2GgGIAD4jQzEZgQQSRDEYRDYaAVcCAIgAGIABACJPAlQrTFCwI0MxGUD/CDEYFEQjQ4oBASIpZUQxABJEJwaL/2cjiYoBACIpZUQxABJEJwSL/2eJigEAIillRDEAEkQoi/9niYoCACIoZUQURIv+OACL/jgISSQKCUlOAiIqZUQIKkxni/44BzIKEkQnBUxQSb1FAUEAK0m+RCJbiwAIFksBvkRMXABLAbxISwFMv0m+REmBCFkiTFiL/1BLAbxIv4mLABaAAgAKUIv/UExJvEhMv4mKAQAiKGVEFESL/zgAi/84CEkkCgkiKmVESwEIKkxni/84BzIKEkQnBU8CUEm9RQFESb5EIltPAggWSwG+RExcAEsBvEi/iYoEASIoZUQURCInBGVEMQASRCcFi/9QSb1FAURJvkQiW4v8gdAPCAxEsYv+sgWL/bIHi/yyCCOyECKyAbO0AbQXSwK+RCJbi/wJTwIlCwkWSwK+RExcAEsCvEhPAky/iYoBASIoZUQURCIpZUQxABJEMgpzAEQiKmVECbGAFnNlcnZpY2UgZmVlIHdpdGhkcmF3YWyyBYv/sgeyCCOyECKyAbO0F4mKBwEiKGVEFEQiKWVEMQASRLGL+bIKi/2yDYv+sg6L/LIMi/uyP4v6sgslshCL/7IBs7QXiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}